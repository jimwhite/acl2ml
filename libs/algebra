((algebra::untie-reduces-count-fast (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (and) nil nil nil) ((x) nil nil (e0-ord-< e0-ord-<) nil nil nil) (nil nil (acl2-count acl2-count acl2-count acl2-count) nil nil nil nil) ((x x) nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::powerlist-zip (nil nil (powerlist-p) nil nil nil nil) (nil nil nil (p-zip) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-reduces-count (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (and) nil nil nil) ((x) nil nil (< <) nil nil nil) (nil nil (acl2-count acl2-count acl2-count acl2-count) nil nil nil nil) ((x x) nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-reduces-count-fast (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (and) nil nil nil) ((x) nil nil (e0-ord-< e0-ord-<) nil nil nil) (nil nil (acl2-count acl2-count acl2-count acl2-count) nil nil nil nil) ((x x) nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-unzip (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x x) nil nil (p-zip) nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-l-zip (nil nil nil (equal) nil nil nil) ((x) nil (p-unzip-l) nil nil nil nil) (nil nil nil (p-zip) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-r-zip (nil nil nil (equal) nil nil nil) ((y) nil (p-unzip-r) nil nil nil nil) (nil nil nil (p-zip) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::similar-non-powerlists (nil nil nil (implies) nil nil nil) (nil nil (not) (and) nil nil nil) (nil nil (not powerlist-p) (p-similar-p) nil nil nil) ((x y y) nil (powerlist-p) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-l-similar (nil nil nil (implies) nil nil nil) (nil nil nil (and p-similar-p) nil nil nil) (nil nil (syntaxp p-unzip-l p-unzip-l) (p-similar-p) nil nil nil) ((x y x y) nil (not) nil nil nil nil) (nil nil nil (acl2::term-order) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-r-similar (nil nil nil (implies) nil nil nil) (nil nil nil (and p-similar-p) nil nil nil) (nil nil (syntaxp p-unzip-r p-unzip-r) (p-similar-p) nil nil nil) ((x y x y) nil (not) nil nil nil nil) (nil nil nil (acl2::term-order) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-l-similar (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p) (and) nil nil) (nil nil (powerlist-p syntaxp p-untie-l p-untie-l) (p-similar-p) nil nil nil) ((x x y x y) nil (not) nil nil nil nil) (nil nil nil (acl2::term-order) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-r-similar (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p) (and) nil nil) (nil nil (powerlist-p syntaxp p-untie-r p-untie-r) (p-similar-p) nil nil nil) ((x x y x y) nil (not) nil nil nil nil) (nil nil nil (acl2::term-order) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::similar-powerlist (nil nil nil (implies) nil nil nil) (nil nil nil (and iff) nil nil nil) (nil nil (syntaxp powerlist-p powerlist-p) (p-similar-p) nil nil nil) ((x y x y) nil (not) nil nil nil nil) (nil nil nil (acl2::term-order) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-regular (nil nil nil (implies) nil nil nil) (nil nil (p-regular-p) (and) nil nil nil) ((x) nil (p-regular-p p-regular-p) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::regular-similar-unzip-untie (nil nil nil (implies) nil nil nil) (nil nil nil (and) (and) nil nil) (nil nil (powerlist-p p-regular-p) (p-similar-p p-similar-p p-similar-p) nil nil nil) ((x x) nil (p-unzip-l p-unzip-r p-unzip-l p-untie-l p-unzip-r p-untie-r) nil nil nil nil) ((x x x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::regular-similar-swap-unzip (nil nil nil (implies) nil nil nil) (nil nil nil (and) (and) nil nil) (nil nil (p-regular-p syntaxp) (p-similar-p p-similar-p p-similar-p) nil nil nil) ((x x y) nil (not p-unzip-l p-unzip-r p-unzip-r p-unzip-l) nil nil nil nil) ((x y x y) nil nil (acl2::term-order) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::similar-regular (nil nil nil (implies) nil nil nil) (nil nil (p-regular-p) (and) nil nil nil) ((y) nil (p-regular-p) (p-similar-p) nil nil nil) ((x x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::regular-similar-tie-zip (nil nil nil (implies) nil nil nil) (nil nil nil (and p-similar-p) nil nil nil) (nil nil (p-regular-p) (p-similar-p p-zip p-tie) nil nil nil) ((x x y x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-regular (nil nil nil (implies) nil nil nil) (nil nil (p-regular-p) (and) nil nil nil) (nil nil (p-regular-p) (p-similar-p p-zip) nil nil nil) ((x x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn1-same-as-a-zip-fn1 (nil nil nil (equal) nil nil nil) (nil nil (b-tie-fn1 a-zip-fn1) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn1-similar (nil nil nil (p-similar-p) nil nil nil) ((x) nil (a-zip-fn1) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn1-similar (nil nil nil (p-similar-p) nil nil nil) ((x) nil (b-tie-fn1) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn1-regular (nil nil nil (equal) nil nil nil) (nil nil (p-regular-p p-regular-p) nil nil nil nil) ((x) nil (a-zip-fn1) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn1-regular (nil nil nil (equal) nil nil nil) (nil nil (p-regular-p p-regular-p) nil nil nil nil) ((x) nil (b-tie-fn1) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-same-as-a-zip-fn2 (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p equal) nil nil nil) ((x y) nil nil (a-zip-fn2 b-tie-fn2) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-similar-1 (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p p-similar-p) nil nil nil) ((x y x) nil nil (a-zip-fn2) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-similar-1 (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p p-similar-p) nil nil nil) ((x y x) nil nil (b-tie-fn2) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-similar-2 (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p p-similar-p) nil nil nil) ((x y y) nil nil (a-zip-fn2) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-similar-2 (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p p-similar-p) nil nil nil) ((x y y) nil nil (b-tie-fn2) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-regular (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p equal) nil nil nil) ((x y) nil (p-regular-p) (and) nil nil nil) (nil nil (p-regular-p p-regular-p) (b-tie-fn2) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-regular (nil nil nil (implies) nil nil nil) (nil nil nil (p-similar-p equal) nil nil nil) ((x y) nil (p-regular-p) (and) nil nil nil) (nil nil (p-regular-p p-regular-p) (a-zip-fn2) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-comm-commutes (nil nil nil (equal) nil nil nil) (nil nil nil (a-zip-fn2-comm a-zip-fn2-comm) nil nil nil) ((x y y x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-comm-commutes (nil nil nil (equal) nil nil nil) (nil nil nil (b-tie-fn2-comm b-tie-fn2-comm) nil nil nil) ((x y y x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-assoc-transitive (nil nil nil (implies) nil nil nil) (nil nil nil (and equal) nil nil nil) (nil nil nil (p-similar-p p-similar-p a-zip-fn2-assoc a-zip-fn2-assoc) nil nil nil) ((x y y z z x) nil nil (a-zip-fn2-assoc a-zip-fn2-assoc) nil nil nil) ((x y y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-assoc-transitive (nil nil nil (implies) nil nil nil) (nil nil nil (and equal) nil nil nil) (nil nil nil (p-similar-p p-similar-p b-tie-fn2-assoc b-tie-fn2-assoc) nil nil nil) ((x y y z z x) nil nil (b-tie-fn2-assoc b-tie-fn2-assoc) nil nil nil) ((x y y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-a-zip-fn2-accum-fn1 (nil nil nil (equiv) nil nil nil) (nil nil (a-zip-fn2-accum-fn1) (fn2-accum) nil nil nil) (nil nil (a-zip-fn2-accum-fn1 a-zip-fn2-accum-fn1) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::fnt-accum-assoc-trick (nil nil nil (equiv) nil nil nil) (nil nil nil (fn2-accum fn2-accum) nil nil nil) ((y x) nil nil (fn2-accum fn2-accum) nil nil nil) ((x z y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-b-tie-fn2-accum-fn1 (nil nil nil (equiv) nil nil nil) (nil nil (b-tie-fn2-accum-fn1) (fn2-accum) nil nil nil) (nil nil (b-tie-fn2-accum-fn1 b-tie-fn2-accum-fn1) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-accum-fn1-same-as-b-tie-fn2-accum-fn1 (nil nil nil (equiv) nil nil nil) (nil nil (b-tie-fn2-accum-fn1 a-zip-fn2-accum-fn1) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-b-tie-fn2-accum-fn1 (nil nil nil (equiv) nil nil nil) (nil nil (b-tie-fn2-accum-fn1) (fn2-accum) nil nil nil) (nil nil (b-tie-fn2-accum-fn1 b-tie-fn2-accum-fn1) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-a-zip-fn2-accum-fn1 (nil nil nil (equiv) nil nil nil) (nil nil (a-zip-fn2-accum-fn1) (fn2-accum) nil nil nil) (nil nil (a-zip-fn2-accum-fn1 a-zip-fn2-accum-fn1) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-a-zip-fn2-accum-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equiv) nil nil nil) ((x) nil (a-zip-fn2-accum-fn1) (fn2-accum) nil nil nil) ((x) nil (a-zip-fn2-accum-fn1 a-zip-fn2-accum-fn1) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-b-tie-fn2-accum-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equiv) nil nil nil) ((x) nil (b-tie-fn2-accum-fn1) (fn2-accum) nil nil nil) ((x) nil (b-tie-fn2-accum-fn1 b-tie-fn2-accum-fn1) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-b-tie-fn2-accum-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equiv) nil nil nil) ((x) nil (b-tie-fn2-accum-fn1) (fn2-accum) nil nil nil) ((x) nil (b-tie-fn2-accum-fn1 b-tie-fn2-accum-fn1) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-a-zip-fn2-accum-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equiv) nil nil nil) ((x) nil (a-zip-fn2-accum-fn1) (fn2-accum) nil nil nil) ((x) nil (a-zip-fn2-accum-fn1 a-zip-fn2-accum-fn1) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-plus-fn1-same-as-b-tie-plus-fn1 (nil nil nil (equal) nil nil nil) (nil nil (b-tie-plus-fn1 a-zip-plus-fn1) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-a-zip-plus-fn1 (nil nil nil (equal) nil nil nil) (nil nil (a-zip-plus-fn1) (+) nil nil nil) (nil nil (a-zip-plus-fn1 a-zip-plus-fn1) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-b-tie-plus-fn1 (nil nil nil (equal) nil nil nil) (nil nil (b-tie-plus-fn1) (+) nil nil nil) (nil nil (b-tie-plus-fn1 b-tie-plus-fn1) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-a-zip-plus-fn1 (nil nil nil (equal) nil nil nil) (nil nil (a-zip-plus-fn1) (+) nil nil nil) (nil nil (a-zip-plus-fn1 a-zip-plus-fn1) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-b-tie-plus-fn1 (nil nil nil (equal) nil nil nil) (nil nil (b-tie-plus-fn1) (+) nil nil nil) (nil nil (b-tie-plus-fn1 b-tie-plus-fn1) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-a-zip-plus-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (a-zip-plus-fn1) (+) nil nil nil) ((x) nil (a-zip-plus-fn1 a-zip-plus-fn1) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-b-tie-plus-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (b-tie-plus-fn1) (+) nil nil nil) ((x) nil (b-tie-plus-fn1 b-tie-plus-fn1) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-b-tie-plus-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (b-tie-plus-fn1) (+) nil nil nil) ((x) nil (b-tie-plus-fn1 b-tie-plus-fn1) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-a-zip-plus-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (a-zip-plus-fn1) (+) nil nil nil) ((x) nil (a-zip-plus-fn1 a-zip-plus-fn1) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-and-fn1-same-as-b-tie-and-fn1 (nil nil nil (iff) nil nil nil) (nil nil (b-tie-and-fn1 a-zip-and-fn1) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-a-zip-and-fn1 (nil nil nil (iff) nil nil nil) (nil nil (a-zip-and-fn1) (and) nil nil nil) (nil nil (a-zip-and-fn1 a-zip-and-fn1) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-b-tie-and-fn1 (nil nil nil (iff) nil nil nil) (nil nil (b-tie-and-fn1) (and) nil nil nil) (nil nil (b-tie-and-fn1 b-tie-and-fn1) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-a-zip-and-fn1 (nil nil nil (iff) nil nil nil) (nil nil (a-zip-and-fn1) (and) nil nil nil) (nil nil (a-zip-and-fn1 a-zip-and-fn1) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-b-tie-and-fn1 (nil nil nil (iff) nil nil nil) (nil nil (b-tie-and-fn1) (and) nil nil nil) (nil nil (b-tie-and-fn1 b-tie-and-fn1) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-a-zip-and-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (iff) nil nil nil) ((x) nil (a-zip-and-fn1) (and) nil nil nil) ((x) nil (a-zip-and-fn1 a-zip-and-fn1) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-b-tie-and-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (iff) nil nil nil) ((x) nil (b-tie-and-fn1) (and) nil nil nil) ((x) nil (b-tie-and-fn1 b-tie-and-fn1) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-b-tie-and-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (iff) nil nil nil) ((x) nil (b-tie-and-fn1) (and) nil nil nil) ((x) nil (b-tie-and-fn1 b-tie-and-fn1) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-a-zip-and-fn1 (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (iff) nil nil nil) ((x) nil (a-zip-and-fn1) (and) nil nil nil) ((x) nil (a-zip-and-fn1 a-zip-and-fn1) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-type-same-as-b-tie-type (nil nil nil (equal) nil nil nil) (nil nil (b-tie-list-of-type-fn a-zip-list-of-type-fn) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-a-zip-list-of-type-fn (nil nil nil (equal) nil nil nil) (nil nil (a-zip-list-of-type-fn) (and) nil nil nil) (nil nil (a-zip-list-of-type-fn a-zip-list-of-type-fn) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::zip-b-tie-list-of-type-fn (nil nil nil (equal) nil nil nil) (nil nil (b-tie-list-of-type-fn) (and) nil nil nil) (nil nil (b-tie-list-of-type-fn b-tie-list-of-type-fn) (p-zip) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-a-zip-list-of-type-fn (nil nil nil (equal) nil nil nil) (nil nil (a-zip-list-of-type-fn) (and) nil nil nil) (nil nil (a-zip-list-of-type-fn a-zip-list-of-type-fn) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::tie-b-tie-list-of-type-fn (nil nil nil (equal) nil nil nil) (nil nil (b-tie-list-of-type-fn) (and) nil nil nil) (nil nil (b-tie-list-of-type-fn b-tie-list-of-type-fn) (p-tie) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-a-zip-list-of-type-fn (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (a-zip-list-of-type-fn) (and) nil nil nil) ((x) nil (a-zip-list-of-type-fn a-zip-list-of-type-fn) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-b-tie-list-of-type-fn (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (b-tie-list-of-type-fn) (and) nil nil nil) ((x) nil (b-tie-list-of-type-fn b-tie-list-of-type-fn) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-a-zip-list-of-type-fn (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (a-zip-list-of-type-fn) (and) nil nil nil) ((x) nil (a-zip-list-of-type-fn a-zip-list-of-type-fn) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-b-tie-list-of-type-fn (nil nil nil (implies) nil nil nil) (nil nil (powerlist-p) (equal) nil nil nil) ((x) nil (b-tie-list-of-type-fn) (and) nil nil nil) ((x) nil (b-tie-list-of-type-fn b-tie-list-of-type-fn) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))