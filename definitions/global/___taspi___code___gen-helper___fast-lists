((/taspi/code/gen-helper/fast-lists.lisp::number-to-element (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((l) nil nil (cons recursive-call) nil nil nil) ((pos) nil (car cdr 1+) nil nil nil nil) ((l l pos) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::taxa-list-to-index-taxon (nil nil nil (build-fast-alist-from-alist) nil nil nil) (nil nil (quote) (number-to-element) nil nil nil) ((taxa-list index-taxon) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::element-to-number (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((l) nil nil (cons recursive-call) nil nil nil) ((pos) nil (car cdr 1+) nil nil nil nil) ((l l pos) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::taxa-list-to-taxon-index (nil nil nil (build-fast-alist-from-alist) nil nil nil) (nil nil (quote) (element-to-number) nil nil nil) ((taxa-list taxon-index) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::good-taxon-index-halist (nil nil nil nil (if) nil nil) ((t) nil (consp) nil nil (and) nil) ((x) nil (consp integerp recursive-call) (or) nil nil nil) (nil nil (car integerp cdar cdr) (and) nil nil nil) ((x x x) nil (caar symbolp not) nil nil nil nil) ((x) nil (caar) (equal) nil nil nil) ((x nil) nil (caar) nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::get-taxa-from-taxon-index (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil (caar recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::int-symlist (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil (recursive-call) (or) nil nil nil) (nil nil (integerp cdr) (and) nil nil nil) ((x) nil (car symbolp not) nil nil nil nil) ((x) nil (car) (equal) nil nil nil) ((x nil) nil (car) nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::new-ind (nil nil nil nil (if) nil nil) (nil nil (consp) nil (list list) nil nil) ((list p list p acc) nil (car) nil (recursive-call) nil nil) ((list) nil (cdr 1+) (cons) nil nil nil) ((list p acc) nil nil (cons) nil nil nil) ((p) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::good-index-taxon-halist (nil nil nil nil (if) nil nil) ((t) nil (consp) nil nil (and) nil) ((x) nil (consp integerp recursive-call) (or) nil nil nil) (nil nil (car integerp caar cdr) (and) nil nil nil) ((x x x) nil (cdar symbolp not) nil nil nil nil) ((x) nil (cdar) (equal) nil nil nil) ((x nil) nil (cdar) nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::integer-halistp (nil nil nil nil (if) nil nil) (nil nil (atom symbolp) nil (and) nil nil) ((x x) nil (consp integerp recursive-call) nil nil nil nil) (nil nil (car cdar cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::new-ind2 (nil nil nil nil (if) nil nil) (nil nil (consp) nil (list list) nil nil) ((list p list p acc) nil (car) nil (recursive-call) nil nil) ((list) nil (cdr 1+) (cons) nil nil nil) ((list p acc) nil nil (cons) nil nil nil) ((p) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::get-taxa-from-index-taxon (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil (cdar recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/fast-lists.lisp::bound-to-nat-list (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((l) nil nil (implies recursive-call) nil nil nil) ((db) nil (natp cdr) (assoc-hqual) nil nil nil) ((db l) nil (car cdr) nil nil nil nil) ((l) nil nil (assoc-hqual) nil nil nil) ((db) nil (car) nil nil nil nil)))