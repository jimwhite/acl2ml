((/arithmetic-4/lib/basic-ops/common.lisp::collect-+ (nil nil nil (+) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::collect-* (nil nil nil (*) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::bubble-down (nil nil (declare) nil nil nil nil) (nil nil (ignore) nil nil nil nil) ((match) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::addend-pattern (nil nil nil nil nil nil (cond)) (nil nil ((variablep addend) (fquotep addend) (eq (ffn-symb addend) (quote UNARY--)) (and (eq (ffn-symb addend) (quote BINARY-*)) (rational-constant-p (arg1 addend))) t) nil nil nil nil) ((addend addend addend) nil (arg1 arg2) nil nil nil nil) ((addend addend) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::matching-addend-patterns-p (nil nil nil (cond) nil nil nil) (nil nil ((quotep pattern-1) t) nil nil nil nil) ((nil) nil nil (equal) nil nil nil) ((pattern-1 pattern-2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::matching-addend-p (nil nil nil (let) nil nil nil) (((addend-pattern (addend-pattern addend))) nil nil (matching-addend-patterns-p) nil nil nil) ((pattern addend-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::factor-pattern-base (nil nil nil nil (cond) nil nil) (nil nil ((variablep x) (and (fquotep x) (consp (cdr x))) t) nil nil nil nil) ((x x) nil nil nil (if) nil nil) (nil (2) (power-of-2 unquote) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::matching-exponents (nil nil nil (equal) nil nil nil) (nil nil (addend-pattern addend-pattern) nil nil nil nil) ((exp-1 exp-2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::factor-pattern-gather-exponents (nil nil nil nil nil nil (cond)) (nil nil ((variablep factor) (and (fquotep factor) (consp (cdr factor))) (eq (ffn-symb factor) (quote UNARY-/)) (eq (ffn-symb factor) (quote EXPT)) t) nil nil nil nil) ((factor factor) nil (recursive-call) (let) (cond) nil nil) (nil nil ((power-of-2-generalized factor) (rational-constant-p factor) t arg1 (base (factor-pattern-base (arg1 factor)))) nil (if) nil nil) ((factor base) (2) (abs unquote exponent acl2-numberp `) nil nil nil nil) ((factor base) nil (unquote arg2) (EXPT-WITH-CONST-BASE) nil nil nil) ((factor factor) nil (, ,) nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::matching-factor-gather-exponents-patterns-p (nil nil nil nil (cond) nil nil) (nil nil ((acl2-numberp pattern-1) (eq (fn-symb pattern-1) (quote EXPT-WITH-CONST-BASE)) t) nil nil nil nil) (nil nil nil (equal) (and) (cond) nil) ((pattern-1 pattern-2) nil (not (equal (arg1 pattern-1) 0) (equal (arg1 pattern-1) pattern-2) (eq (fn-symb pattern-2) (quote EXPT-WITH-CONST-BASE)) t) (eq equal) nil nil nil) ((pattern-1 nil t nil) nil (fn-symb quote arg1) (equal or) nil nil nil) ((pattern-1 pattern-2 EXPT-WITH-CONST-BASE pattern-2) (0) nil (equal equal) nil nil nil) (nil nil (arg1 arg1 arg2 arg2) nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::matching-factor-gather-exponents-p (nil nil nil (let) nil nil nil) (((factor-pattern (factor-pattern-gather-exponents factor))) nil nil (matching-factor-gather-exponents-patterns-p) nil nil nil) ((pattern factor-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::factor-pattern-scatter-exponents (nil nil nil nil nil nil (cond)) (nil nil ((variablep factor) (fquotep factor) (eq (ffn-symb factor) (quote UNARY-/)) (eq (ffn-symb factor) (quote EXPT)) t) nil nil nil nil) ((factor factor) (0) (recursive-call) (let) nil nil nil) (nil nil (arg1 (base (factor-pattern-base (arg1 factor)))) nil (cond) nil nil) ((factor) nil (exponent (acl2-numberp base) (quotep exponent) t) nil nil nil nil) ((base) nil (arg2 ` `) nil nil nil nil) ((factor) nil nil (EXPT-WITH-CONST-BASE EXPT) nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::matching-factor-scatter-exponents-patterns-p (nil nil nil nil nil (cond) nil) (nil nil ((acl2-numberp pattern-1) (eq (fn-symb pattern-1) (quote EXPT-WITH-CONST-BASE)) (eq (fn-symb pattern-1) (quote EXPT)) t) nil nil nil nil) ((nil) nil nil (equal) (cond cond) nil nil) ((pattern-1 pattern-2) nil ((equal (arg1 pattern-1) 0) (eq (fn-symb pattern-2) (quote EXPT-WITH-CONST-BASE)) t (equal (arg1 pattern-1) 0) (eq (fn-symb pattern-2) (quote EXPT)) t) nil nil nil nil) ((nil nil nil nil) nil nil (equal and) nil nil nil) (nil nil (arg2 arg2) (equal matching-exponents) nil nil nil) ((pattern-1 pattern-2) nil (arg1 arg1 arg2 arg2) nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::matching-factor-scatter-exponents-p (nil nil nil (let) nil nil nil) (((factor-pattern (factor-pattern-scatter-exponents factor))) nil nil (matching-factor-scatter-exponents-patterns-p) nil nil nil) ((pattern factor-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::arith-factor-pattern-scatter-exponents (nil nil nil nil nil nil (cond)) (nil nil ((variablep factor) (fquotep factor) (eq (ffn-symb factor) (quote UNARY-/)) (eq (ffn-symb factor) (quote EXPT)) t) nil nil nil nil) ((factor factor) (0) (`) (let) nil nil nil) (nil nil (UNARY-/ (base (factor-pattern-base (arg1 factor)))) nil (if) nil nil) (nil nil (, exponent acl2-numberp) nil (list if) nil nil) ((base base exponent base) nil (recursive-call arg2 quote quotep `) nil nil nil nil) ((factor EXPT-WITH-CONST-BASE exponent) nil (arg1) (EXPT) nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::arith-matching-factor-scatter-exponents-patterns-p (nil nil nil nil nil nil nil) (nil nil ((acl2-numberp pattern-1) (eq (fn-symb pattern-1) (quote EXPT-WITH-CONST-BASE)) (eq (fn-symb pattern-1) (quote EXPT)) (eq (fn-symb pattern-1) (quote UNARY-/)) (eq (fn-symb pattern-2) (quote UNARY-/)) t) nil nil nil nil) ((nil nil) nil nil (equal equal) nil (cond cond) nil) ((pattern-2 pattern-1) nil ((equal (arg1 pattern-1) 0) (eq (fn-symb pattern-2) (quote EXPT-WITH-CONST-BASE)) (eq (fn-symb pattern-2) (quote UNARY-/)) t (equal (arg1 pattern-1) 0) (eq (fn-symb pattern-2) (quote EXPT)) (eq (fn-symb pattern-2) (quote UNARY-/)) t arg1 arg1) nil nil nil nil) ((nil nil nil nil pattern-1 pattern-2) nil nil (equal equal and let) nil nil nil) ((pattern-1 (pattern-2-arg1 (arg1 pattern-2))) nil (arg2 arg2 arg1) (equal matching-exponents) (and) nil nil) ((pattern-1 pattern-2 pattern-2) nil (arg1 arg1 arg2 arg2) (eq equal matching-exponents) nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::arith-matching-factor-scatter-exponents-p (nil nil nil (let) nil nil nil) (((factor-pattern (arith-factor-pattern-scatter-exponents factor))) nil nil (arith-matching-factor-scatter-exponents-patterns-p) nil nil nil) ((pattern factor-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::but-nth (nil nil nil nil (cond) nil nil) (nil nil ((atom list) (<= n 0) t) nil nil nil nil) ((nil) nil (cdr) (recursive-call) nil nil nil) ((list) nil (cdr) (+) nil nil nil) ((list n) (-1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::how-many (nil nil nil nil (cond) nil nil) (nil nil ((atom list) (equal (car list) x) t) nil nil nil nil) ((ans ans) nil nil nil (recursive-call) nil nil) ((x) nil (cdr) (+) nil nil nil) ((list ans) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::prime-factors-1 (nil nil nil (condense-factors) nil nil nil) ((nil) nil nil nil nil (prime-factors-2) nil) ((n i ith-prime factors) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-4/lib/basic-ops/common.lisp::prime-factors (nil nil nil nil nil nil nil) (nil nil ((not (integerp n)) (equal n -1) (equal n 0) (equal n 1) (< 0 n) t) nil nil nil nil) ((nil) nil (quote quote `) nil nil (prime-factors-1 prime-factors-1) nil) (((-1 . 1) (0 . 1) (1 . 1) n nil) (0 2 0 2) (- quote) nil nil nil nil) ((n) (-1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))