((/taspi/tree-score/costs.lisp::rational-or-nil-listp (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((x) nil (recursive-call) (or) nil nil nil) (nil nil (not rationalp cdr) nil nil nil nil) ((x) nil (car car) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::rational-or-nil-list-listp (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((x) nil (rational-or-nil-listp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::plus-nil-inf (nil nil nil nil (if) nil nil) ((nil) nil nil (and +) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::min-nil-inf (nil nil nil nil (if) nil nil) ((x y) nil nil nil (if) nil nil) ((y x) nil nil nil (if) nil nil) ((x y) nil nil (<) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::min-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (min-nil-inf) nil nil nil) ((list) nil (car recursive-call) nil nil nil nil) ((list) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::sum-list (nil nil nil nil (if) nil nil) (nil (0) (atom) (plus-nil-inf) nil nil nil) ((list) nil (car recursive-call) nil nil nil nil) ((list) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::sum-minima (nil nil nil nil (if) nil nil) (nil (0) (atom) (plus-nil-inf) nil nil nil) ((scorelist) nil (min-list recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((scorelist scorelist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::sequence-scorelistp (nil nil nil nil (if) nil nil) ((t) nil (atom) nil (and) nil nil) ((x) nil (rational-or-nil-listp) (equal recursive-call) nil nil nil) ((alphabet-len alphabet-len) nil (len car cdr) nil nil nil nil) ((x x) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::zero-scores (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((seq) (0) (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil) ((seq) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::charstate-scorelist-map-p (nil nil nil nil (if) nil nil) ((t) nil (atom) nil nil nil (and)) ((x) nil (consp valid-char rational-or-nil-listp) (equal recursive-call) nil nil nil) ((alpha-len alpha-len) nil (car caar cdar len cdr) nil nil nil nil) ((x x x x) nil (cdar) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::make-leaf-score-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((seq (scoreList (het (car seq) cssl-map))) nil nil (cons) nil nil nil) (nil nil nil nil (if recursive-call) nil nil) ((scoreList cssl-map alpha-len) nil (cdr cdr) nil (hons-make-list-acc) nil nil) ((scoreList alpha-len nil nil seq) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::cost-rowp (nil nil nil nil (and) nil nil) (nil nil (consp valid-char rational-or-nil-listp) nil nil nil nil) ((x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::cost-matrixp (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((x) nil (cost-rowp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::cost-matrixp-nstates (nil nil nil nil (if) nil nil) ((t) nil (atom) nil nil nil (and)) ((x) nil (consp valid-char rational-or-nil-listp) (equal recursive-call) nil nil nil) ((n n) nil (car caar cdar len cdr) nil nil nil nil) ((x x x x) nil (cdar) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::make-default-costlist (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((alphabet) nil nil (recursive-call) (if) nil nil) ((currstate) (0 1) (cdr) (equal) nil nil nil) ((currstate alphabet) nil (car) nil nil nil nil) ((alphabet) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::make-default-cmat (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((alphabet) nil nil (cons recursive-call) nil nil nil) ((whole) nil (car cdr) (make-default-costlist) nil nil nil) ((alphabet whole alphabet) nil (car) nil nil nil nil) ((alphabet) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/costs.lisp::make-default-cost-matrix (nil nil nil (make-default-cmat) nil nil nil) ((alphabet alphabet) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))