((/models/jvm/m1/find-k!.lisp::fast-lessp-loop-clock (nil nil nil (+) nil nil nil) (nil nil nil (*) (if) nil nil) (nil (6 3 13) nil (< acl2::min) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-lessp-clock (nil nil nil nil (+) nil nil) (nil (15) nil (+ exit-clock) nil nil nil) ((ret-pc) nil (quote) (*) (if) nil nil) ((lessp) (6 3 13) nil (< acl2::min) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-mod-loop-clock (nil nil nil (+) nil nil nil) (nil nil nil (* +) nil nil nil) (nil (7) nil (+ floor) (fast-lessp-clock) nil nil) ((x y y) (12) (quote) (mod) (fast-lessp-clock) nil nil) ((x y x y) nil (quote 0) nil nil nil nil) (nil (1) (0) nil nil nil nil) (nil (1) nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-mod-clock (nil nil nil nil (+) nil nil) (nil (15) nil (fast-mod-loop-clock exit-clock) nil nil nil) ((x y ret-pc) nil (quote) nil nil nil nil) ((mod) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-floor-loop-clock (nil nil nil (+) nil nil nil) (nil nil nil (* +) nil nil nil) (nil (7) nil (+ floor) (fast-lessp-clock) nil nil) ((x y y) (16) (quote) (mod) (fast-lessp-clock) nil nil) ((x y x y) nil (quote 0) nil nil nil nil) (nil (2) (0) nil nil nil nil) (nil (2) nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-floor-clock (nil nil nil nil (+) nil nil) (nil (20) nil (fast-floor-loop-clock exit-clock) nil nil nil) ((x y ret-pc) nil (quote) nil nil nil nil) ((floor) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-log2-loop-clock (nil nil nil nil (if) nil nil) (nil (3) (zp) nil (if) nil nil) ((x) (8) nil (equal) (+) nil nil) ((x) (1 17) (recursive-call) nil (fast-floor-clock) nil nil) ((x) (2) (quote) (floor) nil nil nil) ((x) (2) nil nil (0) nil nil) (nil (2 2 3) nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-log2-clock (nil nil nil nil (+) nil nil) (nil (15) (fast-log2-loop-clock) (exit-clock) nil nil nil) ((x ret-pc) nil (quote) nil nil nil nil) ((log2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-expt-loop-clock (nil nil nil (+) nil nil nil) (nil (3) nil (*) nil nil nil) ((n) (13) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-expt-clock (nil nil nil nil (+) nil nil) (nil (20) (fast-expt-loop-clock) (exit-clock) nil nil nil) ((n ret-pc) nil (quote) nil nil nil nil) ((expt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-NST-IN-LOOP-CLOCK (nil nil nil nil (+) nil nil) (nil (8) nil (fast-expt-clock) (fast-mod-clock) nil nil) ((W cell) nil (quote quote) (expt) nil nil nil) ((W) (5 2) (1) nil nil nil nil) (nil (5) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-NST-IN-CLOCK (nil nil nil nil (+) nil nil) (nil (15) nil (fast-NST-IN-LOOP-CLOCK exit-clock) nil nil nil) ((CELL W RET-PC) nil (quote) nil nil nil nil) ((NST-IN) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-NSYM-LOOP-CLOCK (nil nil nil nil nil (+) nil) (nil (12) nil (fast-expt-clock) (fast-floor-CLOCK fast-MOD-CLOCK) nil nil) ((W CELL) (2) (quote quote quote) (EXPT FLOOR) nil nil nil) ((W CELL) (2 6) (0) (1 EXPT) nil nil nil) ((W) (0 6 6 2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NSYM-CLOCK (nil nil nil nil (+) nil nil) (nil (15) nil (fast-NSYM-LOOP-CLOCK exit-clock) nil nil nil) ((CELL W RET-PC) nil (quote) nil nil nil nil) ((NSYM) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NOP-LOOP-CLOCK (nil nil nil nil nil (+) nil) (nil (14) nil (fast-EXPT-CLOCK) (fast-FLOOR-CLOCK fast-MOD-CLOCK) nil nil) ((CELL) (8) (quote quote quote) (+ EXPT FLOOR) nil nil nil) ((W CELL) (1 2 7) (0) (1 + EXPT) nil nil nil) ((W) (0 7 7 1 2) nil (+) nil nil nil) ((W) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NOP-CLOCK (nil nil nil nil (+) nil nil) (nil (15) nil (fast-NOP-LOOP-CLOCK exit-clock) nil nil nil) ((CELL W RET-PC) nil (quote) nil nil nil nil) ((NOP) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NST-OUT-LOOP-CLOCK (nil nil nil nil nil nil (+)) (nil (18) nil (fast-EXPT-CLOCK fast-EXPT-CLOCK) (fast-FLOOR-CLOCK fast-MOD-CLOCK) nil nil) ((CELL W) nil (quote quote quote quote) (+ EXPT FLOOR EXPT) nil nil nil) ((W CELL W) (4 2 8 2) (0 1) (1 + EXPT) nil nil nil) ((W) (0 8 8 4 8 2) nil (+) nil nil nil) ((W) (4) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NST-OUT-CLOCK (nil nil nil nil (+) nil nil) (nil (15) nil (fast-NST-OUT-LOOP-CLOCK exit-clock) nil nil nil) ((CELL W RET-PC) nil (quote) nil nil nil nil) ((NST-OUT) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NCAR-LOOP-CLOCK (nil nil nil nil (+) nil nil) (nil (12) nil (fast-EXPT-CLOCK) (fast-MOD-CLOCK) nil nil) ((TM) nil (quote quote) (+ EXPT) nil nil nil) (nil (4 9 2) (1) (* +) nil nil nil) ((W) (9 2 4) nil (*) nil nil nil) ((W) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NCAR-CLOCK (nil nil nil nil (+) nil nil) (nil (15) nil (fast-NCAR-LOOP-CLOCK exit-clock) nil nil nil) ((TM W RET-PC) nil (quote) nil nil nil nil) ((NCAR) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NCDR-LOOP-CLOCK (nil nil nil nil (+) nil nil) (nil (13) nil (fast-EXPT-CLOCK) (fast-FLOOR-CLOCK) nil nil) ((TM) nil (quote quote) (+ EXPT) nil nil nil) (nil (4 10 2) (1) (* +) nil nil nil) ((W) (10 2 4) nil (*) nil nil nil) ((W) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NCDR-CLOCK (nil nil nil nil (+) nil nil) (nil (15) nil (fast-NCDR-LOOP-CLOCK exit-clock) nil nil nil) ((TM W RET-PC) nil (quote) nil nil nil nil) ((NCDR) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-CURRENT-SYMN-LOOP-CLOCK (nil nil nil nil (IF) nil nil) (nil nil nil (EQUAL +) nil nil (+)) (nil (0 8 20) nil (- fast-LOG2-CLOCK fast-LOG2-CLOCK fast-EXPT-CLOCK) (fast-FLOOR-CLOCK fast-MOD-CLOCK) nil nil) ((POS TAPE TAPE POS TAPE) (2) (LOG2 quote quote quote quote quote) (EXPT FLOOR) nil nil nil) ((TAPE POS TAPE) (2) (2) (1 1 0 EXPT) (1) nil nil) ((POS) (0 11 0 11 0 2 11 2 11 11 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-CURRENT-SYMN-CLOCK (nil nil nil nil (+) nil nil) (nil (15) nil (fast-CURRENT-SYMN-LOOP-CLOCK exit-clock) nil nil nil) ((TAPE POS RET-PC) nil (quote) nil nil nil nil) ((CURRENT-SYMN) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NINSTR1-LOOP-CLOCK (nil nil nil nil (if) nil nil) (nil (0) nil (and) (IF) nil nil) (nil (3) (natp natp) (EQUAL) (IF) nil nil) ((w tm TM) (0 8) nil (EQUAL) (IF) nil nil) (nil (0) nil (- EQUAL) (IF IF) nil nil) ((TM NNIL) (0) nil (EQUAL + + EQUAL + +) (IF) nil nil) (nil (1 0 11 11 0 11 11) nil (EQUAL - - + + - + +) nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NINSTR1-CLOCK (nil nil nil (+) nil nil nil) (nil (22) nil (+) nil nil nil) (nil nil nil (+) nil nil (fast-NINSTR1-LOOP-CLOCK)) ((ST SYM TM W NNIL) (8) nil (exit-clock) nil nil nil) ((RET-PC) nil (quote) nil nil nil nil) ((NINSTR1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NEW-TAPE2-LOOP-CLOCK (nil nil nil nil (IF) nil nil) (nil nil nil (EQUAL) (IF IF) nil nil) (nil (0) nil (EQUAL EQUAL) (IF IF IF IF IF) nil nil) ((OP OP) (0 0 0) nil (EQUAL EQUAL EQUAL EQUAL EQUAL) (IF IF IF IF IF IF IF IF IF) nil nil) ((OP) (0 0 1 0 0 0 15 16 0) nil (EQUAL - EQUAL + + EQUAL + - EQUAL EQUAL - EQUAL EQUAL + + - EQUAL EQUAL) (IF IF IF IF IF IF IF IF IF) nil nil) ((POS OP OP OP POS OP) (0 0 9 9 0 9 1 0 0 2 0 0 13 13 1 0 20 21 0 21 22) (LOG2) (- + + - + EQUAL + + - EQUAL + + EQUAL + - EQUAL + + EQUAL + - + + - EQUAL EQUAL + + - EQUAL EQUAL + +) (IF IF) nil nil) ((OP TAPE OP POS OP POS OP POS OP POS OP POS) (1 0 9 9 0 14 14 0 14 0 15 15 0 15 9 2 0 0 18 18 2 0 0 19 19) (LOG2 LOG2 LOG2) (fast-LOG2-CLOCK + fast-LOG2-CLOCK + CURRENT-SYMN fast-LOG2-CLOCK + CURRENT-SYMN + + + + - + EQUAL + + + + - + EQUAL + + fast-LOG2-CLOCK + fast-LOG2-CLOCK - + + - + +) nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-NEW-TAPE2-CLOCK (nil nil nil (+) nil nil nil) (nil (14) nil (+) nil nil nil) (nil nil nil (+) (fast-NEW-TAPE2-LOOP-CLOCK) nil nil) ((OP TAPE POS) (8) nil (exit-clock) nil nil nil) ((RET-PC) nil (quote) nil nil nil nil) ((NEW-TAPE2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-TMI3-LOOP-CLOCK (nil nil (DECLARE) nil nil nil nil) (nil nil nil (XARGS) nil nil nil) ((:MEASURE) nil (ACL2-COUNT) nil nil nil nil) ((N) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-TMI3-CLOCK (nil nil nil nil (IF) nil nil) (nil nil nil (EQUAL + +) nil nil nil) (nil (0 26 26) nil (MV-NTH +) nil nil nil) ((ST TAPE POS TM W NNIL N) (0) nil (MV-LIST +) nil nil nil) ((ST TAPE POS TM W NNIL N) (4 15) nil (exit-clock) nil nil nil) ((ST TAPE POS TM W N RET-PC) nil (quote) nil nil nil nil) ((TMI3) nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-MAIN-LOOP-CLOCK (nil nil nil (+) nil nil nil) (nil (8) nil nil nil nil nil) ((ST TAPE POS TM W NNIL N) nil (quote) nil nil nil nil) (nil (15) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::FAST-MAIN-CLOCK (nil nil nil nil (IF) nil nil) (nil nil nil (EQUAL + +) nil nil nil) (nil (0 26 26) nil (MV-NTH +) nil nil nil) ((ST TAPE POS TM W NNIL N) (0) nil (MV-LIST +) nil nil nil) ((ST TAPE POS TM W NNIL N) (4 15) nil (exit-clock) nil nil nil) ((ST TAPE POS TM W N RET-PC) nil (quote) nil nil nil nil) ((MAIN) nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::fast-psi-clock (nil nil nil (+) nil nil nil) (nil (2) nil nil nil nil nil) ((nil st tape pos tm w nnil n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/find-k!.lisp::find-k! (nil nil nil (LET*) nil nil nil) (nil nil nil nil nil nil ((MAP (RENAMING-MAP ST TM)))) ((ST-PRIME TAPE-PRIME POS-PRIME TM-PRIME W N) nil (ST-PRIME TAPE-PRIME POS-PRIME W TM-PRIME NNIL) nil nil nil nil) ((W) nil (CDR) (MV-NTH MV-NTH MAX-WIDTH NCODE) nil nil nil) ((TM MAP W) (0 1) nil (ASSOC MV-LIST MV-LIST TM-TO-TM1) nil nil nil) ((ST MAP TM MAP) (2 2) (CONVERT-TAPE-TO-TAPEN-POS CONVERT-TAPE-TO-TAPEN-POS) nil nil nil nil) ((TAPE TAPE) nil nil nil nil nil nil)))