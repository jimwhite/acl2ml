((/defexec/dag-unification/basic.lisp::revlist (nil nil nil nil (if) nil nil) ((nil) nil (endp) (append) nil nil nil) ((l) nil (recursive-call list) nil nil nil nil) (nil nil (cdr car) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::delete-one (nil nil nil nil (cond) nil nil) (nil nil ((atom l) (equal x (car l)) t) nil nil nil nil) ((l) nil (cdr) (cons) nil nil nil) ((l) nil (car) (recursive-call) nil nil nil) ((l x) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::eliminate (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (equal x (car l)) t) nil nil nil nil) ((nil) nil nil (recursive-call cons) nil nil nil) ((x) nil (cdr car) (recursive-call) nil nil nil) ((l l x) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::positive-integer-true-listp (nil nil nil nil (if) nil nil) (nil nil (atom) (equal) (and) nil nil) ((l l nil) nil (integerp recursive-call) (>) nil nil nil) (nil (0) (car car cdr) nil nil nil nil) ((l l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::replace-list (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((l) nil (zp) (cons cons) nil nil nil) ((n x) nil (cdr car) nil (recursive-call) nil nil) ((l l x) nil (cdr) (-) nil nil nil) ((l n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::pair-args (nil nil nil nil (cond) nil nil) (nil nil ((endp l1) (endp l2) t) nil nil nil nil) (nil nil nil (mv) (if mv-let) nil nil) ((nil nil) nil (pair-rest) (equal mv mv recursive-call) (if) nil nil) ((l1 l2 nil t nil nil bool bool) nil (cdr cdr) (mv mv) nil nil nil) ((l1 l2 t nil nil) nil nil (cons) nil nil nil) ((pair-rest) nil nil (cons) nil nil nil)) (/defexec/dag-unification/basic.lisp::setp (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((l) nil (not recursive-call) nil nil nil nil) (nil nil (cdr) (member) nil nil nil) ((l) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::not-subsetp-witness (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((l1) nil (car) (member recursive-call) nil nil nil) ((l2 l2 l1) nil (car cdr) nil nil nil nil) ((l1 l1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::subset-induction (nil nil nil nil (if) nil nil) ((t) nil nil (recursive-call) (or) nil nil) (nil nil (atom atom not cdr) (eliminate) nil nil nil) ((l m l m) nil (car) (member) nil nil nil) ((m l) nil (car) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::disjointp (nil nil nil nil (if) nil nil) ((t) nil (endp) (and) nil nil nil) ((l1) nil (not) (recursive-call) nil nil nil) ((l2) nil (cdr) (member) nil nil nil) ((l2 l1) nil (car) nil nil nil nil) ((l1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::make-set (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((l) nil (recursive-call) (member cons) nil nil nil) (nil nil (car cdr cdr car recursive-call) nil nil nil nil) ((l l l l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::equal-set (nil nil nil (and) nil nil nil) (nil nil nil (subsetp subsetp) nil nil nil) ((x y y x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::perm (nil nil nil nil (cond) nil nil) (nil nil ((atom lst1) (member (car lst1) lst2) t) nil nil nil nil) ((nil) nil (atom) (recursive-call) nil nil nil) ((lst2) nil (cdr) (delete-one) nil nil nil) ((lst1 lst2) nil (car) nil nil nil nil) ((lst1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::prefix (nil nil nil nil nil (cond) nil) (nil nil ((endp p1) (endp p2) (equal (car p1) (car p2)) t) nil nil nil nil) ((t nil nil) nil nil (recursive-call) nil nil nil) (nil nil (cdr cdr) nil nil nil nil) ((p1 p2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::difference-pos (nil nil nil nil (if) nil nil) ((q) nil (atom) (recursive-call) nil nil nil) ((p) nil (cdr cdr) nil nil nil nil) ((p q) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::disjoint-positions (nil nil nil nil (cond) nil nil) (nil nil ((or (endp p1) (endp p2)) (equal (car p1) (car p2)) t) nil nil nil nil) ((nil t) nil nil (recursive-call) nil nil nil) (nil nil (cdr cdr) nil nil nil nil) ((p1 p2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::val (nil nil nil nil (if) nil nil) ((x) nil (endp) nil (if) nil nil) ((sigma) nil (cdar) (eql recursive-call) nil nil nil) ((x sigma x) nil (caar cdr) nil nil nil nil) ((sigma sigma) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::restriction (nil nil nil nil (if) nil nil) ((l) nil (atom) (cons) nil nil nil) ((l) nil nil (cons recursive-call) nil nil nil) ((sigma) nil (car cdr) (val) nil nil nil) ((l sigma l) nil (car) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::domain (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((sigma) nil (caar recursive-call) nil nil nil nil) ((sigma) nil (cdr) nil nil nil nil) ((sigma) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::co-domain (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((sigma) nil (cdar recursive-call) nil nil nil nil) ((sigma) nil (cdr) nil nil nil nil) ((sigma) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::inverse (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((sigma) nil (recursive-call) (cons) nil nil nil) (nil nil (cdar caar cdr) nil nil nil nil) ((sigma sigma sigma) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/basic.lisp::alistp-acl2-numberp (nil nil nil nil (if) nil nil) (nil nil (atom) (equal) (and) nil nil) ((l l nil) nil (consp acl2-numberp recursive-call) nil nil nil nil) (nil nil (car cdar cdr) nil nil nil nil) ((l l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))