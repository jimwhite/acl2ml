((/concurrent-programs/bakery/stutter2.lisp::rank-proc (nil nil nil nil (if) nil nil) (nil (1 0) nil (equal) nil nil nil) ((i) nil (loc) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/concurrent-programs/bakery/stutter2.lisp::rank-keys (nil nil nil nil (if) nil nil) (nil (0) (endp) (+) nil nil nil) ((keys) nil nil (rank-proc) (recursive-call) nil nil) ((i i procs) nil (rest) (<-) nil nil nil) ((procs keys) nil (first) nil nil nil nil) ((keys) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/concurrent-programs/bakery/stutter2.lisp::locs-for-not-queue (nil nil nil nil (list) nil nil) (nil (0 2 4) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/concurrent-programs/bakery/stutter2.lisp::sequence-measure (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((locs) nil nil nil (rank-keys recursive-call) nil nil) ((procs keys procs keys) nil (first rest) nil nil nil nil) ((locs locs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/concurrent-programs/bakery/stutter2.lisp::unfair-measure (nil nil nil (let) nil nil nil) (((p (<- procs in))) nil nil nil nil (case) nil) (nil nil (loc (0 1 2 3 4 5) (6 7 8 9) t) nil nil nil nil) ((p) nil nil nil (list list list) nil nil) (nil (0 5 5 7 0 5) (len) (- -) nil nil nil) (nil (12 12) (loc indices loc) nil nil nil nil) ((p p p) nil nil nil nil nil nil)) (/concurrent-programs/bakery/stutter2.lisp::rank-procs (nil nil nil (let*) nil nil nil) (nil nil ((current (current (<- procs (first queue))))) nil nil nil (append)) (nil nil (curr-p) (unfair-measure unfair-measure fair-measure) (sequence-measure if) nil nil) ((procs keys locs procs procs btm-measure env) nil (first current first) (<- or fair-measure) nil nil nil) ((procs current queue env current queue) nil nil (<- and) nil (and) nil) ((procs) nil (first choosing pos pos) (equal equal) nil (lex<) nil) ((queue curr-p curr-p current) (7 8) (loc pos pos first loc) (<-) nil nil nil)) (/concurrent-programs/bakery/stutter2.lisp::rank-b-c (nil nil nil (let*) nil nil nil) (nil nil nil nil nil ((procs (procs st))) (rank-procs)) ((procs keys queue env locs) nil (keys queue env locs) nil nil nil nil) ((locs-for-not-queue) nil (keys queue env) nil nil nil nil) ((st st) nil (procs) nil nil nil nil) ((st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))