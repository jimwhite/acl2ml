((/centaur/aig/bddify.lisp::count-bdd-branches (nil nil nil nil nil nil (cond)) (nil nil ((atom x) (hons-get x acc) (hqual (car x) (cdr x)) (<= n 0) t) nil nil nil nil) (nil nil nil (mv mv mv) (recursive-call mv-let) nil nil) ((n acc n acc n nil acc) nil (car n) nil (hut recursive-call if) nil nil) ((x x t acc acc n) nil (cdr 1-) (mv) (hut recursive-call) nil nil) ((x n x t acc n acc n acc) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::prune-by-count (nil nil nil nil (if) nil nil) (nil nil nil (<= mv let*) nil nil nil) ((cnt max-nodes b cnt) nil ((cnt (count-branches-to b max-nodes))) nil (if) nil nil) (nil nil (cnt) (and mv mv) nil nil nil) ((cnt b cnt default) (1) nil (and <=) nil nil nil) ((cnt cnt max-nodes) nil (1+) nil nil nil nil) ((cnt) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::and-bddify-x-weakening (nil nil nil (b*) nil nil nil) ((((mv hi lo a hc lc) (merge-hi-lo hi1 hi2 lo1 lo2 a1 a2 hc1 hc2 lc1 lc2))) nil nil nil (if) nil nil) (nil nil nil (or b*) nil nil (mv)) ((hi hi hi) (1 1) (((mv hi hc) (prune-by-count hi hc max-nodes t))) (and and) nil nil (mv)) ((hi lo a hc lc) nil ((mv lo lc)) (eq eq eq eq) nil nil nil) ((hi t lo t hi nil lo nil) nil nil nil nil (prune-by-count) nil) ((lo lc max-nodes nil) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::apqs-memo-lookup (nil nil nil (let) nil nil nil) (((m (hons-get x fmemo))) nil nil nil (if) nil nil) ((m) nil nil (b* let) nil nil nil) ((((list* bdd a count) (cdr m)) (m (hons-get x memo))) nil nil nil (if) nil nil) ((t bdd bdd a count count m) nil nil (b*) nil nil nil) ((((list* hi lo a hc lc) (cdr m)) nil nil nil nil nil nil) nil nil nil nil nil nil) ((t hi lo a hc lc) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::apqs-memo-cache (nil nil nil nil (if) nil nil) (nil nil nil (hqual mv mv) nil nil nil) ((hi lo memo fmemo) nil nil nil (hut hut) nil nil) ((x x memo) nil nil nil (list* if) nil (list*)) ((hi a hc fmemo hi lo a hc lc) nil nil (hons-get) (hut) nil nil) ((a fmemo a fmemo) nil nil nil (list*) nil nil) ((hi a hc) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-x-weakening (nil nil nil nil nil nil nil) ((x :true :false :var :inv :and) nil nil (b* b* b*) nil nil nil) ((t t t fmemo memo nil nil nil fmemo memo ((mv hi lo a hc lc fmemo memo) (aig-bddify-x-weakening (car x) al max-nodes fmemo memo)) ((mv ok hi lo a hc lc) (apqs-memo-lookup x fmemo memo))) (1 1 1 1) nil ((val (aig-env-lookup x al))) (if if) nil nil) ((count lc hc fmemo memo ok) nil (count count q-not q-not aig-not) (b*) (if) nil nil) ((t nil x fmemo memo lo hi a hi lo a hc lc fmemo memo ((mv hi1 lo1 a1 hc1 lc1 fmemo memo) (aig-bddify-x-weakening (car x) al max-nodes fmemo memo))) (1 1) (booleanp) (count-branches-to and) (if) nil nil) ((val max-nodes count val val val val count count fmemo memo val val x count count fmemo memo) nil (1+) (and b*) nil nil nil) ((count nil nil nil fmemo memo) (1 1) nil (eq eq ((mv hi2 lo2 a2 hc2 lc2 fmemo memo) (aig-bddify-x-weakening (cdr x) al max-nodes fmemo memo))) nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-list-x-weakening (nil nil nil nil (if) nil nil) (nil nil (atom) (b*) nil nil (mv)) ((lst nil nil fmemo memo t) nil (((mv hi lo a & & fmemo memo) (aig-bddify-x-weakening (car lst) al max-nodes fmemo memo))) nil nil nil (mv)) ((fmemo memo) nil ((mv rbdds ras fmemo memo exact)) (cons cons and) nil nil nil) ((hi rbdds a ras exact) nil nil (hqual) nil nil (recursive-call)) ((al max-nodes fmemo memo hi lo) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-var-weakening-cache-lookup (nil nil nil (let) nil nil nil) (((fmem (hons-get x fmemo))) nil nil nil (if) nil nil) ((fmem) nil nil (let) nil nil (mv)) ((t t (mem (hons-get x memo))) nil (cadr caddr cdddr) nil (if) nil nil) ((fmem fmem fmem mem) nil nil nil nil nil (mv mv)) ((t nil nil nil nil nil nil) nil (cadr caddr cdddr) nil nil nil nil) ((mem mem mem) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::and-bddify-var-weakening (nil nil nil (b*) nil nil nil) (nil nil nil ((bdd (q-and bdd1 bdd2))) nil nil nil) ((bdd aig count bdd-al nxtbdd exact) nil ((mv aig count exact) (mv bdd count bdd-al nxtbdd exact)) nil nil nil nil) (nil nil nil nil (if) (cond) nil) (nil nil ((eq bdd nil) (hqual bdd bdd1) (hqual bdd bdd2) t) (and let*) nil nil (mv)) ((count bdd count bdd-al nxtbdd exact) nil ((c (count-branches-to bdd max-count))) (<=) (mv mv mv mv if) nil nil) ((nil t aig1 count1 exact1 aig2 count2 exact2 count max-count) (1) (count) (aig-and and and let) (and) nil (mv))) (/centaur/aig/bddify.lisp::aig-bddify-var-weakening (nil nil nil nil (if) nil nil) (nil nil (booleanp) nil (if) nil nil) ((x x x fmemo memo bdd-al nxtbdd t) (1) (atom) nil (mv-let if) nil nil) ((x) nil nil (bdd eq b*) (aig-bddify-var-weakening-var mv-let) nil nil) ((aig count x al max-count bdd aig count fmemo memo bdd-al nxtbdd t nil ((mv bdd aig count fmemo memo bdd-al nxtbdd exact) (aig-bddify-var-weakening (car x) al max-count fmemo memo bdd-al nxtbdd))) nil (cdr) nil (aig-bddify-var-weakening-cache-lookup if) (cached) nil) ((x count fmemo memo bdd-al nxtbdd exact bdd aig count exact x fmemo memo cached) nil (q-not aig-not) (b*) nil nil nil) ((bdd aig bdd aig count fmemo memo bdd-al nxtbdd exact) nil nil (((mv bdd aig count fmemo memo bdd-al nxtbdd exact) (mv-let (bdd1 aig1 count1 fmemo memo bdd-al nxtbdd exact1) (aig-bddify-var-weakening (car x) al max-count fmemo memo bdd-al nxtbdd) (if (eq bdd1 nil) (mv nil nil 1 fmemo memo bdd-al nxtbdd t) (b* (((mv bdd2 aig2 count2 fmemo memo bdd-al nxtbdd exact2) (aig-bddify-var-weakening (cdr x) al max-count fmemo memo bdd-al nxtbdd)) ((mv bdd aig count bdd-al nxtbdd exact) (and-bddify-var-weakening bdd1 aig1 count1 exact1 bdd2 aig2 count2 exact2 max-count bdd-al nxtbdd))) (mv bdd aig count fmemo memo bdd-al nxtbdd exact)))))) nil nil nil)) (/centaur/aig/bddify.lisp::abs-recheck-exactness (nil nil nil nil nil nil nil) ((x :true :false :var :inv :and) nil nil (mv mv mv) (if) nil (recursive-call)) ((fmemo done fmemo done fmemo done fmemo memo done var-depth) nil (car) (hons-get mv let) nil nil nil) ((x x done fmemo done (done (hut x t done))) nil nil nil (if) nil nil) (nil nil nil (hons-get mv let*) nil nil nil) ((x fmemo fmemo done (mm (hons-get x memo))) nil nil nil (if) nil nil) (nil nil nil (and mv) (mv-let) nil nil)) (/centaur/aig/bddify.lisp::abs-recheck-exactness-top (nil nil nil (b*) nil nil nil) (nil nil nil (((mv fmemo done) (abs-recheck-exactness x fmemo memo (quote done) var-depth))) (mv) nil nil) ((fmemo) nil (- m consp) (and) nil nil nil) ((m) nil (flush-hons-get-hash-table-link consp cadr) (hons-get) nil nil nil) ((done x fmemo m m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-list-var-weakening (nil nil nil nil (if) nil nil) (nil nil (atom) (b*) (progn$) nil nil) ((lst) nil (flush-hons-get-hash-table-link flush-hons-get-hash-table-link) nil ((x (car lst))) (mv mv) nil) ((memo bdd-al nil nil fmemo t fmemo) nil ((mv & aig1 & fmemo memo bdd-al1 nxtbdd1 &) (mv fmemo exact1 bdd1) (mv rbdds ras fmemo exact)) (cons cons and) nil nil nil) ((bdd1 rbdds aig1 ras exact1 exact) nil nil nil nil (abs-recheck-exactness-top) nil) ((x al max-nodes fmemo memo bdd-al nxtbdd x fmemo memo var-depth al max-nodes fmemo memo bdd-al1 nxtbdd1 var-depth) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::posfix (nil nil nil nil (if) nil nil) ((x) (1) nil (and) nil nil nil) (nil nil (integerp) (<) nil nil nil) ((x x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-list-iter1 (nil nil nil nil (if) nil nil) (nil nil (atom) (prog2$ b*) nil nil nil) ((tries) nil (flush-hons-get-hash-table-link) nil (mv) nil nil) ((fmemo nil x nil x al fmemo nxtbdd var-depth maybe-wash-args) nil (threshold - - (mv bdds x fmemo exact) - (when (or exact (atom (cdr tries)))) cdr) nil nil nil nil) ((tries) nil (posfix) (and and and prog2$) (cond) nil nil) ((threshold start-msg maybe-wash-args end-msg) nil ((eq type (quote xes)) (eq type (quote vars)) t flush-hons-get-hash-table-link) (cw cw) (if mv) nil nil) ((~@0 start-msg ~@0 end-msg fmemo bdds x exact) nil (consp) (maybe-wash-memory maybe-wash-memory b* prog2$) nil nil nil)) (/centaur/aig/bddify.lisp::bddify-extract-bool-alist (nil nil nil nil (if) nil nil) ((last) nil (atom) nil (if) nil nil) ((x) nil (atom) (let) (recursive-call) nil nil) ((full last (pair (hons-get (caar x) full))) nil (car cdr) nil (if) nil nil) ((x x) nil nil (and) (hons-acons! recursive-call) nil nil) ((pair full last) nil (booleanp caar cdr cdr) nil (recursive-call) nil nil) ((x pair full last x) nil (cdr cdr) nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-list (nil nil nil (let*) nil nil nil) (nil nil nil (prog2$) ((var-depth (al-max-depth al))) nil nil) (nil nil (bool-al x reduced-x fast-alist-free) nil nil nil nil) ((bool-al tries reduced-x al var-depth maybe-wash-args) nil (hons-copy quote qv) nil (bddify-extract-bool-alist if) nil nil) ((al al x x fmemo var-depth) nil (quote consp) (aig-restrict-list) nil nil nil) ((bddify-tmp-bool-alist bool-al x bool-al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::bddify-mk-old-style-tries (nil nil nil (cons) nil nil nil) (nil nil nil nil (if) (list) nil) ((start-thresh  done~% nil) nil (quote) (msg <= let) nil nil nil) ((xes Bddify with x-weakening, threshold ~x0 ... start-thresh (thresh (ceiling (* incr start-thresh) 1))) (1) (nfix) (append) nil nil nil) ((times) nil nil nil (if) (recursive-call) nil) ((nil incr vars-thresh) nil (list 1-) (<= ceiling) nil nil nil) ((vars-thresh thresh times) (1) nil (*) nil (list) nil)) (/centaur/aig/bddify.lisp::faig-list-to-aig-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((x (x1 (faig-fix (car x)))) nil nil nil (list*) nil nil) (nil nil (car cdr recursive-call) nil nil nil nil) ((x1 x1) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-list-to-faig-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (recursive-call) (cons) nil nil nil) (nil nil (car cadr cddr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::pat-to-aig-list (nil nil nil nil (if) nil nil) ((pat acc) nil nil nil (if) nil nil) (nil nil (atom) (cons) (recursive-call) nil nil) ((pat x acc) nil (car car) nil (recursive-call) nil nil) ((pat x acc) nil (cdr cdr) nil nil nil nil) ((pat x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-list-to-pat (nil nil nil nil (if) nil nil) ((pat) nil nil (mv) (if) nil nil) ((nil x) nil (atom) (mv) (mv-let) nil nil) ((pat) nil (car cdr car) (recursive-call) (mv-let) nil nil) ((x x rest x) nil (car cdr) (recursive-call mv) nil nil nil) ((pat rest rest rest) nil (cdr) (cons) nil nil nil) ((pat car cdr) nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::def-with-bddify-fn (nil nil nil (let*) nil nil nil) (nil nil (`) ((formals (fgetprop fn (quote formals) nil world))) nil nil nil) (nil nil (fn-symbol thm-symbol) (progn) nil nil nil) (nil nil nil (intern-in-package-of-symbol intern-in-package-of-symbol) nil (defun) nil) ((fn fn :hints (goal :in-theory (disable (, fn))) :rule-classes nil) nil (, declare ,) ((,@ formals) (, fn) equal) (concatenate concatenate) nil nil) ((-WITH-BDDIFY -IN-TERMS-OF-WITH-BDDIFY fn-symbol tries mwa , formals thm-symbol) nil (quote symbol-name quote symbol-name) (ignore (, fn)) ((, fn-symbol)) nil nil) ((string fn string fn tries mwa , formals *bddify-default-tries* nil) nil (,@) nil nil nil nil)) (/centaur/aig/bddify.lisp::faig-bddify-list (nil nil nil nil (mv-let) nil nil) (nil nil nil (bdds) (mv) (aig-bddify-list) nil) ((aigs exact tries al maybe-wash-args exact) nil (faig-list-to-aig-list aig-list-to-faig-list aig-list-to-faig-list) nil nil nil nil) ((x bdds aigs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-pat (nil nil nil (b*) nil nil nil) (nil nil nil (((mv bdds aigs exact) (aig-bddify-list tries (pat-to-aig-list pat x nil) al maybe-wash-args))) (mv) nil nil) ((bdds aigs exact) nil ((mv bdds &) (mv aigs &)) nil nil nil nil) (nil nil nil (aig-list-to-pat aig-list-to-pat) nil nil nil) ((pat bdds pat aigs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::faig-bddify-pat (nil nil nil (b*) nil nil nil) (nil nil nil (((mv bdds aigs exact) (faig-bddify-list tries (pat-to-aig-list pat x nil) al maybe-wash-args))) (mv) nil nil) ((bdds aigs exact) nil ((mv bdds &) (mv aigs &)) nil nil nil nil) (nil nil nil (aig-list-to-pat aig-list-to-pat) nil nil nil) ((pat bdds pat aigs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify-alist (nil nil nil (b*) nil nil nil) (nil nil (((mv bdds aigs exact) (aig-bddify-list tries (strip-pair-cdrs x) al maybe-wash-args))) nil (mv) nil nil) ((exact) nil (cars) (pairlis$ pairlis$) nil nil nil) ((cars bdds cars aigs) nil (strip-pair-cars) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::faig-bddify-alist (nil nil nil (b*) nil nil nil) (nil nil (((mv bdds aigs exact) (faig-bddify-list tries (strip-pair-cdrs x) al maybe-wash-args))) nil (mv) nil nil) ((exact) nil (cars) (pairlis$ pairlis$) nil nil nil) ((cars bdds cars aigs) nil (strip-pair-cars) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/bddify.lisp::aig-bddify (nil nil nil (b*) nil nil nil) ((((mv bdds aigs exact) (aig-bddify-list tries (list x) al maybe-wash-args))) nil nil nil (mv) nil nil) ((exact) nil (car car) nil nil nil nil) ((bdds aigs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))