((/centaur/aig/misc.lisp::faig-vars-pat (nil nil nil nil (if) nil nil) ((pat nil) nil nil nil (if) nil nil) (nil nil (atom) (cons) nil (list) nil) ((pat :signal pat) nil (aig-vars aig-vars) (recursive-call recursive-call) nil nil nil) (nil nil (car cdr car car cdr cdr) nil nil nil nil) ((aigs aigs pat aigs pat aigs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/misc.lisp::aig-extract-assigns (nil nil nil nil nil nil nil) ((x :true :false :var :inv :and) nil nil (mv mv mv) (if mv-let) nil nil) ((nil nil nil nil nil) nil (list trues1 recursive-call) (and mv mv) (mv-let) nil nil) ((x nil nil nil falses1) nil (atom not list car trues2 recursive-call) (mv) nil nil nil) ((x falses2) nil (car booleanp car cdr) (hons-alphorder-merge hons-alphorder-merge) nil nil nil) ((x x x trues1 trues2 falses1 falses2) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/centaur/aig/misc.lisp::assign-var-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((vars) nil nil (cons recursive-call) nil nil nil) ((val val) nil (car cdr) nil nil nil nil) ((vars vars) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/misc.lisp::aig-extract-assigns-alist (nil nil nil nil (mv-let) nil nil) (nil nil (trues aig-extract-assigns) (make-fal) nil nil nil) ((falses x) nil nil (assign-var-list make-fal) nil nil nil) ((trues t nil) nil nil (assign-var-list) nil nil nil) ((falses nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/misc.lisp::aig-extract-iterated-assigns-alist (nil nil nil (let*) nil nil nil) (nil nil ((al (aig-extract-assigns-alist x))) (prog2$) nil nil nil) (nil nil (newx clear-memoize-table) nil (if) nil nil) ((al) nil (quote) (aig-restrict or let*) nil nil nil) ((x al aig-restrict (more (aig-extract-iterated-assigns-alist newx (1- clk)))) nil (zp) (hons-equal make-fal) nil nil nil) ((newx x clk more) nil (flush-hons-get-hash-table-link) nil nil nil nil) ((al) nil nil nil nil nil nil)))