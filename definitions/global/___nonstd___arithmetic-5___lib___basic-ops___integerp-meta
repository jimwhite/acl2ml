((/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::intp-+ (nil nil nil (+) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::intp-* (nil nil nil (*) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::leaves (nil nil nil nil (cond) nil nil) (nil nil ((atom term) (eq (fn-symb term) bin-op) t) nil nil nil nil) (nil nil (list) nil (if if) nil nil) ((term) nil (list list) (eq eq cons list) nil nil nil) ((bin-op bin-op) nil (quote quote quote fn-symb arg1 arg1 arg2) (recursive-call) nil nil nil) ((BINARY-+ term bin-op term term) nil (quote quote arg2 arg2) nil nil nil nil) ((term term) (0 1) nil nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::tree (nil nil nil nil nil (cond) nil) (nil nil ((atom leaves) (atom (cdr leaves)) (atom (cddr leaves)) t) nil nil nil nil) (nil nil nil (list) (if list list) nil nil) ((bin-op bin-op) nil (quote quote quote car car cadr car) (eq recursive-call) nil nil nil) ((bin-op fix leaves leaves leaves leaves bin-op) nil (quote quote quote cdr) nil nil nil nil) ((BINARY-+ leaves) (0 1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::big-tree (nil nil nil nil nil (cond) nil) (nil nil ((atom bags) (atom (cdr bags)) (atom (cddr bags)) t) nil nil nil nil) (nil nil nil (tree) (if list list) nil nil) ((bin-op big-bin-op big-bin-op) nil (quote quote car) (eq tree tree tree) (recursive-call) nil nil) ((bin-op bags bin-op bin-op bin-op big-bin-op bin-op) nil (quote quote quote car cadr car cdr) nil nil nil nil) ((BINARY-+ bags bags bags bags) (0 1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::ts-fix (nil nil nil (let) nil nil nil) (((int-x (ifix x))) nil nil nil (if) nil nil) ((int-x) (0) nil (and) nil nil nil) (nil nil nil (<= <=) nil nil nil) ((*min-type-set* int-x int-x *max-type-set*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::bag-leaves (nil nil nil nil (if) nil nil) (nil nil (atom) (mv let) nil nil nil) ((leaves intp-bags non-intp-bags (leaf-type (ts-fix (mfc-ts (car leaves) mfc state)))) nil nil nil (cond) nil nil) (nil nil ((ts-subsetp leaf-type *ts-integer*) (and (ts-subsetp leaf-type *ts-acl2-number*) (ts-subsetp leaf-type (ts-complement *ts-integer*))) t) nil nil nil nil) (nil nil nil nil nil nil (recursive-call recursive-call recursive-call)) ((mfc state non-intp-bags mfc state intp-bags mfc state intp-bags non-intp-bags) nil (cdr cdr cdr) (cons cons) nil nil nil) ((leaves intp-bags leaves non-intp-bags leaves) nil (list list) nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::subtract-leaf (nil nil nil nil (cond) nil nil) (nil nil ((endp leaves) (equal leaf (car leaves)) t) nil nil nil nil) (nil nil nil (mv mv) (mv-let) nil nil) ((nil nil t) nil (cdr flag) (recursive-call) (if) nil nil) ((leaves new-leaves leaf flag) nil (cdr) (mv mv) nil nil nil) ((leaves t nil leaves) nil nil (cons) nil nil nil) ((new-leaves) nil (car) nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::subtract-bag (nil nil nil nil (cond) nil nil) (nil nil ((endp bag) (endp (cdr bag)) t) nil nil nil nil) (nil nil nil (mv subtract-leaf) (mv-let) nil nil) ((t leaves leaves) nil (car flag) (recursive-call) (if) nil nil) ((bag new-leaves leaves flag) nil (cdr) (subtract-leaf mv) nil nil nil) ((bag new-leaves nil nil) nil (car) nil nil nil nil) ((bag) nil nil nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::collect-bags-intp (nil nil nil nil (cond) nil nil) (nil nil ((endp leaves) (endp intp-bags) t) nil nil nil nil) (nil nil nil (mv mv) (mv-let) nil nil) ((t nil nil nil) nil (flag) (subtract-bag) (if) nil nil) ((new-leaves leaves flag) nil (car) (recursive-call) (mv-let) nil nil) ((intp-bags leaves) nil (flag cdr) (recursive-call) (if) nil nil) ((new-bags new-leaves flag intp-bags) nil (cdr) (mv recursive-call) nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::collect-bags-non-intp (nil nil nil (cond) nil nil nil) (nil nil ((endp non-intp-bags) t) nil nil nil nil) (nil nil nil (mv) (mv-let) nil nil) ((nil nil) nil (flag) (subtract-bag) (if) nil nil) ((new-leaves leaves) nil (car) (and) (mv-let recursive-call) nil nil) ((non-intp-bags flag leaves intp-bags) nil (consp flag cdr) (collect-bags-intp) (if) nil nil) ((new-leaves bag-list new-leaves intp-bags flag non-intp-bags) nil nil (mv) (recursive-call) nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::collect-bags (nil nil nil nil (mv-let) nil nil) (nil nil (flag) nil (if if) nil nil) ((bag-list flag) nil nil (eq mv mv collect-bags-intp) (collect-bags-non-intp) nil nil) ((bin-op leaves intp-bags non-intp-bags nil nil flag bag-list leaves intp-bags) nil (quote) nil nil nil nil) ((BINARY-+) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::meta-integerp (nil nil nil nil (if) nil nil) ((term) nil nil (eq let) nil nil nil) (((bin-op (fn-symb (fargn term 1)))) nil (fn-symb quote) nil (if) nil nil) ((term INTEGERP term) nil nil (and let) nil nil nil) (((leaves (leaves (fargn term 1) bin-op))) nil nil (member-eq eq) (mv-let) nil nil) ((bin-op bin-op) nil (quote fn-symb intp-leaves) nil (mv-let) nil nil) ((non-intp-leaves leaves mfc state nil nil t) nil (BINARY-+ intp-bags) (fargn) (mv-let) nil (bag-terms))) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::meta-rationalp (nil nil nil nil (if) nil nil) ((term) nil nil (eq let) nil nil nil) (((bin-op (fn-symb (fargn term 1)))) nil (fn-symb quote) nil (if) nil nil) ((term RATIONALP term) nil nil (and let) nil nil nil) (((leaves (leaves (fargn term 1) bin-op))) nil nil (member-eq eq) (mv-let) nil nil) ((bin-op bin-op) nil (quote fn-symb intp-leaves) nil (mv-let) nil nil) ((non-intp-leaves leaves mfc state nil nil nil) nil (BINARY-+ intp-bags) (fargn) (mv-let) nil (bag-terms))) (/nonstd/arithmetic-5/lib/basic-ops/integerp-meta.lisp::meta-realp (nil nil nil nil (if) nil nil) ((term) nil nil (eq let) nil nil nil) (((bin-op (fn-symb (fargn term 1)))) nil (fn-symb quote) nil (if) nil nil) ((term REALP term) nil nil (and let) nil nil nil) (((leaves (leaves (fargn term 1) bin-op))) nil nil (member-eq eq) (mv-let) nil nil) ((bin-op bin-op) nil (quote fn-symb intp-leaves) nil (mv-let) nil nil) ((non-intp-leaves leaves mfc state nil nil nil) nil (BINARY-+ intp-bags) (fargn) (mv-let) nil (bag-terms))))