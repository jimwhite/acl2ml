((/defexec/find-path/run-fpst.lisp::myall-nodes (nil nil nil (cond) nil nil nil) (nil nil ((endp g) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (car recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((g g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::mygraph1p (nil nil nil (cond) nil nil nil) (nil nil ((endp g) t) nil nil nil nil) ((t) nil nil nil nil nil nil) (nil nil (consp true-listp no-duplicatesp) (numberlistp subsetp recursive-call) nil nil nil) ((maxnode nodes nodes) nil (car cdr car cdr cdr cdr) nil nil nil nil) ((g g g) nil (car car car) nil nil nil nil) ((g g g) nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::mygraphp (nil nil nil nil nil (and) nil) (nil nil (alistp eqlable-listp no-duplicatesp) (mygraph1p) nil nil nil) ((g g) nil (myall-nodes myall-nodes myall-nodes) nil nil nil nil) ((g g g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::myneighbors (nil nil nil nil (cond) nil nil) (nil nil ((endp g) (equal node (car (car g))) t) nil nil nil nil) ((nil) nil (cdr) (recursive-call) nil nil nil) ((node) nil (car cdr) nil nil nil nil) ((g g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::load-graph1 (nil nil nil nil (if) nil nil) ((st) nil nil (or let) nil nil nil) (((st (update-gi i (myneighbors i g) st))) nil (not not) nil (recursive-call) nil nil) ((g st) nil (integerp 1+) (<) nil nil nil) ((i i maxnode i) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::load-graph (nil nil nil nil (load-graph1) nil nil) ((g st) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::init-marks1 (nil nil nil nil (if) nil nil) ((st) nil nil (or let) nil nil nil) (((st (update-marksi i 0 st))) nil (not not) (recursive-call) nil nil nil) ((st) nil (integerp 1+) (<) nil nil nil) ((i i maxnode i) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::init-marks (nil nil nil (init-marks1) nil nil nil) ((st) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::load-st (nil nil nil (let) nil nil nil) (((st (load-graph g st))) nil nil (let) nil nil nil) (((st (init-marks st))) nil nil (let) nil nil nil) (((st (update-status 1 st))) nil nil (let) nil nil nil) (((st (update-stack nil st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::linear-find-st (nil nil nil (let) nil nil nil) (((st (load-st g st))) nil nil (let) nil nil nil) (((st (linear-find-next-step-st-mbe (list a) b st))) nil nil nil (if) nil nil) (nil nil (not) (mv mv) nil nil nil) ((st st) nil (quote stack) (equal) nil nil nil) ((failure st) (0) (status) nil nil nil nil) ((st) nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::completeg-helper (nil nil (declare) nil nil nil nil) (nil nil nil (xargs) nil nil nil) ((:measure) nil (nfix) nil nil nil nil) (nil nil nil (-) nil nil nil) (nil nil (1+ nfix) nil nil nil nil) ((curr) nil (nfix) nil nil nil nil) ((last) nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::listofnats (nil nil nil nil (if) nil nil) ((nil) nil nil (<= cons) nil nil nil) ((curr) nil (nfix nfix) (recursive-call) nil nil nil) ((curr last last) nil (1+) nil nil nil nil) (nil nil (nfix) nil nil nil nil) ((curr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::completeg (nil nil nil nil (completeg-helper) nil nil) (nil (0) (1-) (listofnats) nil nil nil) (nil (0) (nfix 1-) nil nil nil nil) ((size) nil (nfix) nil nil nil nil) ((size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/run-fpst.lisp::badg (nil nil nil (cons) nil nil nil) (nil nil (list completeg) nil nil nil nil) ((size size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))