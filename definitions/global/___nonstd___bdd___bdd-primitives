((/nonstd/bdd/bdd-primitives.lisp::firstn (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (zp n) t) nil nil nil nil) ((nil nil) nil nil (cons) nil nil nil) (nil nil (car) (recursive-call) nil nil nil) ((l) nil (1- cdr) nil nil nil nil) ((n l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::restn (nil nil nil nil (if) nil nil) ((l) nil (endp) nil (if) nil nil) ((l l) nil (zp) (recursive-call) nil nil nil) ((n) nil (1- cdr) nil nil nil nil) ((n l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::tree-size (nil nil nil nil (if) nil nil) (nil (1) (atom) (+) nil nil nil) ((tree) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::tfirstn (nil nil nil (firstn) nil nil nil) ((list) nil (tree-size) nil nil nil nil) (nil nil (car) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::trestn (nil nil nil (restn) nil nil nil) ((list) nil (tree-size) nil nil nil nil) (nil nil (car) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::t-carry (nil nil nil (or) nil nil nil) ((gen) nil nil (and) nil nil nil) ((c prop) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-buf (nil nil nil nil (if) nil nil) ((x t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-not (nil nil (not) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-nand (nil nil (not) nil nil nil nil) (nil nil nil (and) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-nand3 (nil nil (not) nil nil nil nil) (nil nil nil nil (and) nil nil) ((a b c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-nand4 (nil nil (not) nil nil nil nil) (nil nil nil nil nil (and) nil) ((a b c d) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-xor (nil nil nil nil (if) nil nil) ((a) nil nil nil (if if) nil nil) ((b nil t b t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-xor3 (nil nil nil (b-xor) nil nil nil) ((c) nil nil (b-xor) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-equv (nil nil nil nil (if) nil nil) ((x) nil nil nil (if if) nil nil) ((y t nil y nil t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-equv3 (nil nil nil (b-equv) nil nil nil) ((a) nil nil (b-xor) nil nil nil) ((b c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-and (nil nil nil (and) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-and3 (nil nil nil nil (and) nil nil) ((a b c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-or (nil nil nil (or) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-or3 (nil nil nil nil (or) nil nil) ((a b c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-nor (nil nil (not) nil nil nil nil) (nil nil nil (or) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-nor3 (nil nil (not) nil nil nil nil) (nil nil nil nil (or) nil nil) ((a b c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::b-if (nil nil nil nil (if) nil nil) ((c) nil nil nil (if if) nil nil) ((a t nil b t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-if (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (cons) nil nil nil) ((a) nil nil nil (if recursive-call) nil nil) ((t nil c) nil (cdr cdr) nil (if) nil nil) ((c a b) nil (car car) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-buf (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (cons) nil nil nil) ((x) nil (b-buf recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::boolfix (nil nil nil nil (if) nil nil) ((x t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-nzerop (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (or) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-zerop (nil nil (not) nil nil nil nil) (nil nil (v-nzerop) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::make-nils (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n nil) nil (recursive-call) nil nil nil nil) (nil nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-not (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (cons) nil nil nil) ((x) nil (b-not recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-xor (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (cons) nil nil nil) ((x) nil nil (b-xor recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-or (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (cons) nil nil nil) ((x) nil nil (b-or recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-and (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (cons) nil nil nil) ((x) nil nil (b-and recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-equal (nil nil nil nil (if) nil nil) (nil nil (nlistp) (and) (and) nil nil) ((x) nil (consp) (equal equal equal recursive-call) nil nil nil) ((x nil y nil y) nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::vcond-macro (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((clauses) nil nil (and) (if) (list) nil) (nil nil (cdr car car quote car recursive-call) (eq eq) (if) nil nil) ((t nil v-if) nil (car cdr car cdr car car cdr car car cdr) nil nil nil nil) ((clauses clauses clauses clauses clauses) nil (car car car cdr car) nil nil nil nil) ((clauses clauses clauses clauses) nil (car) nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::bv2p (nil nil nil nil (and) nil nil) (nil nil (bvp bvp) (equal) nil nil nil) ((a b) nil (len len) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-trunc (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n) nil (boolfix) (recursive-call) nil nil nil) (nil nil (car cdr 1-) nil nil nil nil) ((x x n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::v-shift-right (nil nil nil nil (if) nil nil) ((nil) nil (nlistp) (append) nil nil nil) ((a) nil (v-buf) (cons) nil nil nil) ((nil) nil (cdr boolfix) nil nil nil nil) ((a si) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/bdd-primitives.lisp::make-tree (nil nil nil nil (if) nil nil) (nil (0) (zp) nil (if) nil nil) ((n) (0) nil (= cons) nil nil nil) ((n) (1) (recursive-call recursive-call) nil nil nil nil) (nil nil nil (quotient -) nil nil nil) ((n n) (2) nil (quotient) nil nil nil) ((n) (2) nil nil nil nil nil)))