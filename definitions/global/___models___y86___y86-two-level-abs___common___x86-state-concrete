((/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::create-x86-32-stobj-renaming-fn-1 (nil nil nil (let) nil nil nil) (nil nil ((name (car x86-32-model-field))) (cond) nil nil nil) (nil nil (type (and (consp type) (equal (car type) (quote array))) t) nil nil nil nil) (nil nil (caddr `) (let) nil nil nil) ((x86-32-model-field (namei (mk-name name I))) nil (` (, (mk-name UPDATE- name))) nil nil nil nil) (nil nil ((, (mk-name UPDATE- namei)) ,) nil nil nil nil) (nil nil (,) (mk-name) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::create-x86-32-stobj-renaming-fn-2 (nil nil nil (let) nil nil nil) (((name (car x86-32-model-field))) nil nil (cond) nil nil nil) (nil nil ((member name (quote (MEM-TABLE MEM-ARRAY MEM-ARRAY-NEXT-ADDR))) t) nil nil nil nil) (nil nil (`) (let) nil nil nil) (((end (search $C (symbol-name name)))) nil ((, (mk-name name P)) `) nil nil nil nil) (nil nil (, (, (mk-name name P))) nil nil nil nil) (nil nil (,) (mk-name) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::create-x86-32-stobj-renaming-fn (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote `) nil nil nil nil) ((nil) nil nil ((, (create-x86-32-stobj-renaming-fn-1 (car x86-32-model)))) nil nil nil) (nil nil (, ,@) nil nil nil nil) (nil nil (create-x86-32-stobj-renaming-fn-2 recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::create-x86-32-stobj-1 (nil nil (`) nil nil nil nil) (nil nil nil nil nil nil nil) ((X86-32$C :INLINE T :RENAMING) nil (,@ (x86-32$cp x86-32$cp-pre)) nil nil nil nil) ((x86-32-model) nil (,@) nil nil nil nil) (nil nil (create-x86-32-stobj-renaming-fn) nil nil nil nil) ((x86-32-model) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-table-entriesp (nil nil nil (cond) nil nil nil) (nil nil ((mbt (and (natp i) (natp table-bound) (<= i table-bound))) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((addr (mem-tablei i x86-32$c))) nil nil (and) nil nil nil) (nil nil nil (or or) nil nil nil) (nil nil nil (eql eql) (and) (recursive-call) nil) ((addr i table-bound table-bound array-next-addr x86-32$c) (1) (natp 1+) (equal <) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-table-entriesp-logic (nil nil nil (cond) nil nil nil) (nil nil ((mbt (and (natp i) (natp table-bound) (<= i table-bound))) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((addr (nth i mem-table))) nil nil (and) nil nil nil) (nil nil nil (or or) nil nil nil) (nil nil nil (eql eql) (and) (recursive-call) nil) ((addr i table-bound table-bound array-next-addr mem-table) (1) (natp 1+) (equal <) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::merge-<-into-> (nil nil nil nil nil (cond) nil) (nil nil ((endp lst1) (endp lst2) (< (car lst1) (car lst2)) t) nil nil nil nil) (nil nil nil (revappend revappend) (recursive-call recursive-call) nil nil) ((lst2 acc lst1 acc lst2 lst1) nil (cdr cdr) (cons cons) nil nil nil) ((lst1 acc lst2 acc) nil (car car) nil nil nil nil) ((lst1 lst2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::merge->-into-< (nil nil nil nil nil (cond) nil) (nil nil ((endp lst1) (endp lst2) (> (car lst1) (car lst2)) t) nil nil nil nil) (nil nil nil (revappend revappend) (recursive-call recursive-call) nil nil) ((lst2 acc lst1 acc lst2 lst1) nil (cdr cdr) (cons cons) nil nil nil) ((lst1 acc lst2 acc) nil (car car) nil nil nil nil) ((lst1 lst2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-table-entriesp-weak (nil nil nil (cond) nil nil nil) (nil nil ((mbt (and (natp i) (natp table-bound) (<= i table-bound))) t) nil nil nil nil) ((nil) nil nil (and) nil nil nil) (nil nil (natp) (or) nil nil nil) (nil nil nil (mem-tablei eql) (recursive-call) nil nil) ((i x86-32$c i table-bound table-bound x86-32$c) nil (1+) nil nil nil nil) ((i) nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::no-duplicatesp-sorted (nil nil nil nil (cond) nil nil) (nil nil ((or (endp lst) (endp (cdr lst))) (eql (car lst) (cadr lst)) t) nil nil nil nil) ((t nil) nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-table-no-dupsp (nil nil (no-duplicatesp-sorted) nil nil nil nil) (nil nil nil nil nil (mem-table-entries) nil) ((lower upper x86-32$c t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-table-no-dupsp-logic (nil nil (no-duplicatesp-sorted) nil nil nil nil) (nil nil nil nil nil (mem-table-entries-logic) nil) ((lower upper mem-table t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::expected-mem-array-next-addr (nil nil nil (cond) nil nil nil) (nil nil ((or (not (natp i)) (not (natp table-len)) (>= i table-len)) t) nil nil nil nil) (nil (0) nil (let) nil nil nil) (((addr (mem-tablei i x86-32$c))) nil nil (cond) nil nil nil) (nil nil ((eql addr 1) t) nil nil nil nil) (nil nil nil (+) (recursive-call) nil nil) ((table-len x86-32$c *pseudo-page-size-in-bytes*) nil (1+) nil (recursive-call) nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-arrayp-1 (nil nil nil (cond) nil nil nil) (nil nil ((mbe :logic (not (and (natp index) (natp len) (< index len))) :exec (eql index len)) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (eql) (recursive-call) nil nil) ((len x86-32$c) (0) (1+) (mem-arrayi) nil nil nil) ((index x86-32$c index) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-arrayp-1-logic (nil nil nil (cond) nil nil nil) (nil nil ((not (and (natp index) (natp len) (< index len))) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (eql) (recursive-call) nil nil) ((len mem-array) (0) (1+) (nth) nil nil nil) ((index mem-array index) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-mem-arrayp (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (good-mem-arrayp-1-logic good-mem-arrayp-1) nil nil) ((x86-32$c) nil (mem-array-next-addr mem-array-length mem-array-next-addr mem-array-length) (nth-nx) nil nil nil) ((x86-32$c x86-32$c *mem-arrayi* x86-32$c x86-32$c x86-32$c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::good-memp (nil nil nil (let) nil nil nil) (nil nil nil ((table-bound (1- (mem-table-length x86-32$c)))) nil nil nil) (nil nil (array-length array-next-addr good-mem-arrayp) (<= <= eql equal <=) nil (mbe mbe) nil) ((array-next-addr array-length *initial-mem-array-length* array-length array-next-addr array-next-addr array-length :logic :exec :logic :exec x86-32$c) (0) (mem-array-length mem-array-next-addr) (logand) (expected-mem-array-next-addr good-mem-table-no-dupsp-logic good-mem-table-no-dupsp) (good-mem-table-entriesp-logic good-mem-table-entriesp) nil) ((x86-32$c x86-32$c array-length x86-32$c table-bound array-next-addr table-bound array-next-addr x86-32$c table-bound table-bound x86-32$c) (16777215 0 0 0 0 0) (mem-table-length) (nth-nx nth-nx) nil nil nil) ((x86-32$c *mem-tablei* x86-32$c *mem-tablei* x86-32$c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::x86-32$cp (nil nil nil (and) nil nil nil) (nil nil (x86-32$cp-pre good-memp) nil nil nil nil) ((x86-32$c x86-32$c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::x86-32-concrete-stobj-array-thms-1 (nil nil nil (let*) nil nil nil) (nil nil nil ((name (car x86-32-model-field)) cond) nil nil nil) (nil nil (type size (equal (car (cadr type)) (quote unsigned-byte)) t) nil nil nil nil) (nil nil (caddr cadr) (let* let*) nil nil nil) ((x86-32-model-field) nil (cadr (end (search $C (symbol-name name))) ` (end (search $C (symbol-name name))) `) nil nil nil nil) ((type) nil (predicate (DEFTHM (, (mk-name predicate -FORWARD)) (IMPLIES ((, predicate) X) (NAT-LISTP X)) :RULE-CLASSES :FORWARD-CHAINING) predicate (DEFTHM (, (mk-name predicate -FORWARD)) (IMPLIES ((, predicate) X) (INTEGER-LISTP X)) :RULE-CLASSES :FORWARD-CHAINING)) nil nil nil nil) (nil nil nil (mk-name mk-name) nil (DEFTHM DEFTHM) nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::x86-32-concrete-stobj-array-thms (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote) nil (if) nil nil) ((nil) nil (recursive-call) (and append) nil nil nil) (nil nil (consp x86-32-concrete-stobj-array-thms-1 recursive-call cdr) (equal) nil nil nil) ((x86-32-model) nil (caddr caaddr quote car cdr) nil nil nil nil) ((array x86-32-model x86-32-model) nil (car car) nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state-concrete.lisp::disable-stobj-fns-fn-1 (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote) (let) nil nil nil) ((nil) nil ((name (car (car x86-32-model)))) (cond) nil nil nil) (nil nil (type (and (consp type) (equal (car type) (quote array))) t) nil nil nil nil) (nil nil (caddr) (let* let) nil nil nil) (nil nil (car) (append (getter name) append) ((namei (mk-name name I))) nil nil)))