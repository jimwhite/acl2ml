(nil (/centaur/gl/bfr.lisp::bfr-bdd ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-p (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (or) nil (bfr-case) nil) ((:bdd :aig t) nil (acl2::ubddp booleanp) nil nil (bfr-case) nil) ((x x :bdd :aig t) nil (acl2::ubddp) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-fix (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig x x) nil (acl2::ubdd-fix booleanp) nil nil (bfr-case) nil) ((x x :bdd :aig x) nil (acl2::ubdd-fix) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-equiv (nil nil nil (equal) nil nil nil) (nil nil (bfr-fix bfr-fix) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-fix-bindings (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((vars) nil (` recursive-call) nil nil nil nil) (nil nil ((, (car vars)) cdr) nil nil nil nil) ((vars) nil (bfrfix) nil nil nil nil) (nil nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-eval (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig x) nil (booleanp) (acl2::eval-bdd acl2::aig-eval) nil (bfr-case) nil) ((x env x env x :bdd :aig) nil nil (acl2::eval-bdd acl2::aig-eval) nil nil nil) ((x env x env) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-not (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig) nil (acl2::q-not acl2::aig-not booleanp not) nil nil (bfr-case) nil) ((x x :bdd :aig) nil (bfrfix bfrfix acl2::q-not acl2::aig-not) nil nil nil nil) ((x x) nil (bfrfix bfrfix) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-binary-and (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig) nil nil (acl2::q-binary-and acl2::aig-and and and) nil (bfr-case) nil) ((x y :bdd :aig) nil (bfrfix bfrfix bfrfix bfrfix booleanp booleanp) (acl2::q-binary-and acl2::aig-and) nil nil nil) ((x y x y x y) nil (bfrfix bfrfix bfrfix bfrfix) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-and-macro-logic-part (nil nil nil nil (cond) nil nil) (nil nil ((atom args) (atom (cdr args)) t) nil nil nil nil) ((t) nil (car `) nil nil nil nil) ((args) nil nil (bfr-binary-and) nil nil nil) (nil nil (, ,) nil nil nil nil) (nil nil (car recursive-call) nil nil nil nil) ((args) nil (cdr) nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-and-macro-exec-part (nil nil nil nil (cond) nil nil) (nil nil ((atom args) (atom (cdr args)) t) nil nil nil nil) ((t) nil (car `) nil nil nil nil) ((args) nil nil (let) nil nil nil) (((bfr-and-x-do-not-use-elsewhere (, (car args)))) nil nil (and) nil nil nil) ((bfr-and-x-do-not-use-elsewhere) nil nil (bfr-binary-and) nil nil nil) ((bfr-and-x-do-not-use-elsewhere) nil nil (check-vars-not-free) nil nil nil)) (/centaur/gl/bfr.lisp::bfr-ite-fn (nil nil nil (bfr-fix-vars) nil nil nil) (nil nil nil (x) nil (mbe) nil) ((y z :logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig) nil nil nil (acl2::q-ite cond and if) (bfr-case) nil) ((x y z x y z :bdd :aig) nil ((eq x t) (eq x nil) t booleanp booleanp booleanp) nil (acl2::q-ite cond) nil nil) ((y z x y z x y z) nil ((eq x t) (eq x nil) t) nil (acl2::aig-ite) nil nil) ((x y z y z) nil nil nil (acl2::aig-ite) nil nil)) (/centaur/gl/bfr.lisp::bfr-binary-or (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig) nil nil (acl2::q-or acl2::aig-or and or) nil (bfr-case) nil) ((x y :bdd :aig) nil (bfrfix bfrfix bfrfix bfrfix booleanp booleanp) (acl2::q-or acl2::aig-or) nil nil nil) ((x y x y x y) nil (bfrfix bfrfix bfrfix bfrfix) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-or-macro-logic-part (nil nil nil nil (cond) nil nil) (nil nil ((atom args) (atom (cdr args)) t) nil nil nil nil) ((nil) nil (car `) nil nil nil nil) ((args) nil nil (bfr-binary-or) nil nil nil) (nil nil (, ,) nil nil nil nil) (nil nil (car recursive-call) nil nil nil nil) ((args) nil (cdr) nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-or-macro-exec-part (nil nil nil nil (cond) nil nil) (nil nil ((atom args) (atom (cdr args)) t) nil nil nil nil) ((nil) nil (car `) nil nil nil nil) ((args) nil nil (let) nil nil nil) (((bfr-or-x-do-not-use-elsewhere (, (car args)))) nil nil nil (if) nil nil) ((t) nil nil (eq bfr-binary-or) nil nil nil) ((t bfr-or-x-do-not-use-elsewhere bfr-or-x-do-not-use-elsewhere) nil nil (check-vars-not-free) nil nil nil)) (/centaur/gl/bfr.lisp::bfr-xor (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig) nil nil (acl2::q-xor acl2::aig-xor and xor) nil (bfr-case) nil) ((x y :bdd :aig) nil (bfrfix bfrfix bfrfix bfrfix booleanp booleanp) (acl2::q-xor acl2::aig-xor) nil nil nil) ((x y x y x y) nil (bfrfix bfrfix bfrfix bfrfix) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-iff (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (bfr-case) nil) ((:bdd :aig) nil nil (acl2::q-iff acl2::aig-iff and iff) nil (bfr-case) nil) ((x y :bdd :aig) nil (bfrfix bfrfix bfrfix bfrfix booleanp booleanp) (acl2::q-iff acl2::aig-iff) nil nil nil) ((x y x y x y) nil (bfrfix bfrfix bfrfix bfrfix) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-var (nil nil nil (let) nil nil nil) (((n (lnfix n))) nil nil nil nil (bfr-case) nil) ((:bdd :aig n) nil (acl2::qv) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-lookup (nil nil nil (let) nil nil nil) (((n (lnfix n))) nil nil nil nil (bfr-case) nil) ((:bdd :aig) nil nil (and let) nil nil nil) ((t (look (hons-get n env))) nil nil (acl2::with-guard-checking) (if) nil nil) ((nil look t) nil (ec-call) (and) nil nil nil) ((t) nil (cdr) (nth) nil nil nil) ((n env look) nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-set-var (nil nil nil (let) nil nil nil) (((n (lnfix n))) nil nil nil nil (bfr-case) nil) ((:bdd :aig) nil nil (acl2::with-guard-checking) (hons-acons) nil nil) ((nil n env) nil (ec-call) (and) nil nil nil) ((val t) nil nil nil (update-nth) nil nil) ((n env) nil nil (and) nil nil nil) ((val t) nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-termp (nil nil nil (or) nil nil nil) (nil nil nil (member-equal acl2::match-term-pattern) nil nil nil) ((x bfr-terms x pats) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::bfr-eval-vals (nil nil nil (let) nil nil nil) (((collect (collect-bfr-eval-vals-list clause patterns))) nil nil (or) nil nil nil) ((collect) nil (quote) nil nil nil nil) ((arbitrary-vals) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::instantiate-bfr-evals (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((vals) nil (`) nil (recursive-call) nil nil) ((a b) nil (not cdr) nil nil nil nil) ((vals) nil nil (equal) nil nil nil) (nil nil nil (bfr-eval bfr-eval) nil nil nil) (nil nil (, , , ,) nil nil nil nil)) (/centaur/gl/bfr.lisp::instantiate-equals-with-bfr-evals (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((clause) nil ((rst-clause (instantiate-equals-with-bfr-evals (cdr clause) vals bfr-terms patterns))) nil (mv-let) nil nil) (nil nil (lit a) nil (if) (case-match) nil) ((b lit) nil (car ((quote not) ((quote equal) a b)) a &) (and cons cons) nil nil nil) ((clause rst-clause lit rst-clause) nil (disjoin) (mv mv mv) (bfr-termp bfr-termp) nil nil) ((a b a nil nil a bfr-terms patterns b bfr-terms patterns) nil (quote) nil (instantiate-bfr-evals) nil nil)) (/centaur/gl/bfr.lisp::bfr-eval-cp (nil nil nil (let*) nil nil nil) (nil nil (list) nil nil ((bfr-terms (car hints))) nil) ((clause) nil (patterns eval-patterns vals clause) nil nil nil nil) (nil nil (cadr caddr) (bfr-eval-vals) nil (instantiate-equals-with-bfr-evals) nil) ((hints hints clause eval-patterns clause vals bfr-terms patterns) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr.lisp::prove-congruences-fn (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((equivs) nil (car) (let) nil (recursive-call) nil) ((equivs fncall world) nil ((fix (caadr (body (car equivs) nil world))) 1+ cdr) (cons) nil nil nil) ((n equivs) nil (theory `) nil nil (recursive-call) nil) ((fncall world) nil (cdr 1+ cdr) nil nil nil nil) ((equal :fix :theory n equivs) nil (, , , , quote) (assoc) nil nil nil)))