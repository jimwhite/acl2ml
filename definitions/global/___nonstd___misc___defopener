((/nonstd/misc/defopener.lisp::splitter1-p (nil nil nil nil nil (cond) nil) (nil nil ((null hyps-list) (member-term lit (car hyps-list)) (member-complement-term lit (car hyps-list)) t) nil nil nil nil) ((found-negation nil) nil nil nil (recursive-call recursive-call) nil nil) ((lit found-negation lit t) nil (cdr cdr) nil nil nil nil) ((hyps-list hyps-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::splitter (nil nil nil nil (cond) nil nil) (nil nil ((endp hyps) (splitter1-p (car hyps) hyps-list nil) t) nil nil nil nil) ((nil) nil (car) (recursive-call) nil nil nil) ((hyps hyps-list) nil (cdr) nil nil nil nil) ((hyps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::concl-as-equiv-and-lhs-1 (nil nil nil (cond) nil nil nil) (nil nil ((endp concls) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((term (car concls))) nil nil nil nil (case-match) nil) ((term) nil ((!equiv !lhs &) ((quote not) !lhs) &) nil nil nil nil) (nil nil nil nil (recursive-call recursive-call) (msg) nil) ((equiv lhs equiv lhs The last literal of each clause generated is expected to ~
                   be of the form (equiv lhs rhs) for the same equiv and lhs. ~
                   The equiv for the last literal of the first clause is ~x0 ~
                   and its lhs is ~x1; but the last literal of one clause ~
                   generated is:~|~%~x2 equiv lhs term) nil (cdr cdr) nil nil nil nil)) (/nonstd/misc/defopener.lisp::concl-as-equiv-and-lhs (nil nil nil (assert$) nil nil nil) ((concls) nil nil (let) nil nil nil) (((term (car concls))) nil nil nil nil (case-match) nil) ((term) nil ((!equiv lhs &) ((quote not) lhs) &) nil nil nil nil) (nil nil nil (let let mv) nil nil nil) (((msg (concl-as-equiv-and-lhs-1 equiv lhs (cdr concls))) (msg (concl-as-equiv-and-lhs-1 equiv lhs (cdr concls))) nil) nil nil (cond cond msg) nil nil nil) ((The last literal of each clause generated is expected ~
                        to be of the form (equiv lhs rhs), the but last ~
                        literal of the first clause generated is:~|~%~x0 term) nil (msg t msg t) nil nil nil nil)) (/nonstd/misc/defopener.lisp::remove-term (nil nil nil nil nil nil (cond)) (nil nil ((variablep lit) (fquotep lit) (member-equal lit cl) (or (eq (ffn-symb lit) (quote equal)) (eq (ffn-symb lit) (quote iff))) t) nil nil nil nil) (nil nil nil (remove1-eq remove1-equal remove1-equal let assert$) nil nil nil) ((lit cl lit cl lit cl (new-lit (fcons-term* (ffn-symb lit) (fargn lit 2) (fargn lit 1)))) nil nil (assert$ eq let) nil nil nil) (((atm (fargn lit 1))) nil (ffn-symb quote) (member-equal remove1-equal assert$) nil nil nil) ((new-lit cl new-lit cl lit not) nil nil (let*) (and) nil nil) (nil nil (nvariablep not (new-atm (fcons-term* (ffn-symb atm) (fargn atm 2) (fargn atm 1)))) (or assert$) nil nil nil)) (/nonstd/misc/defopener.lisp::split-cl-list (nil nil nil nil (cond) nil nil) (nil nil ((endp hyps-list) (member-term splitter (car hyps-list)) t) nil nil nil nil) (nil nil nil (assert$) nil (mv) nil) ((splitter neg-hyps-list neg-concls) nil (reverse reverse reverse reverse cdr cdr) (cons cons member-complement-term) nil nil nil) ((pos-hyps-list pos-concls neg-hyps-list neg-concls hyps-list concls pos-hyps-list pos-concls splitter splitter pos-hyps-list pos-concls) nil (car car cdr cdr) (remove-term cons cons) nil nil nil) ((splitter concls hyps-list hyps-list concls neg-hyps-list neg-concls) nil (car car) (remove-term) nil nil nil) ((hyps-list concls) nil (dumb-negate-lit car) nil nil nil nil)) (/nonstd/misc/defopener.lisp::index-of-shortest-rec (nil nil nil (cond) nil nil nil) (nil nil ((endp lst-lst) t) nil nil nil nil) ((ans) nil nil (let) nil nil nil) (((new-len (length (car lst-lst)))) nil nil nil (if) nil nil) (nil nil nil (<) nil (recursive-call recursive-call) nil) ((new-len len new-len i len ans) nil (cdr 1+ cdr 1+) nil nil nil nil) ((lst-lst i lst-lst i) nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::index-of-shortest (nil nil nil nil nil (index-of-shortest-rec) nil) (nil (0 1) (cdr length) nil nil nil nil) ((lst-lst) nil (car) nil nil nil nil) ((lst-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::member-equal-all (nil nil nil (cond) nil nil nil) (nil nil ((endp lst-lst) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (member-equal recursive-call) nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((lst-lst lst-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::intersection-equal-with-all (nil nil nil nil (cond) nil nil) (nil nil ((endp lst) (member-equal-all (car lst) lst-lst) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((lst-lst) nil (car cdr) (recursive-call) nil nil nil) ((lst lst-lst lst) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::all-set-difference-equal (nil nil nil (cond) nil nil nil) (nil nil ((endp lst-lst) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil nil (set-difference-equal recursive-call) nil nil nil) ((lst lst) nil (car cdr) nil nil nil nil) ((lst-lst lst-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::defopener-remove1-by-position (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((lst) nil (zp cdr) (cons) nil nil nil) ((index lst) nil (car) (recursive-call) nil nil nil) ((lst) nil (1- cdr) nil nil nil nil) ((index lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::split-clauses-to-term-rec (nil nil nil (let*) nil nil nil) (((splitter (splitter (car hyps-list) (cdr hyps-list)))) nil nil nil (cond) nil nil) (nil nil (splitter (null (cdr concls)) t) nil nil nil nil) (nil nil nil (mv mv) (mv-let) nil nil) ((nil t) nil nil (fargn let*) (pos-hyps-list mv-let) nil nil) ((pos-concls neg-hyps-list neg-concls splitter hyps-list concls nil nil nil nil) (2) (flg1 car) (recursive-call) (mv-let) (mv-let) nil) ((neg neg-hyps-list neg-concls concls) nil (flg2 hyps concl hyps-list concls common-hyps hyps-list hyps tbr flg declare) (recursive-call mv recursive-call) (if) nil nil)) (/nonstd/misc/defopener.lisp::split-clauses-to-flg-term-pair (nil nil nil nil (mv-let) nil nil) (nil nil (flg) (split-clauses-to-term-rec cons) nil nil nil) ((term hyps-list concls flg term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defopener.lisp::split-out-concls (nil nil nil (cond) nil nil nil) (nil nil ((endp cl-list) t) nil nil nil nil) (nil nil nil (mv) (recursive-call) nil nil) (nil nil (reverse reverse cdr) (cons cons) nil nil nil) ((hyps-list concls cl-list hyps-list concls) nil (car) (butlast) nil nil nil) (nil (1) (car last) nil nil nil nil) ((cl-list) nil (car) nil nil nil nil)) (/nonstd/misc/defopener.lisp::flatten-ifs-to-cond (nil nil nil nil nil (case-match) nil) ((term) nil (((quote if) tst ((quote if) x y z) fbr) ((quote if) tst tbr fbr) &) nil nil nil nil) ((term) nil (recursive-call `) nil nil nil nil) (nil nil (`) nil (if) nil nil) (nil nil (, , ,) nil (if) nil nil) ((tbr) nil (, , conjoin recursive-call) nil (if) nil nil) ((y fbr) nil (, , , flatten-ands-in-lit) (conjoin2) nil nil nil)) (/nonstd/misc/defopener.lisp::bash-sim-fn (nil nil nil (er-let*) nil nil nil) (((cl-list (with-ctx-summarized ctx (simplify-with-prover form hints ctx state)))) nil nil nil (mv-let) nil nil) (nil nil (hyps-list) nil (split-out-concls mv-let) nil nil) ((concls cl-list nil nil) nil (equiv) (concl-as-equiv-and-lhs cond) nil nil nil) ((lhs concls equiv) nil (equiv t) nil nil nil nil) (nil nil (value) nil nil (er) nil) ((soft ctx ~@0 lhs) nil nil (split-clauses-to-flg-term-pair) nil nil nil)) (/nonstd/misc/defopener.lisp::defopener-bodies (nil nil nil (let*) nil nil nil) (nil nil nil (er-let*) ((equiv (or equiv (quote equal)))) nil nil) (((flg-rhs0-pair (bash-sim-fn form hints equiv ctx state))) nil (form0 form wrld) (let*) nil nil nil) (nil nil (w value) nil (list if) ((flg (car flg-rhs0-pair))) nil) ((equiv call hyp form0 state) nil (` rhs0 rhs1 hidden-rhs rhs) (list) (if) nil nil) ((call hyp) nil (quote cdr ` `) (implies list) (if untranslate) nil nil) ((hide flg-rhs0-pair flatten rhs0 rhs1 nil wrld) nil (, , flatten-ifs-to-cond quote) nil (untranslate) ((implies (, hyp) ((, equiv) (, call) (, hidden-rhs))) ((, equiv) (, call) (, hidden-rhs))) nil)) (/nonstd/misc/defopener.lisp::defopener-hint-def (nil nil (`) nil nil nil nil) (nil nil nil nil nil (defun) nil) ((defopener-hint) nil (declare) (and) (id) nil nil) ((clause world stable-under-simplificationp stable-under-simplificationp) nil nil (ignore let) nil nil nil) ((id world (term (car (last clause)))) nil (,) nil nil nil nil) (nil nil nil (cond) nil nil nil) (nil nil (flatten-failed-flg t) nil nil nil nil)))