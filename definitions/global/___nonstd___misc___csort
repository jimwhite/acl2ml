((/nonstd/misc/csort.lisp::firstn (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (zp n) t) nil nil nil nil) ((nil nil) nil nil (cons) nil nil nil) (nil nil (car) (recursive-call) nil nil nil) ((l) nil (1- cdr) nil nil nil nil) ((n l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::repeat (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) ((x) nil nil (recursive-call) nil nil nil) ((x) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::evnp (nil nil nil nil (cond) nil nil) (nil nil ((zp n) (zp (1- n)) t) nil nil nil nil) ((t nil) nil (recursive-call) nil nil nil nil) (nil nil (1-) nil nil nil nil) (nil nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::rev (nil nil nil (cond) nil nil nil) (nil nil ((endp x) t) nil nil nil nil) ((nil) nil nil (append) nil nil nil) (nil nil (recursive-call list) nil nil nil nil) (nil nil (cdr car) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::delete-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp lst) (equal x (car lst)) t) nil nil nil nil) ((nil) nil (cdr) (cons) nil nil nil) ((lst) nil (car) (recursive-call) nil nil nil) ((lst x) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::perm (nil nil nil nil (cond) nil nil) (nil nil ((endp lst1) (member-equal (car lst1) lst2) t) nil nil nil nil) ((nil) nil (endp) (recursive-call) nil nil nil) ((lst2) nil (cdr) (delete-equal) nil nil nil) ((lst1 lst2) nil (car) nil nil nil nil) ((lst1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::data (nil nil (cdr) nil nil nil nil) ((pair) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::ordered (nil nil nil nil nil (cond) nil) (nil nil ((endp lst) (endp (cdr lst)) (>= (data (car lst)) (data (cadr lst))) t) nil nil nil nil) ((t t nil) nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::all-gte (nil nil nil nil (cond) nil nil) (((and (>= (data pair) (data (car lst))) (all-gte pair (cdr lst)))) nil ((endp lst) t) nil nil nil nil) ((t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::all-all-gte (nil nil nil (cond) nil nil nil) (nil nil ((endp lst1) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (all-gte recursive-call) nil nil nil) ((lst2 lst2) nil (car cdr) nil nil nil nil) ((lst1 lst1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::max-pair (nil nil nil (cond) nil nil nil) (nil nil ((<= (data pair1) (data pair2)) t) nil nil nil nil) ((pair2 pair1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::min-pair (nil nil nil (cond) nil nil nil) (nil nil ((<= (data pair1) (data pair2)) t) nil nil nil nil) ((pair1 pair2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::cstep (nil nil nil nil (cond) nil nil) (nil nil ((endp acc) (endp (cdr acc)) t) nil nil nil nil) ((nil acc) nil nil (cons) nil nil nil) (nil nil nil (max-pair cons) nil nil nil) (nil nil (cadr car recursive-call) (min-pair) nil nil nil) ((acc acc) nil (cadr car cddr) nil nil nil nil) ((acc acc acc) nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::cfeed (nil nil nil (cond) nil nil nil) (nil nil ((endp lst) t) nil nil nil nil) ((acc) nil nil (recursive-call) nil nil nil) (nil nil (cdr cstep) nil nil nil nil) ((lst) nil nil (cons) nil nil nil) ((acc) nil (car) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::cdrain (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((acc) nil nil (cons) nil nil nil) (nil nil (car) (recursive-call) nil nil nil) ((acc) nil (1- cstep) nil nil nil nil) ((n) nil (cdr) nil nil nil nil) ((acc) nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::csort (nil nil nil (cdrain) nil nil nil) (nil nil (len) (cfeed) nil nil nil) ((lst lst nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::phi (nil nil nil nil (cond) nil nil) (nil nil ((endp acc) (endp (cdr acc)) t) nil nil nil nil) ((t t) nil nil (and) nil nil nil) (nil nil (recursive-call) (all-gte) nil nil nil) (nil nil (car cdr cddr) nil nil nil nil) ((acc acc acc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/csort.lisp::positive-infinity-hint (nil nil nil (cond) nil nil nil) (nil nil ((endp lst) t) nil nil nil nil) (nil nil nil (list) (recursive-call) nil nil) ((s acc) nil (cdr cstep) (cons) nil nil nil) ((lst) nil (car cdr) (append) nil nil nil) ((lst s acc) nil (list) nil nil nil nil) (nil nil (car) nil nil nil nil)))