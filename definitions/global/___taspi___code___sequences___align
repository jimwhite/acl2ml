((/taspi/code/sequences/align.lisp::valid-match-matrix-entry (nil nil nil nil (and) nil nil) (nil nil (consp) (equal let) nil nil nil) ((x) (4) (len) (and) ((score (car x))) nil nil) ((x) nil (left diag top rationalp) nil (or) nil nil) ((score left diag top) nil (cadr caddr cadddr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::valid-i/d-matrix-entry (nil nil nil nil (and) nil nil) (nil nil (consp) (equal let) nil nil nil) ((x) (4) (len) ((score (car x)) and) nil nil nil) ((x) nil (diag other rationalp) (or) nil nil nil) ((score diag other) nil (cadr caddr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::valid-matrix-entry (nil nil nil nil (and) nil nil) (nil nil (consp) (equal let) nil nil nil) ((x) (3) (len) ((match (car x))) (and) nil nil) ((x) nil (insert delete valid-match-matrix-entry valid-i/d-matrix-entry valid-i/d-matrix-entry) nil nil nil nil) ((match insert delete) nil (cadr caddr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::build-affine-first-row-help (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((raw2) nil nil nil (list) (recursive-call) nil) ((gap-open gap-extend) nil (cdr 1+) nil (list list list) nil nil) ((nil nil nil len raw2 len) (-1 -1 -1 -1) nil (+) nil nil nil) ((gap-open) nil nil (*) nil nil nil) ((gap-extend len) nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::build-affine-first-row-top (nil nil nil (cons) nil nil nil) (nil nil nil nil (list) (build-affine-first-row-help) nil) ((raw2 gap-open gap-extend) (1) nil nil (list list) (list) nil) ((nil nil nil gap-open nil gap-open nil) (0 -1 -1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::get-cost (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((char2) nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((char1 transmat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::build-affine-align-matrix-row-help (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((raw2 (top-entry (car prev-row))) nil nil (let*) nil nil nil) (nil nil nil (cons) nil nil nil) ((new-entry) nil (insert-from-match delete-from-delete delete-from-match match-from-match match-from-insert match-from-delete insert delete match new-entry) nil nil nil nil) ((char transMat gap-open gap-extend top-entry new-entry) nil (cdr cdr) (plus-neg1-inf plus-neg1-inf plus-neg1-inf plus-neg1-inf plus-neg1-inf plus-neg1-inf) (if if if list) nil nil) ((gap-extend match insert delete raw2 prev-row) nil (match-score delete-score match-score match-score insert-score delete-score) (+ plus-neg1-inf <-neg1-inf <-neg1-inf <-neg1-inf) (get-cost get-cost get-cost list list list list if if) nil nil)) (/taspi/code/sequences/align.lisp::build-affine-align-matrix-row-top (nil nil nil nil (if) nil nil) ((Error: Prev-row has to have something in it) nil (consp) (let*) nil nil nil) ((prev-row) nil nil (cons) ((first-above-entry (car prev-row))) nil nil) ((new-entry) nil (first-insert-score new-score new-entry) nil nil nil nil) ((char raw2 transMat gap-open gap-extend first-above-entry new-entry) nil (insert-score cdr) (plus-neg1-inf) (list) nil nil) ((first-above-entry first-insert-score gap-extend prev-row) nil nil nil (list list) (list) nil) ((t t t new-score nil t t nil) (-1 -1) nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::build-affine-align-matrix-rows (nil nil nil nil (if) nil nil) ((acc) nil (consp) (let) nil nil nil) ((raw1 (new-row (build-affine-align-matrix-row-top (car raw1) raw2 transMat gap-open gap-extend prev-row))) nil nil nil nil nil nil) ((raw2 transMat gap-open gap-extend new-row) nil (cdr) (cons) nil nil nil) ((raw1 new-row acc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::build-affine-align-matrix (nil nil nil (let) nil nil nil) (((first-row (build-affine-first-row-top raw2 gap-open gap-extend))) nil nil nil nil nil nil) ((raw1 raw2 transMat gap-open gap-extend first-row first-row) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::build-align-matrix (nil nil nil nil (if) nil nil) ((Error: Need good cost-stuff in build-align-matrix-helper) nil (consp) nil (if) nil nil) ((cost-stuff Error: Unknown gap penalty type) nil nil (equal let) nil nil nil) (nil nil (car quote) ((transMat (cadr cost-stuff))) nil nil (build-affine-align-matrix)) ((cost-stuff affine raw1 raw2 transMat gap-open gap-extend) nil (gap-open gap-extend) nil nil nil nil) (nil nil (caddr cadddr) nil nil nil nil) ((cost-stuff cost-stuff) nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::get-score-from-matrix (nil nil nil nil (if) nil nil) ((Error: Need a valid alignment matrix in get-score-from-matrix) nil (consp) nil (if) nil nil) ((align-mat Error: Need a good alignment matrix in get-score-from-matrix) nil (consp) (let*) nil nil nil) (nil nil (car) nil ((score-entry (car (last (car align-mat)))) if) nil nil) ((align-mat) nil (match insert delete) (<-neg1-inf) (if if) nil nil) ((match insert match delete insert delete) nil (match-score insert-score delete-score) (<-neg1-inf <-neg1-inf) nil nil nil) ((score-entry score-entry score-entry match delete insert delete) nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::get-pairwise-score (nil nil (get-score-from-matrix) nil nil nil nil) (nil nil nil nil (build-align-matrix) nil nil) ((seq1 seq2 cost-stuff) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::get-distances (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((sequences) nil nil nil (get-pairwise-score recursive-call) nil nil) ((seq cost-stuff seq cost-stuff) nil (cdar cdr) nil nil nil nil) ((sequences sequences) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/sequences/align.lisp::distance-matrix (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((sequences) nil nil (cons recursive-call) nil nil nil) ((cost-stuff) nil (caar cdr) nil (get-distances) nil nil) ((sequences sequences cost-stuff sequences) nil (cdar) nil nil nil nil) ((sequences) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))