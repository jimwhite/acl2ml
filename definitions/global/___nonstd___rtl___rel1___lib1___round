((/nonstd/rtl/rel1/lib1/round.lisp::fl (nil nil nil (floor) nil nil nil) ((x) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::cg (nil nil (-) nil nil nil nil) (nil nil (fl) nil nil nil nil) (nil nil (-) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::expo1 (nil nil nil nil (if) nil nil) (nil (0) (1-) nil (and) nil nil) (nil nil (rationalp recursive-call) (< <) nil nil nil) ((x x x) (0 1) nil (*) nil nil nil) ((x) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::expo2 (nil nil nil nil (if) nil nil) (nil (0) (1+) (and) nil nil nil) (nil nil (rationalp recursive-call) (>=) nil nil nil) ((x x) (2) nil (/) nil nil nil) ((x) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::expo (nil nil nil nil (cond) nil nil) (nil nil ((not (rationalp x)) (>= (abs x) 1) t) nil nil nil nil) (nil (0) (expo2 expo1) nil nil nil nil) (nil nil (abs abs) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::sgn (nil nil nil nil (if) nil nil) (nil (0) nil (=) (if) nil nil) ((x) (0 -1 1) nil (<) nil nil nil) ((x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::sig (nil nil nil nil (if) nil nil) (nil (0) (rationalp) nil (if) nil nil) ((x) nil (-) (< *) nil nil nil) ((x x) (0) nil (* expt) nil nil nil) ((x) (2) (-) (expt) nil nil nil) (nil (2) (- expo) nil nil nil nil) ((x) nil (expo) nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::exactp (nil nil (integerp) nil nil nil nil) (nil nil nil (*) nil nil nil) (nil nil (sig) (expt) nil nil nil) ((x) (2) (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::fp+ (nil nil nil (+) nil nil nil) ((x) nil nil (expt) nil nil nil) (nil (2) nil (-) nil nil nil) ((n) nil (1+) nil nil nil nil) (nil nil (expo) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::trunc (nil nil nil nil (*) nil nil) (nil nil (sgn fl) (expt) nil nil nil) ((x) (2) nil (* -) nil nil nil) ((n) nil (sig 1+) (expt) nil nil nil) ((x) (2) (1- expo) nil nil nil nil) ((n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::away (nil nil nil nil (*) nil nil) (nil nil (sgn cg) (expt) nil nil nil) ((x) (2) nil (* -) nil nil nil) ((n) nil (sig 1+) (expt) nil nil nil) ((x) (2) (1- expo) nil nil nil nil) ((n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::re (nil nil nil (-) nil nil nil) ((x) nil (fl) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::near (nil nil nil (let) nil nil nil) (nil nil ((z (fl (* (expt 2 (1- n)) (sig x))))) nil (if) nil nil) (nil nil (f) (< trunc) (if) nil nil) ((f 1/2 x n) nil (re) (> away) (if) nil nil) ((f 1/2 x n) nil (evenp) (* trunc away) nil nil nil) ((z x n x n) nil (sig) (expt) nil nil nil) ((x) (2) (1-) nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::near-witness (nil nil nil nil (if) nil nil) (nil nil nil (= / expt) nil nil nil) (nil (2 2) (expo expo expo) (+) nil nil nil) ((x y y) nil nil (near near) nil nil nil) ((x n y n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::sticky (nil nil nil nil (cond) nil nil) (nil nil ((= n 1) (exactp x (1- n)) t) nil nil nil nil) ((x) nil nil (* +) nil nil nil) (nil nil (sgn) (expt trunc *) nil nil nil) ((x x) (2) (expo 1- sgn) (expt) nil nil nil) ((x n x) (2) (1+) nil nil nil nil) (nil nil nil (-) nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::odd (nil nil nil (let) nil nil nil) (((z (fl (* (expt 2 (1- n)) (sig x))))) nil nil nil (if) nil nil) (nil nil (evenp) nil (* *) nil nil) ((z z) nil (sgn 1+ sgn) (expt expt) nil nil nil) ((x z x) (2 2) nil (- -) nil nil nil) ((n n) nil (1+ 1+) nil nil nil nil) (nil nil (expo expo) nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::kp (nil nil nil (+) nil nil nil) ((k) nil nil (-) nil nil nil) (nil nil (expo expo) nil nil nil nil) ((y) nil nil (+) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::inf (nil nil nil nil (if) nil nil) (nil nil nil (>= away trunc) nil nil nil) ((x x n x n) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::minf (nil nil nil nil (if) nil nil) (nil nil nil (>= trunc away) nil nil nil) ((x x n x n) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::ieee-mode-p (nil nil nil (member) nil nil nil) ((mode) nil (quote) nil nil nil nil) (nil nil nil nil (trunc) nil nil) ((inf minf near) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::rnd (nil nil nil nil nil nil (case)) ((mode) nil (trunc inf minf near) nil nil nil nil) (nil nil nil (trunc inf minf near) nil nil nil) ((x n x n x n x n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::flip (nil nil nil nil nil (case) nil) ((m) nil (inf minf t) nil nil nil nil) ((m) nil (quote quote) nil nil nil nil) ((minf inf) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/rtl/rel1/lib1/round.lisp::rnd-const (nil nil nil nil nil (case) nil) ((mode) nil (near inf otherwise) nil nil nil nil) (nil (0) (1-) (expt) nil nil nil) (nil (2) nil (- expt) nil nil nil) ((e n) (2) (1+) nil nil nil nil) (nil nil nil (-) nil nil nil) ((e n) nil nil nil nil nil nil)))