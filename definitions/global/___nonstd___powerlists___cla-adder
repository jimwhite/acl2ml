((/nonstd/powerlists/cla-adder.lisp::bit-list-p (nil nil nil nil (if) nil nil) (nil nil (powerlist-p bit-p) (and) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::bit-nil-list-p (nil nil nil nil (if) nil nil) (nil nil (powerlist-p bit-nil-p) (and) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::adder-fa (nil nil nil nil (if) nil nil) (nil nil (zp) (cons cons) nil nil nil) ((cin) nil nil nil (if if if if) nil nil) (nil (0 1 0 1 1 0 0 1) nil (equal or equal and) nil nil nil) (nil nil (zp zp zp zp zp zp zp zp) nil nil nil nil) ((x y x y x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::adder-rc (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (let) (adder-fa) nil nil) ((x (left (adder-rc (p-untie-l x) (p-untie-l y) cin)) x y cin) nil nil (let) nil nil nil) (((right (adder-rc (p-untie-r x) (p-untie-r y) (cdr left)))) nil nil (cons) nil nil nil) (nil nil (cdr) (p-tie) nil nil nil) ((right) nil (car car) nil nil nil nil) ((left right) nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::local-carry (nil nil nil nil (if) nil nil) ((nil) nil nil (equal) (if) nil nil) (nil (0 1) (zp zp zp) nil nil nil nil) ((x y x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::prop-carry (nil nil nil nil (if) nil nil) (nil nil (null) nil (if if) nil nil) ((cin local-carry local-carry) nil (null) nil (if if if) nil nil) ((local-carry) (0 1 0 1 0 1) (zp zp zp) nil nil nil nil) ((local-carry local-carry cin) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::local-carry-vector (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-tie local-carry) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::prop-carry-vector (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-tie prop-carry) nil nil nil) ((lcv cin lcv) nil nil (recursive-call recursive-call) nil nil nil) ((cin) nil (p-untie-l p-last p-untie-r) nil nil nil nil) ((lcv lcv) nil nil (recursive-call) nil nil nil) ((cin) nil (p-untie-l) nil nil nil nil) ((lcv) nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::pairwise-adder (nil nil nil nil (if) nil nil) (nil nil (powerlist-p car) (p-tie) nil nil nil) ((x) nil nil nil (recursive-call recursive-call adder-fa) nil nil) ((x y c) nil (p-untie-l p-untie-l p-untie-l p-untie-r p-untie-r p-untie-r) nil nil nil nil) ((x y c x y c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::adder-cla-slow (nil nil nil (let) nil nil nil) (((carry-vector (prop-carry-vector nil (p-shift cin (local-carry-vector x y))))) nil nil (cons) nil nil nil) (nil nil nil (prop-carry) (pairwise-adder) nil nil) ((x y carry-vector cin) nil nil (prop-carry) nil nil nil) (nil nil (p-last p-last) nil nil nil nil) ((carry-vector) nil nil (local-carry-vector) nil nil nil) ((x y) nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::adder-cla-slow-good (nil nil nil (let) nil nil nil) (((carry-vector (prop-carry-vector cin (local-carry-vector x y)))) nil nil (cons) nil nil nil) (nil nil (p-last) nil (pairwise-adder) nil nil) ((x y carry-vector) nil nil (p-shift) nil nil nil) ((cin carry-vector) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::cla-star (nil nil nil nil (if) nil nil) ((nil) nil (powerlist-p) (p-zip) nil nil nil) ((x) nil (recursive-call p-unzip-l) nil nil nil nil) ((x) nil (p-unzip-r) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::cla-add (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-zip prop-carry) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::carry-look-ahead (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) (let) nil nil nil) ((x (y (carry-look-ahead (cla-add (p-unzip-l x) (p-unzip-r x))))) nil nil (p-zip) nil nil nil) ((y) nil nil (cla-add) nil nil nil) (nil nil (cla-star p-unzip-l) nil nil nil nil) ((y x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/powerlists/cla-adder.lisp::adder-cla (nil nil nil (let) nil nil nil) (((carry-vector (carry-look-ahead (p-shift cin (local-carry-vector x y))))) nil nil (cons) nil nil nil) (nil nil nil (prop-carry) (pairwise-adder) nil nil) ((x y carry-vector cin) nil nil (prop-carry) nil nil nil) (nil nil (p-last p-last) nil nil nil nil) ((carry-vector) nil nil (local-carry-vector) nil nil nil) ((x y) nil nil nil nil nil nil)))