((/centaur/esim/esim-sexpr-correct.lisp::hons-assoc-equal-sexpr-pat-alist-translate-ind (nil nil nil nil (if) nil nil) ((op acc) nil nil nil (if) nil nil) (nil nil (atom) (list) (list) nil nil) ((op np acc) nil nil nil nil (recursive-call recursive-call recursive-call) nil) ((al acc al al) nil (cdr cdr car car car car) nil nil (sexpr-pat-alist-translate sexpr-pat-alist-translate) nil) ((op np op np al nil op np al acc) nil (cdr cdr cdr cdr) nil nil nil nil) ((op np op np) nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-correct.lisp::esim-occ-single (nil nil nil (b*) nil nil nil) (nil nil nil nil nil (4v-pat-alist-translate) nil) ((oop o oa nil) nil (i op iop oop inal stal oa) nil nil nil nil) (nil nil nil (gpl gpl gpl gpl) (esim-out) (4v-pat-alist-translate 4v-pat-alist-translate) nil) ((:i occ :op occ :i op :o op i iop sig-al nil st-al nil op inal stal) nil (occ-state mod-state) nil nil nil nil) ((occ op) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-correct.lisp::esim-sexpr-correct-occsp (nil nil nil (or) nil nil nil) (nil nil (atom) (and) nil nil nil) ((occs) nil (esim-sexpr-correct-modp recursive-call) nil nil nil nil) (nil nil (cdr) (gpl) nil nil nil) ((:op occs) nil (car) nil nil nil nil) ((occs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-correct.lisp::cdr-occs-ind (nil nil nil nil (if) nil nil) ((nil) nil nil (or recursive-call) nil nil nil) ((mod) nil (atom atom cdr) nil nil nil nil) ((occs occs) nil nil (gpl) nil nil nil) ((:occs mod) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-correct.lisp::esim-sexpr-correct-nst-occsp (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((occs) nil (esim-sexpr-correct-nst-modp recursive-call) nil nil nil nil) (nil nil (cdr) (gpl) nil nil nil) ((:op occs) nil (car) nil nil nil nil) ((occs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-correct.lisp::4v-to-sexpr (nil nil nil (hons) nil nil nil) ((x nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-correct.lisp::4v-to-sexpr-alist (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x) nil (atom recursive-call) (cons) nil nil nil) (nil nil (car cdr recursive-call) (cons) nil nil nil) ((x x) nil (caar 4v-to-sexpr cdr) nil nil nil nil) ((x x) nil (cdar) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-correct.lisp::esim (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (mv b*) nil nil nil) (nil nil nil (mv) (esim-nst esim-out (ins (4v-to-sexpr-alist in))) nil nil) ((mod in st mod in st (with-fast ins sts)) nil (sts (mv outs nsts)) (4v-sexpr-eval-alist 4v-sexpr-eval-alist) nil nil nil) ((outs nil nsts nil) nil (4v-to-sexpr-alist) nil (esim-sexpr) nil nil) ((st mod ins sts) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))