((/clause-processors/instantiate.lisp::make-subst-for-match (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((subst) nil nil (list recursive-call) nil nil nil) ((match) nil (caar cdr) (substitute-into-term) nil nil nil) ((subst match subst) nil (cadar) nil nil nil nil) ((subst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/instantiate.lisp::make-insts-for-matches (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((matches) nil (`) nil (recursive-call) nil nil) ((thm subst) nil (cdr) nil (:instance) nil nil) ((, matches) nil (,) (make-subst-for-match) nil nil nil) ((thm subst) nil (car) nil nil nil nil) ((matches) nil nil nil nil nil nil)) (/clause-processors/instantiate.lisp::translate-subst-for-instantiate (nil nil nil (b*) nil nil nil) (nil nil (value-cmp) nil (((when (atom subst)) (value-cmp nil))) nil nil) (nil nil ((cmp tterm) (cmp rest)) ((when (or (atom (car subst)) (atom (cdar subst)))) cons) nil nil nil) ((rest) nil nil (cw recursive-call recursive-call list) nil nil nil) ((skipping malformed substitution pair: ~x0~% state t t t state tterm) nil (car cdr cadar quote w default-state-vars cdr caar) nil nil nil nil) ((subst subst subst instantiate-thm-for-matching-terms state t subst subst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/instantiate.lisp::translate-restr-for-instantiate (nil nil nil (b*) nil nil nil) (nil nil (value-cmp) nil (((when (atom restr)) (value-cmp nil))) nil nil) (nil nil ((cmp tterm) (cmp rest)) ((when (atom (car restr))) cons) nil nil nil) ((rest) nil nil (cw recursive-call recursive-call cons) nil nil nil) ((skipping malformed restriction pair: ~x0~% state t t t state tterm) nil (car cdr cdar quote w default-state-vars cdr caar) nil nil nil nil) ((restr restr restr instantiate-thm-for-matching-terms state t restr restr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/instantiate.lisp::instantiate-thm-for-matching-terms-fn (nil nil nil (b*) nil nil nil) (nil nil (`) nil nil nil nil) (nil nil ((when ctx) (mv ctx restr) (when ctx) (mv ctx subst) (when ctx) matches (unless matches) :use) nil nil nil nil) ((nil) nil (,) (translate-restr-for-instantiate translate-subst-for-instantiate) (if if if find-matching-terms-list) nil nil) ((pattern nil restr state pattern nil subst state pattern nil pattern restr clause) nil nil nil (make-insts-for-matches) (er er er) nil) ((hard? ctx ~@0 pattern hard? ctx ~@0 pattern hard? ctx ~@0 pattern thm subst matches) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))