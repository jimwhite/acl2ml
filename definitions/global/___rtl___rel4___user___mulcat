((/rtl/rel4/user/mulcat.lisp::formal-+ (nil nil nil nil (if) nil nil) (nil nil nil (and +) (list) nil nil) ((x y x y) nil (acl2-numberp acl2-numberp quote) nil nil nil nil) ((x y +) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/user/mulcat.lisp::cat-size (nil nil nil nil (if) nil nil) (nil nil (endp cadr) (formal-+) nil nil nil) ((x) nil (cddr cadr recursive-call) nil nil nil nil) ((x x) nil (cddr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/user/mulcat.lisp::mulcat-induct (nil nil nil nil (if) nil nil) (nil (0) nil (recursive-call) nil (and) nil) (nil nil (integerp integerp 1- 1-) (> >) nil nil nil) ((n n n2 n2 n n2) (0 0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))