((/textbook/chap10/tree.lisp::flatten (nil nil nil (cond) nil nil nil) (nil nil ((atom x) t) nil nil nil nil) (nil nil (list) (append) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/tree.lisp::mc-flatten (nil nil nil (cond) nil nil nil) (nil nil ((atom x) t) nil nil nil nil) (nil nil nil (cons recursive-call) nil nil nil) ((x a) nil (car) (recursive-call) nil nil nil) ((x a) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/tree.lisp::gopher (nil nil nil nil (if) nil nil) ((x) nil (recursive-call) (or) nil nil nil) (nil nil (atom atom) (cons) nil nil nil) ((x) nil (car caar) (cons) nil nil nil) ((x x) nil (cdar cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/tree.lisp::samefringe (nil nil nil nil (if) nil nil) (nil nil nil (or equal and) nil nil nil) ((x y) nil (atom atom) (equal recursive-call) nil nil nil) ((x y) nil (car car cdr cdr) nil nil nil nil) (nil nil (gopher gopher gopher gopher) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))