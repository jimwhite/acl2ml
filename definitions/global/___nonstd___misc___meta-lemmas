((/nonstd/misc/meta-lemmas.lisp::formal-consp (nil nil nil nil nil (case-match) nil) ((term) nil (((quote QUOTE) x) &) (((quote CONS) x y)) nil nil nil) ((*t* *nil*) nil (` declare) nil nil nil nil) (nil nil (QUOTE) (ignore) nil nil nil) ((x y) nil (,) nil nil nil nil) (nil nil (consp) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/nonstd/misc/meta-lemmas.lisp::formal-true-listp (nil nil nil nil nil (case-match) nil) ((term) nil (((quote QUOTE) x) &) (((quote CONS) x y)) nil nil nil) ((*nil*) nil (` declare recursive-call) nil nil nil nil) ((y) nil (QUOTE ignore) nil nil nil nil) ((x) nil (,) nil nil nil nil) (nil nil (true-listp) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/nonstd/misc/meta-lemmas.lisp::formal-nth (nil nil nil nil (case-match) nil nil) ((lst) nil (((quote QUOTE) x) &) nil nil nil nil) (nil nil (`) (cond) nil nil nil) (nil nil (QUOTE (zp n) t) nil nil nil nil) (nil nil (,) (fargn recursive-call) nil nil nil) ((lst) (1) nil (nth - fargn) nil nil nil) ((n x n lst) (1 2) nil nil nil nil nil)) (/nonstd/misc/meta-lemmas.lisp::reduce-nth-meta (nil nil nil nil (case-match) nil nil) ((term) nil (((quote NTH) ((quote QUOTE) n) lst) &) nil nil nil nil) ((term) nil nil nil (if) nil nil) ((term) nil nil (formal-nth) (and) nil nil) ((n lst) nil (integerp) (<= equal) nil nil nil) ((n n *t*) (0) (formal-true-listp) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/nonstd/misc/meta-lemmas.lisp::formal-member (nil nil nil (cond) nil nil nil) (nil nil ((endp l) t) nil nil nil nil) ((*nil*) nil (`) nil nil nil nil) (nil nil nil nil (IF) nil nil) (nil nil (QUOTE ,) (EQL) nil nil nil) (nil nil (, QUOTE ,) (recursive-call) nil nil nil) ((x l x) nil (, cdr) nil nil nil nil)) (/nonstd/misc/meta-lemmas.lisp::expand-member-meta (nil nil nil nil (case-match) nil nil) ((term) nil (((quote MEMBER-EQUAL) x ((quote QUOTE) l)) &) nil nil nil nil) ((term) nil nil nil (if) nil nil) ((term) nil (eqlable-listp) (formal-member) nil nil nil) ((l x l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))