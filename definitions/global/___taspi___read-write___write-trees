((/taspi/read-write/write-trees.lisp::print-translate (nil nil nil nil (if) nil nil) (nil nil (consp) (let format) nil nil nil) ((translate str ;~%) nil ((key (caar translate))) (progn) nil nil nil) (nil nil (val) (recursive-call) nil (format) nil) ((str ,~%~T ~A ~A key val str) nil (cdar cdr) nil nil nil nil) ((translate translate) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/read-write/write-trees.lisp::add-translate (nil nil nil nil (if) nil nil) ((translate nil) nil nil nil (progn) nil nil) (nil nil nil (format print-translate) nil (format) nil) ((str Translate~% str ~T ~A ~A str) nil (caar cdar cdr) nil nil nil nil) ((translate translate translate) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/read-write/write-trees.lisp::new-tip (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil (atom atom) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/read-write/write-trees.lisp::to-newick-string (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) (nil nil (new-tip consp) nil (if if if if) nil nil) ((tree tree cur-internal )) nil (consp atom consp) (let let let let) (if format format) nil nil) ((tree nil ~A tree (new-internal (cdr (assoc-hqual (car tree) internal-names))) (new-internal (cdr (assoc-hqual (car tree) internal-names))) (new-internal (cdr (assoc-hqual (car tree) internal-names))) nil )~A cur-internal) nil (acl2-numberp cdr (new-internal1 (cdr (assoc-hqual (car tree) internal-names))) cdr) nil (if) (format format format format format) nil) ((nil ~A:~F nil ~A:~A tree nil ~A:~F nil (~A,~A tree nil ~A,~A cur-internal) nil (cdr car cdr car cdr cdr new-internal2) nil (format) (recursive-call recursive-call recursive-call recursive-call recursive-call format) nil) ((tree tree tree tree tree t internal-names new-internal tree t internal-names new-internal1 nil internal-names new-internal2 t internal-names new-internal nil internal-names nil nil ~A)~A cur-internal nil ~A)) nil (car cdr car cdr car cdr) nil nil (recursive-call recursive-call) nil)) (/taspi/read-write/write-trees.lisp::print-newick (nil nil nil nil (format) nil nil) ((str ~A;~%) nil nil nil (to-newick-string) nil nil) ((t tree internal) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/read-write/write-trees.lisp::add-newick-tree (nil nil nil nil (progn) nil nil) (nil nil (1+) nil (format print-newick) nil nil) ((str tree TASPI_~A =  count str tree internal count) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/read-write/write-trees.lisp::add-newick-trees (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((list-of-trees (count (add-newick-tree str (car list-of-trees) count internal))) nil nil nil nil (recursive-call) nil) ((str count internal) nil (cdr) nil nil nil nil) ((list-of-trees) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/read-write/write-trees.lisp::trees-to-nexus (nil nil nil (with-open-file) nil nil nil) (nil nil nil nil nil (progn) (str)) ((filename :direction :output :if-exists :supersede) nil nil (start-nexus-file add-translate format) nil (add-newick-trees) nil) ((str comment str translate str list-of-trees internals str End;) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))