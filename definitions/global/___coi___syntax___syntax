((/coi/syntax/syntax.lisp::syn::len (nil nil nil nil (acl2::if) nil nil) (nil nil (acl2::consp) (acl2::and) (acl2::if) nil nil) ((list acl2::nil) nil (zp acl2::null) (len =) nil nil nil) ((n list n) (0) (1- acl2::cdr) nil nil nil nil) ((n list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::nth (nil nil nil (acl2::and) nil nil nil) (nil nil (acl2::consp) nil (acl2::if) nil nil) ((l) nil (zp acl2::car) (recursive-call) nil nil nil) ((n l) nil (acl2::cdr) (+) nil nil nil) ((n l) (-1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::consp (nil nil nil (acl2::and) nil nil nil) (nil nil nil (len equal) nil nil nil) ((term) (3) (acl2::car quote) nil nil nil nil) ((term acl2::cons) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::cons (nil nil (`) nil nil nil nil) (nil nil nil (acl2::cons) nil nil nil) (nil nil (, ,) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::car (nil nil (cadr) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::cdr (nil nil (caddr) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::quotep (nil nil nil (acl2::and) nil nil nil) (nil nil nil (len equal) nil nil nil) ((term) (2) (acl2::car quote) nil nil nil nil) ((term acl2::quote) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::enquote (nil nil (`) nil nil nil nil) (nil nil (acl2::quote) nil nil nil nil) (nil nil (,) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::dequote (nil nil (cadr) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::appendp (nil nil nil (acl2::and) nil nil nil) (nil nil nil (syn::len equal) nil nil nil) ((term) (3) (acl2::car quote) nil nil nil nil) ((term binary-append) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::append (nil nil (`) nil nil nil nil) (nil nil nil (acl2::binary-append) nil nil nil) (nil nil (, ,) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::ifp (nil nil nil (acl2::and) nil nil nil) (nil nil nil (syn::len equal) nil nil nil) ((term) (4) (acl2::car quote) nil nil nil nil) ((term acl2::if) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::if (nil nil (`) nil nil nil nil) (nil nil nil nil (acl2::if) nil nil) (nil nil (, , ,) nil nil nil nil) ((a b c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::nil (nil nil (`) nil nil nil nil) (nil nil (syn::quote) nil nil nil nil) ((acl2::nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::null (nil nil nil (equal) nil nil nil) ((x syn::nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::true (nil nil (`) nil nil nil nil) (nil nil (syn::quote) nil nil nil nil) ((t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::truep (nil nil nil nil nil (acl2::and) nil) (nil nil (acl2::consp acl2::consp) (acl2::equal acl2::equal) nil nil nil) ((x) nil (acl2::car quote acl2::cdr acl2::cadr quote) nil nil nil nil) ((x quote x x t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::conjoin (nil nil nil nil nil (acl2::cond) nil) (nil nil ((acl2::not (acl2::and x y)) (syn::truep y) (syn::truep x) acl2::t) nil nil nil nil) ((acl2::nil x y) nil nil nil (syn::if) nil nil) ((x y syn::nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::and-fn (nil nil nil nil (acl2::if) nil nil) (nil nil (acl2::consp ` `) nil nil nil nil) ((args syn::true) nil nil (syn::conjoin) nil nil nil) (nil nil (, ,) nil nil nil nil) (nil nil (acl2::car recursive-call) nil nil nil nil) ((args) nil (acl2::cdr) nil nil nil nil) ((args) nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::funcall (nil nil nil (acl2::and) nil nil nil) (nil nil nil (syn::len equal) nil nil nil) ((term fn) nil (1+ acl2::car) nil nil nil nil) ((args term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::syn::consp-rec (nil nil nil nil nil (cond) nil) (nil nil ((syn::consp x) (syn::appendp x) (syn::quotep x) t) nil nil nil nil) ((t acl2::nil) nil (acl2::consp) (or) nil nil nil) (nil nil (recursive-call recursive-call syn::dequote) nil nil nil nil) ((x) nil nil (syn::arg syn::arg) nil nil nil) ((x x) (1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax.lisp::free-var-bindings (nil nil nil (acl2::let) nil nil nil) (((list (symbol-fns::collect-variables term))) nil nil (symbol-fns::join-lists) nil nil nil) (nil nil nil (symbol-fns::map-symbol-list-to-package symbol-fns::map-symbol-list-to-package) nil nil nil) ((list w1 list w2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))