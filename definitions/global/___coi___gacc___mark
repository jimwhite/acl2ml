((/coi/gacc/mark.lisp::atype (nil nil nil nil (if) nil nil) ((nil) nil (zp `) nil nil nil nil) ((m) nil nil nil nil ((a 0 0 8 0 nil)) nil) (nil nil nil nil nil nil (b c g d)) ((nil nil) (0 1 8 0 0 2 8 0 0 6 8 0 0 3 8 0) (, ,) nil nil nil nil) (nil nil (recursive-call recursive-call) nil nil nil nil) (nil nil (1- 1-) nil nil nil nil)) (/coi/gacc/mark.lisp::a-mark (nil nil nil nil (if) nil nil) ((ram) nil (zp) nil (if) nil nil) ((n ram) nil (zerop) (let) nil nil nil) ((ptr (vc (rx 8 (+ 2 ptr) ram))) nil nil (let) nil nil nil) (((vc (wfixn 8 1 (1+ vc)))) nil nil (let) nil nil nil) (((ram (wx 8 (+ 2 ptr) vc ram))) nil nil (let) nil nil nil) (((pb (rx 8 (+ 1 ptr) ram))) nil nil nil (recursive-call) nil nil)) (/coi/gacc/mark.lisp::a-mark-closed (nil nil nil nil (a-mark) nil nil) ((n ptr ram) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/mark.lisp::updater-exists (nil nil nil nil (if) nil nil) ((nil) nil nil (and or) nil nil nil) (nil nil (consp consp) nil (and recursive-call) nil nil) ((expr args fns) nil (consp cdr cdr) (equal memberp) nil nil nil) ((fns expr args) nil (car quote car caar) nil nil nil nil) ((args ram expr expr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/mark.lisp::spec (nil nil (`) nil nil nil nil) (((rx (size ptr ram) wx)) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/mark.lisp::btype (nil nil nil nil (if) nil nil) ((nil) nil (zp `) nil nil nil nil) ((m) nil nil nil ((a 0 0 8 0 nil)) nil nil) (nil nil nil nil nil nil (b c d)) ((nil) (0 1 8 0 0 2 8 0 0 3 8 0) (, ,) nil nil nil nil) (nil nil (recursive-call recursive-call) nil nil nil nil) (nil nil (1- 1-) nil nil nil nil)) (/coi/gacc/mark.lisp::b-mark (nil nil nil nil (if) nil nil) ((ram) nil (zp) nil (if) nil nil) ((n ram) nil (zerop) (let) nil nil nil) ((ptr (vc (rx 8 (+ ptr 2) ram))) nil nil (let) nil nil nil) (((vc (wfixn 8 1 (1+ vc)))) nil nil (let) nil nil nil) (((ram (wx 8 (+ ptr 2) vc ram))) nil nil (let) nil nil nil) (((pb (rx 8 (+ ptr 1) ram))) nil nil (let) nil nil nil)) (/coi/gacc/mark.lisp::swap-body (nil nil nil (let) nil nil nil) (((vc (rx 8 (+ ptr 2) ram))) nil nil (let) nil nil nil) (((vc (wfixn 8 1 (1+ vc)))) nil nil (let) nil nil nil) (((ram (wx 8 (+ ptr 2) vc ram))) nil nil (let) nil nil nil) (nil nil ((pb (rx 8 (+ ptr 1) ram))) (let) nil nil nil) (((ram (wx 8 (+ ptr 1) pd ram))) nil (pd) (let) nil nil nil) (((ram (wx 8 (+ ptr 3) pb ram)) ram) nil nil nil (rx) nil nil)) (/coi/gacc/mark.lisp::swap (nil nil nil nil (if) nil nil) ((ram) nil (zp) nil (if) nil nil) ((n ram) nil (zerop) (let) nil nil nil) ((ptr (ram (swap-body ptr ram))) nil nil (let) nil nil nil) (nil nil ((pb (rx 8 (+ ptr 1) ram))) (let) nil nil nil) (((ram (swap (1- n) pb ram))) nil (pd) nil (recursive-call) nil nil) ((pd ram) nil (1-) nil (rx) nil nil)) (/coi/gacc/mark.lisp::c-type (nil nil nil nil (if) nil nil) ((nil) nil (zp `) nil nil nil nil) ((m) nil nil ((a 0 0 8 0 nil)) nil nil nil) (nil nil nil nil nil nil (b c)) (nil (0 1 8 0 0 2 8 0) (, ,) nil nil nil nil) (nil nil (recursive-call recursive-call) nil nil nil nil) (nil nil (1- 1-) nil nil nil nil)) (/coi/gacc/mark.lisp::c-mark (nil nil nil nil (if) nil nil) ((ram) nil (zp) nil (if) nil nil) ((n ram) nil (zerop) (let) nil nil nil) ((ptr (ram (wx 8 ptr 0 ram))) nil nil (let) nil nil nil) (((pb (rx 8 (+ ptr 1) ram))) nil nil (let) nil nil nil) (((ram (c-mark (1- n) pb ram))) nil nil (let) nil nil nil) (((pc (rx 8 (+ ptr 2) ram))) nil nil (let) nil nil nil)) (/coi/gacc/mark.lisp::c-mark-body (nil nil nil nil (if) nil nil) ((ram) nil (consp) nil (c-mark) nil nil) ((skel ptr ram) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/mark.lisp::c-mark-rec (nil nil nil nil (if) nil nil) ((ram) nil (zp) nil (if) nil nil) ((n ram) nil (zerop) nil (if) nil nil) ((ptr ram) nil (consp) (let) nil nil nil) ((skel (entry (car skel))) nil nil (let) nil nil nil) (nil nil ((indx (caddr entry))) (let) nil nil nil) (((v (rx 8 (+ ptr indx) ram))) nil (type) (let) nil nil nil)))