((/taspi/code/brlens/brlens.lisp::remove-brlens-flg (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) ((a nil) nil (consp consp) (let) (if) nil nil) ((a (first (remove-brlens-flg t (car a))) a) nil (null hist) nil (if if) nil nil) (nil nil (consp cdr atom) (hons recursive-call recursive-call hons) (if) nil nil) ((first a t t) nil (cdr null hist car cdr car) (recursive-call recursive-call recursive-call) (if) nil nil) ((a nil first first a a a t nil) nil (cdr cdr hist car cdr) (and) nil nil nil)) (/taspi/code/brlens/brlens.lisp::equal-skip-brlens (nil nil nil (equal) nil nil nil) (nil nil (remove-brlens remove-brlens) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/brlens/brlens.lisp::strip-branch-lengths (nil nil nil nil (if) nil nil) ((x) nil (atom) (let) nil nil nil) ((x (a (strip-branch-lengths (car x)))) nil nil nil (if) nil nil) ((a) nil (acl2-numberp) (cond) nil nil nil) (nil nil (cdr (equal a (car x)) t) nil nil nil nil) ((x) nil nil (let hons) nil nil nil) (((b (strip-branch-lengths (cdr x))) a) nil (recursive-call) (cond) nil nil nil)))