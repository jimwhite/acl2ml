((/defexec/find-path/graph/find-path3.lisp::nodep (nil nil nil (member) nil nil nil) ((x) nil (all-nodes) nil nil nil nil) ((g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path3.lisp::neighbors (nil nil nil nil (cond) nil nil) (nil nil ((endp g) (equal node (car (car g))) t) nil nil nil nil) ((nil) nil (cdr) (recursive-call) nil nil nil) ((node) nil (car cdr) nil nil nil nil) ((g g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path3.lisp::pathp (nil nil nil nil (cond) nil nil) (nil nil ((endp p) (endp (cdr p)) t) nil nil nil nil) ((nil) nil nil (equal and) nil nil nil) ((nil) nil (cdr) (member recursive-call) nil nil nil) ((p g) nil (car cdr) (neighbors) nil nil nil) ((g p) nil (cdr car) nil nil nil nil) ((p p) nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path3.lisp::path-from-to (nil nil nil nil (and) nil nil) (nil nil nil (pathp equal equal) nil nil nil) ((p g a b) nil (car car) nil nil nil nil) ((p) nil (last) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))