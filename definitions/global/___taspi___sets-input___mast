((/taspi/sets-input/mast.lisp::distribute (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil nil (append recursive-call) nil nil nil) ((x) nil (list car cdr) nil nil nil nil) ((x list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mast.lisp::make-possible-taxa (nil nil nil nil (if) nil nil) (nil nil (consp quote) (let) nil nil nil) ((taxa-list (ps-tail (make-possible-taxa (cdr taxa-list))) nil) nil nil (app) nil nil nil) ((ps-tail) nil nil (distribute) nil nil nil) ((ps-tail) nil (car) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mast.lisp::order-by-len-merge (nil nil nil nil (cond) nil nil) (nil nil ((atom l1) (atom l2) t) nil nil nil nil) ((l2 l1) nil nil (let) nil nil nil) (nil nil ((len-car-l1 (len (car l1)))) (cond) nil nil nil) (nil nil (len-car-l2 (>= len-car-l1 len-car-l2) t) nil nil nil nil) (nil nil (len) (cons cons) nil nil nil) (nil nil (car car car) (recursive-call recursive-call) nil nil nil)) (/taspi/sets-input/mast.lisp::order-by-len (nil nil nil nil (if) nil nil) ((list) nil nil (and order-by-len-merge) nil nil nil) (nil nil (consp consp recursive-call recursive-call) nil nil nil nil) ((list) nil (cdr evens-gen odds-gen) nil nil nil nil) ((list list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mast.lisp::possible-taxa-lists (nil nil (order-by-len) nil nil nil nil) (nil nil (make-possible-taxa) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mast.lisp::project-each-checking (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((list-of-trees nil) nil nil (equal) (recursive-call) nil nil) ((ans taxa-list ans) nil (cdr) nil (project) nil nil) ((t taxa-list list-of-trees) nil (car) nil nil nil nil) ((list-of-trees) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mast.lisp::find-mast (nil nil nil nil (if) nil nil) ((nil) nil nil (and let) nil nil nil) (((mast? (project t (car list-of-taxa-lists) (car list-of-trees)))) nil (consp consp) nil (if) nil nil) ((list-of-taxa-lists list-of-trees mast?) nil nil (recursive-call) (project-each-checking) nil nil) ((mast? list-of-trees) nil (car cdr cdr) nil nil nil nil) ((list-of-taxa-lists list-of-trees list-of-taxa-lists) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mast.lisp::mast (nil nil nil (find-mast) nil nil nil) ((list-of-trees) nil (possible-taxa-lists) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mast.lisp::mast-brlens (nil nil nil (let) nil nil nil) (((trees-no-brlens (remove-brlens-list list-of-trees))) nil nil (find-mast) nil nil nil) ((trees-no-brlens) nil (possible-taxa-lists) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))