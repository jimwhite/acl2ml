((/coi/util/in-conclusion.lisp::appears-in-clause (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((clause fapp) nil nil (or or) nil nil nil) (nil nil nil (and) nil (recursive-call recursive-call recursive-call) nil) ((fn args nil fn args t fn args nil) nil (cdr car cdr) (equal equal) nil nil nil) ((fn args clause clause clause) nil (car cdr) nil nil nil nil) ((clause clause) nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::in-conclusion-fn (nil nil nil nil (if) nil nil) ((nil) nil (not) (and) nil nil nil) (nil nil (acl2::mfc-ancestors list) nil (if) nil nil) ((mfc t) nil (consp) (cons) nil (appears-in-clause) nil) ((term nil) nil (car cdr acl2::mfc-clause quote `) nil nil nil nil) ((term term mfc in-conclusion-free-variable) nil (quote) nil nil nil nil) ((t) nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::check-term (nil nil nil nil (cond) nil nil) (nil nil ((equal negated :negated) (equal negated :any) t) nil nil nil nil) (nil nil nil (equal or) nil (and) nil) ((expr term) nil (consp consp) (equal equal equal) nil (and) nil) ((expr term term expr) nil (consp consp car quote cdr cadr) (equal equal) nil nil nil) ((term expr term not term term) nil (car quote cdr cadr) nil nil nil nil) ((term not term term) nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::member-of-clause (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((clause (term (car clause))) nil nil (or) nil nil nil) (nil nil nil nil (check-term recursive-call) nil nil) ((negated expr term negated expr) nil (cdr) nil nil nil nil) ((clause) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::quote-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil (` recursive-call) nil nil nil nil) (nil nil (quote cdr) nil nil nil nil) ((list) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::equal_len (nil nil nil nil (if) nil nil) (nil nil (consp) (and) (if) nil nil) ((list nil) nil (zp null) (recursive-call =) nil nil nil) ((n list n) (0) (1- cdr) nil nil nil nil) ((n list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::syn__consp (nil nil nil (and) nil nil nil) (nil nil nil (equal_len equal) nil nil nil) ((term) (3) (car quote) nil nil nil nil) ((term cons) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::syn__cdr (nil nil (caddr) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::syn__car (nil nil (cadr) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::syn__quotep (nil nil nil (and) nil nil nil) (nil nil nil (equal_len equal) nil nil nil) ((term) (2) (car quote) nil nil nil nil) ((term quote) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::syn__dequote (nil nil (cadr) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::delist (nil nil nil nil (cond) nil nil) (nil nil ((syn__consp args) (syn__quotep args) t) nil nil nil nil) ((nil) nil (quote-list) (cons) nil nil nil) (nil nil (syn__car recursive-call syn__dequote) nil nil nil nil) ((args args) nil (syn__cdr) nil nil nil nil) ((args) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::in-conclusion-check-fn (nil nil nil nil (if) nil nil) ((nil) nil (not) (let) nil nil nil) (((args (delist args))) nil (acl2::mfc-ancestors) (let) nil nil nil) ((mfc (clause (mfc-clause mfc))) nil nil (and) nil nil nil) (nil nil (list) nil (if) nil nil) (nil nil (not) (cons) (if) (appears-in-clause) nil) ((top fn args nil clause) nil (quote `) (and) (member-of-clause member-of-clause) nil nil)) (/coi/util/in-conclusion.lisp::backchaining-check-fn (nil nil nil nil (if) nil nil) ((nil) nil (not list) nil nil nil nil) (nil nil (acl2::mfc-ancestors) (cons) nil nil nil) ((mfc) nil (quote `) nil nil nil nil) ((backchaining-free-variable) nil (quote) nil nil nil nil) ((t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/in-conclusion.lisp::not-in-conclusion-fn (nil nil nil (and) nil nil nil) (nil nil (acl2::mfc-ancestors list) nil nil nil nil) ((mfc) nil nil (cons) nil nil nil) (nil nil (quote `) nil nil nil nil) ((in-conclusion-free-variable) nil (quote) nil nil nil nil) ((t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))