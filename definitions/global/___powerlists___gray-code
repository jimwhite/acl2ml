((/powerlists/gray-code.lisp::plist-of-nested-listps (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (and) (and) nil nil) ((x) nil (recursive-call recursive-call true-listp) (equal equal) nil nil nil) ((x) (2) (p-untie-l p-untie-r length car quote) nil nil nil nil) ((x x x x nest) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-map-tie (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-tie list) nil nil nil) ((y) nil (quote) (recursive-call recursive-call p-tie) nil nil nil) ((x x nest x) nil (p-untie-l p-untie-r cadr) nil nil nil nil) ((y y y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-gray-code (nil nil nil nil (if) nil nil) (nil nil nil (or p-tie p-tie) nil nil nil) (nil nil (zp) (equal list list p-map-tie p-map-tie) nil nil nil) ((n n) (1 0 1 0 1) (quote quote recursive-call p-reverse) nil nil nil nil) ((nest nest) nil (1- recursive-call) nil nil nil nil) ((n) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-gray-p (nil nil nil nil (if) nil nil) (nil nil nil (and or or) nil nil nil) (nil nil (powerlist-p powerlist-p) (and and and and) nil nil nil) ((x y) nil nil (equal recursive-call recursive-call equal equal equal equal equal) nil nil nil) ((x y x y) (0 1 1 0) (p-untie-l p-untie-l p-untie-r p-untie-r p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-first-elem (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p recursive-call) nil nil nil nil) ((x) nil (p-untie-l) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-last-elem (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p recursive-call) nil nil nil nil) ((x) nil (p-untie-r) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-gray-seq-p (nil nil nil nil (if) nil nil) ((t) nil (powerlist-p) nil (and) nil nil) ((x) nil (recursive-call recursive-call) (p-gray-p) nil nil nil) (nil nil (p-untie-l p-untie-r cadr cadr) nil nil nil nil) ((x x) nil (p-last-elem p-first-elem) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-bit-vector-p (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (and and) nil nil nil) ((bit-vector) nil nil (or recursive-call equal or) nil nil nil) ((n) (1) (p-untie-r 1-) (equal equal equal equal) nil nil nil) ((bit-vector n bit-vector bit-vector) (0 1 0 1) (p-untie-l p-untie-l) nil nil nil nil) ((bit-vector bit-vector) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/gray-code.lisp::p-member (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (or equal) nil nil nil) ((x elem x) nil nil (recursive-call recursive-call) nil nil nil) ((elem elem) nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))