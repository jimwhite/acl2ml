((/centaur/vl/util/defwellformed.lisp::wf-pretty-if (nil nil nil nil (if) nil nil) ((y) nil nil (equal) (if) nil nil) ((x t z) nil (`) (equal) nil nil nil) ((x nil) nil nil nil (if) nil nil) (nil nil (, , ,) nil nil nil nil) ((x y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-rewrite-body (nil nil nil nil nil nil nil) (nil nil ((atom body) (equal (car body) (quote quote)) (equal (car body) (quote @wf-progn)) (equal (car body) (quote @wf-and)) (equal (car body) (quote @wf-note)) (equal (car body) (quote @wf-assert)) (equal (car body) (quote @wf-call)) t) nil nil nil nil) ((body body) nil nil (let let cond cond cons) (cond) nil nil) (((args (wf-rewrite-body warnp (cdr body))) (args (wf-rewrite-body warnp (cdr body)))) nil ((and (true-listp body) (equal (len body) 5)) t (and (true-listp body) (equal (len body) 5)) (and (true-listp body) (equal (len body) 2)) t (and (true-listp body) (<= 2 (len body)) (symbolp (second body))) t) (recursive-call recursive-call) (if if) nil nil) ((warnp warnp warnp warnp) nil (wf-progn-warn-fn ` wf-and-warn-fn ` car cdr) (let let let let*) nil (er er er) nil) ((args args hard? Malformed @wf-note: ~x0. body (condition (second body)) hard? Malformed @wf-assert: ~x0. body hard? Malformed @wf-call: ~x0. body body body) nil (quote quote quote) (and and (name (second body))) ((condition (second body)) if (condition (second body)) if if if) nil nil) ((, args , args warnp t recursive-call warnp warnp recursive-call warnp recursive-call) nil (type msg args ` type msg args ` ` name-warn args) (cons cons) (wf-pretty-if wf-pretty-if) nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-warn-name (nil nil nil (intern-in-package-of-symbol) nil nil nil) ((name) nil nil nil (concatenate) nil nil) ((-WARN) nil (quote symbol-name) nil nil nil nil) ((string name) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-normal-defun (nil nil (`) nil nil nil nil) (nil nil nil nil nil (defund) nil) (nil nil (, , ,) (declare) nil nil nil) ((name formals) nil (,@) (wf-rewrite-body) nil (xargs) nil) ((:guard :normalize nil extra-decls nil body) nil (,) nil nil nil nil) ((guard) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-warn-defun (nil nil (`) nil nil nil nil) (nil nil nil nil nil (defund) nil) (nil nil (, (,@ formals) ,) nil (declare) nil nil) ((warnings) nil (wf-warn-name ignorable ,@) (wf-rewrite-body) nil (xargs) nil) ((name :guard :normalize nil warnings extra-decls t body) nil nil (and) nil nil nil) (nil nil (, vl-warninglist-p) nil nil nil nil) ((guard warnings) nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-parse-defwellformed-forms (nil nil nil nil (cond) nil nil) (nil nil ((atom x) (not (and (consp (car x)) (equal (caar x) (quote defwellformed)))) t) nil nil nil nil) ((nil) nil nil (let) nil (er) nil) ((hard? Expected (defwellformed ...), but found ~x0.) nil (quote car) nil (if) nil nil) ((recursive-call x) nil (body extra-decls parents short long rest not) (cons) nil (er) nil) ((hard? Bad (defwellformed ...) form: ~x0.) nil (FLAG::throw-away-keyword-parts quote car recursive-call) (FLAG::extract-keyword-from-args FLAG::extract-keyword-from-args FLAG::extract-keyword-from-args FLAG::extract-keyword-from-args FLAG::extract-keyword-from-args) (and) nil nil) ((:body :extra-decls :parents :short :long recursive-call x) nil (cdar cdar cdar cdar cdar cdar symbolp symbol-listp cdr) (equal cons cons cons cons cons cons cons cons) nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-parsed-forms-to-normal-defuns (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (recursive-call) nil nil nil (wf-normal-defun)) (nil nil (cdr cdr cdr cdr cdr cdr) nil nil nil nil) ((x) nil nil (assoc assoc assoc assoc assoc) nil nil nil) ((:name :formals :guard :body :extra-decls) nil (car car car car car) nil nil nil nil) ((x x x x x) nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-parsed-forms-to-warn-defuns (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (recursive-call) nil nil nil (wf-warn-defun)) (nil nil (cdr cdr cdr cdr cdr cdr) nil nil nil nil) ((x) nil nil (assoc assoc assoc assoc assoc) nil nil nil) ((:name :formals :guard :body :extra-decls) nil (car car car car car) nil nil nil nil) ((x x x x x) nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-parsed-forms-to-names (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (cdr recursive-call) nil nil nil nil) (nil nil (cdr) (assoc) nil nil nil) ((:name x) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-flag-elim-cases (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((x) nil nil ((name (cdr (assoc :name (car x)))) cons) nil nil nil) (nil nil (formals name-warn ` recursive-call) nil nil nil nil) (nil nil (cdr wf-warn-name (, name-warn) cdr) nil nil nil nil) ((name x) nil nil (assoc equal) nil nil nil) ((:formals) nil (car (, name)) (mv-nth) nil nil nil)) (/centaur/vl/util/defwellformed.lisp::wf-flag-wlist-cases (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((x) nil nil ((name (cdr (assoc :name (car x)))) cons) nil nil nil) (nil nil (formals name-warn ` recursive-call) nil nil nil nil) (nil nil (cdr wf-warn-name (, name-warn) cdr) nil nil nil nil) ((name x) nil nil (assoc implies) nil nil nil) ((:formals) nil (car force vl-warninglist-p) nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::mutual-defwellformed-start-fn (nil nil nil (let*) nil nil nil) (nil nil (`) ((parsed (wf-parse-defwellformed-forms x))) nil nil nil) (nil nil (normal warn) (progn) nil nil nil) (nil nil (, ,) (cons cons) nil nil nil) ((normal warn) nil (quote wf-parsed-forms-to-normal-defuns quote wf-parsed-forms-to-warn-defuns) nil nil nil nil) ((mutual-recursion parsed mutual-recursion parsed) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/vl/util/defwellformed.lisp::mutual-defwellformed-finish-fn (nil nil nil (let*) nil nil nil) (nil nil (`) nil nil nil nil) (nil nil (names names-w names-w1 flag-fn-name defthm-macro-name elim-cases wlist-cases flag-var alist formals) nil nil nil (encapsulate)) ((nil) nil (wf-parsed-forms-to-names wf-warn-name-list car wf-flag-elim-cases wf-flag-wlist-cases local) (intern-in-package-of-symbol intern-in-package-of-symbol intern-in-package-of-symbol pairlis$ FLAG::merge-formals) nil (FLAG::make-flag (, defthm-macro-name) (, defthm-macro-name)) nil) ((parsed names names-w names-w1 flag-fn-name parsed parsed FLAG flag-fn-name alist world :defthm-macro-name :hints :hints) nil (, , , in-theory , ,@ (Goal :induct ((, flag-fn-name) (, flag-var) , formals)) , ,@ (Goal :induct ((, flag-fn-name) (, flag-var) , formals))) (FLAG::get-clique-members FLAG::get-clique-members) (concatenate concatenate) nil nil) ((FLAG- DEFTHM- names-w1 world names-w1 world flag-fn-name names-w1 defthm-macro-name elim-cases wlist-cases) nil (quote symbol-name quote symbol-name) (e/d intern-in-package-of-symbol and intern-in-package-of-symbol and) nil nil nil) ((string names-w1 string flag-fn-name (force) names-w1 stable-under-simplificationp names-w1 stable-under-simplificationp) nil ((,@ names)) (FLAG::expand-calls-computed-hint FLAG::expand-calls-computed-hint) (concatenate concatenate) nil nil)))