((/add-ons/hash-stobjs.lisp::hons-remove-assoc (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((al) nil nil (and recursive-call cons) nil nil nil) ((x) nil (consp cdr car) (equal recursive-call) nil nil nil) ((x al al x) nil (car caar cdr) nil nil nil nil) ((al al al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::count-keys (nil nil nil nil (if) nil nil) (nil (0) (atom) nil (if) nil nil) ((al) nil (consp recursive-call) (+) nil nil nil) (nil (1) (car recursive-call cdr) nil nil nil nil) ((al al) nil nil (hons-remove-assoc) nil nil nil) (nil nil (caar cdr) nil nil nil nil) ((al al) nil nil nil nil nil nil)) nil (/add-ons/hash-stobjs.lisp::htablep (nil nil (true-listp) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::create-htable (nil nil (list) nil nil nil nil) ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-get (nil nil (cdr) nil nil nil nil) (nil nil nil (hons-assoc-equal) nil nil nil) ((k) nil nil (nth) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-boundp (nil nil (consp) nil nil nil nil) (nil nil nil (hons-assoc-equal) nil nil nil) ((k) nil nil (nth) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-get? (nil nil nil (mv) nil nil nil) (nil nil nil (tab-get tab-boundp) nil nil nil) ((k htable k htable) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-put (nil nil nil nil (update-nth) nil nil) ((htable) (0) nil (cons) nil nil nil) (nil nil nil (cons nth) nil nil nil) ((k v htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-rem (nil nil nil nil (update-nth) nil nil) ((htable) (0) nil (hons-remove-assoc) nil nil nil) ((k) nil nil (nth) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-count (nil nil (count-keys) nil nil nil nil) (nil nil nil (nth) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-clear (nil nil nil nil (update-nth) nil nil) ((nil htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-init (nil nil (declare) nil nil nil nil) (nil nil nil nil (ignore) nil nil) ((size rehash-size rehash-threshold) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::create-htable (nil nil (vector) nil nil nil nil) (nil nil nil (make-hash-table) nil nil nil) ((:test) nil (quote) nil nil nil nil) ((eql) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-get (nil nil (values) nil nil nil nil) (nil nil nil (gethash) nil nil nil) ((k) nil nil (svref) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-boundp (nil nil nil nil nil (multiple-value-bind) nil) ((boundp) nil (ans declare) (gethash) nil nil nil) ((boundp k) nil (ignore) (svref) nil nil nil) ((htable ans) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-get? (nil nil nil (gethash) nil nil nil) ((k) nil nil (svref) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-put (nil nil nil (setf) nil nil nil) ((v) nil nil (gethash) nil nil nil) ((k) nil nil (svref) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-rem (nil nil nil (remhash) nil nil nil) ((k) nil nil (svref) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-count (nil nil (hash-table-count) nil nil nil nil) (nil nil nil (svref) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-clear (nil nil (clrhash) nil nil nil nil) (nil nil nil (svref) nil nil nil) ((htable) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::tab-init (nil nil nil (setf) nil nil nil) (nil nil nil (svref) nil nil nil) ((htable :size :rehash-size :rehash-threshold) (0) nil (or) (if if) nil nil) ((size rehash-size rehash-threshold) (60) (float float float float) nil nil nil nil) ((rehash-size 17/10 rehash-threshold 3/4) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/add-ons/hash-stobjs.lisp::defstobj-fields-template (nil nil nil (cond) nil nil nil) (nil nil ((endp field-descriptors) t) nil nil nil nil) ((nil) nil nil (let*) nil nil nil) (nil nil nil (cons) nil nil nil) (nil nil (type init resizable key2 fieldp-name accessor-name updater-name boundp-name accessor?-name remove-name count-name clear-name init-name resize-name length-name) nil (recursive-call) nil nil) ((fieldp-name init accessor-name updater-name length-name resize-name resizable boundp-name accessor?-name remove-name count-name clear-name init-name renaming wrld) nil (cdr) (cond) (if if if if) (defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname) nil) ((t nil nil :non-array field :recognizer key2 renaming field :accessor key2 renaming field :updater key2 renaming field :boundp key2 renaming field :accessor? key2 renaming field :remove key2 renaming field :count key2 renaming field :clear key2 renaming field :init key2 renaming field :resize key2 renaming field :length key2 renaming field-descriptors) nil (consp consp cadr consp cadr consp (and (consp type) (eq (car type) (quote array))) t) (or) nil (case) nil)) (/add-ons/hash-stobjs.lisp::defstobj-raw-init-fields (nil nil nil (cond) nil nil nil) (nil nil ((endp ftemps) t) nil nil nil nil) ((nil) nil nil (let*) nil nil nil) (nil nil nil nil nil (cond) nil) (nil nil (type arrayp hashp hash-test hash-init-size array-etype array-size init arrayp hashp (equal type t) t) nil nil nil nil) (nil nil nil (nth and and and and and and nth cons cons cons cons) nil nil nil) ((field-template hashp hashp arrayp arrayp field-template) (1 2) (consp consp cadr cadr car ` recursive-call ` recursive-call kwote recursive-call ` recursive-call) (eq eq) (if) nil nil)) (/add-ons/hash-stobjs.lisp::defstobj-component-recognizer-axiomatic-defs (nil nil nil (cond) nil nil nil) (nil nil ((endp ftemps) t) nil nil nil nil) (nil nil nil (let* let) nil nil nil) (nil nil (list (recog-name (nth 0 (car ftemps)))) ((recog-name (car template)) cons) nil nil nil) (nil nil (field-templates n ` type) nil (cond) (recursive-call) nil) ((name template wrld) nil (caddr length (and (consp type) (eq (car type) (quote array))) (and (consp type) (eq (car type) (quote hash-table))) t cdr) (nth) ((, recog-name)) nil nil) ((template field-templates (, name) ftemps) (1) (declare car `) (let let) nil (and) nil)) (/add-ons/hash-stobjs.lisp::defstobj-axiomatic-init-fields (nil nil nil (cond) nil nil nil) (nil nil ((endp ftemps) t) nil nil nil nil) ((nil) nil nil (let*) nil nil nil) (nil nil nil nil (cond) nil ((field-template (car ftemps)))) (nil nil (type arrayp array-size hashp init arrayp hashp t) nil nil nil nil) (nil nil nil (nth and and and nth cons cons cons) nil nil nil) ((field-template arrayp field-template nil) (1 2) (consp car consp ` recursive-call recursive-call kwote recursive-call) (eq eq) nil nil nil)) (/add-ons/hash-stobjs.lisp::chk-acceptable-defstobj1 (nil nil nil (cond) nil nil nil) (nil nil ((endp ftemps) t) nil nil nil nil) (nil nil nil (let* er-progn) nil nil nil) (nil nil nil ((recog-name (defstobj-fnname name :recognizer :top renaming)) let*) nil nil (er-progn chk-stobj-field-descriptor)) ((name ctx wrld state) nil (creator-name names car) nil nil nil (chk-all-but-new-name chk-all-but-new-name)) ((recog-name ctx wrld state creator-name ctx wrld state name field-descriptors renaming ctx state nil names nil ctx wrld state const-names nil ctx wrld state ftemps) nil (quote quote quote quote type key2 boundp-name accessor?-name remove-name count-name clear-name init-name fieldp-name accessor-name accessor-const-name updater-name length-name resize-name) nil (list* if) (defstobj-fnname) (chk-all-but-new-name chk-all-but-new-name chk-all-but-new-name chk-all-but-new-name)) ((name :creator :top renaming recog-name creator-name names function function function const fieldp-name ctx wrld state accessor-name ctx wrld state updater-name ctx wrld state accessor-const-name ctx wrld state name field-descriptors renaming ctx wrld state) nil (defconst-name quote quote quote quote cdr) (eq er-progn cons) (if if if) (defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname defstobj-fnname list*) nil)) (/add-ons/hash-stobjs.lisp::put-stobjs-in-and-outs1 (nil nil nil (cond) nil nil nil) (nil nil ((endp ftemps) t) nil nil nil nil) ((wrld) nil nil (let) nil nil nil) (nil nil nil nil (recursive-call) nil nil) ((name) nil (acc-fn upd-fn length-fn resize-fn boundp-fn accessor?-fn remove-fn count-fn clear-fn init-fn cdr) nil (cond) nil nil) ((ftemps) nil ((and (consp type) (eq (car type) (quote array))) (and (consp type) (eq (car type) (quote hash-table))) t) (nth nth nth nth nth nth nth nth nth nth) nil nil nil) (nil (3 4 5 6 8 9 10 11 12 13) (car car car car car car car car car car) nil nil (putprop putprop putprop) nil)))