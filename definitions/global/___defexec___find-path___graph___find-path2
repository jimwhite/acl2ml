((/defexec/find-path/graph/find-path2.lisp::all-nodes (nil nil nil (cond) nil nil nil) (nil nil ((endp g) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (car recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((g g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::graph1p (nil nil nil (cond) nil nil nil) (nil nil ((endp g) t) nil nil nil nil) ((t) nil nil nil nil nil (and)) (nil nil (consp true-listp no-duplicatesp) (subsetp recursive-call) nil nil nil) ((nodes nodes) nil (car cdr cdr cdr cdr) nil nil nil nil) ((g g) nil (car car car) nil nil nil nil) ((g g g) nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::graphp (nil nil nil nil (and) nil nil) (nil nil (alistp no-duplicatesp) (graph1p) nil nil nil) ((g g) nil (all-nodes all-nodes) nil nil nil nil) ((g g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::nodep (nil nil nil (member) nil nil nil) ((x) nil (all-nodes) nil nil nil nil) ((g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::neighbors (nil nil nil nil (cond) nil nil) (nil nil ((endp g) (equal node (car (car g))) t) nil nil nil nil) ((nil) nil (cdr) (recursive-call) nil nil nil) ((node) nil (car cdr) nil nil nil nil) ((g g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::pathp (nil nil nil nil (cond) nil nil) (nil nil ((endp p) (endp (cdr p)) t) nil nil nil nil) ((nil) nil nil (equal and) nil nil nil) ((nil) nil (cdr) (member recursive-call) nil nil nil) ((p g) nil (car cdr) (neighbors) nil nil nil) ((g p) nil (cdr car) nil nil nil nil) ((p p) nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::path-from-to (nil nil nil nil (and) nil nil) (nil nil nil (pathp equal equal) nil nil nil) ((p g a b) nil (car car) nil nil nil nil) ((p) nil (last) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::count-non-members (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (member (car x) y) t) nil nil nil nil) (nil (0) nil (recursive-call +) nil nil nil) ((y) (1) (cdr) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::measure (nil nil nil (cons) nil nil nil) (nil nil (len) (+) nil nil nil) ((c) (1) nil (count-non-members) nil nil nil) ((stack) nil (all-nodes) nil nil nil nil) ((g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::find-next-step (nil nil nil nil nil (cond) nil) (nil nil ((endp c) (member (car c) stack) (equal (car c) b) t) nil nil nil nil) (nil nil (quote rev) (let) nil (recursive-call) nil) ((failure stack b g (temp (find-next-step (neighbors (car c) g) (cons (car c) stack) b g))) nil (cdr) (cons) (if) nil nil) ((c b stack temp) nil nil (equal) nil (recursive-call) nil) ((temp stack b g) nil (quote cdr) nil nil nil nil) ((failure c) nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::find-path (nil nil nil (cond) nil nil nil) (nil nil ((equal a b) t) nil nil nil nil) (nil nil (list) nil nil (find-next-step) nil) ((a b g) nil (list) (neighbors) nil nil nil) ((a g a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::simple-pathp (nil nil nil (and) nil nil nil) (nil nil (no-duplicatesp) (pathp) nil nil nil) ((p p g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::chop (nil nil nil nil (cond) nil nil) (nil nil ((endp p) (equal e (car p)) t) nil nil nil nil) ((nil p) nil nil (recursive-call) nil nil nil) ((e) nil (cdr) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::simplify-path (nil nil nil nil (cond) nil nil) (nil nil ((endp p) (member (car p) (cdr p)) t) nil nil nil nil) ((nil) nil (recursive-call) (cons) nil nil nil) (nil nil (car recursive-call) (chop) nil nil nil) ((p) nil (car cdr cdr) nil nil nil nil) ((p p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::find-all-next-steps (nil nil nil nil nil (cond) nil) (nil nil ((endp c) (member (car c) stack) (equal (car c) b) t) nil nil nil nil) ((nil) nil nil (cons append) nil (recursive-call) nil) ((stack b g) nil (cdr rev) nil nil (recursive-call recursive-call recursive-call) nil) ((c stack b g b g stack b g) nil (cdr cdr) (cons neighbors cons) nil nil nil) ((b stack c g stack c) nil (car car) nil nil nil nil) ((c c) nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::find-all-simple-paths (nil nil nil nil (if) nil nil) (nil nil (list) (equal) nil (find-all-next-steps) nil) ((a b b g) nil (list list) (neighbors) nil nil nil) ((a a g a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/find-path2.lisp::induction-hint-function (nil nil nil nil nil (cond) nil) (nil nil ((endp c) (member (car c) stack) (equal (car c) (car p)) t) nil nil nil nil) (nil nil nil nil nil (list recursive-call recursive-call recursive-call) nil) ((p c stack g p stack g g p stack g) nil (cdr cdr cdr) (neighbors cons) nil nil nil) ((c p g stack c) nil (car car) nil nil nil nil) ((c c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))