((/system/convert-normalized-term-to-pairs.lisp::normalizedp (nil nil nil nil nil (cond) nil) (nil nil ((variablep term) (fquotep term) (eq (ffn-symb term) (quote IF)) t) nil nil nil nil) ((t t t) nil nil nil (and) nil nil) (nil nil (recursive-call recursive-call) (or) nil nil nil) (nil nil (symbolp) (and fargn fargn) nil nil nil) ((term term) (2 3) (not not) (fargn) nil nil nil) ((term) (1) (fquotep) (eq) nil nil nil)) (/system/convert-normalized-term-to-pairs.lisp::cntp-M-pair (nil nil nil nil nil (fcons-term*) nil) ((*t*) nil (quote conjoin cdr) nil nil nil nil) ((IF pair) nil (car) nil nil nil nil) ((pair) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/system/convert-normalized-term-to-pairs.lisp::cntp-M (nil nil nil (cond) nil nil nil) (nil nil ((endp pairs) t) nil nil nil nil) ((*t*) nil nil nil nil (fcons-term*) nil) ((*nil*) nil (quote cntp-M-pair recursive-call) nil nil nil nil) ((IF) nil (car cdr) nil nil nil nil) ((pairs pairs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/system/convert-normalized-term-to-pairs.lisp::convert-normalized-term-to-pairs (nil nil nil nil nil (cond) nil) (nil nil ((variablep term) (fquotep term) (eq (ffn-symb term) (quote IF)) t) nil nil nil nil) (nil nil nil (cons cons) (if cond) nil nil) ((ans ans ans) nil ((equal (fargn term 3) *nil*) (equal (fargn term 2) *nil*) t) (cons equal cond cons) nil nil nil) ((term term *nil* term) nil ((consp rhyps) t) (revappend revappend) (recursive-call recursive-call recursive-call) nil nil) ((rhyps nil rhyps rhyps rhyps nil) nil nil (cons cons fargn cons fargn cons cons fargn) (recursive-call) nil nil) ((ans ans term ans term ans rhyps term ans) (2 3 2) nil (cons cons cons cons fargn cons fargn) nil nil nil)))