((/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-property-status (nil nil (car) nil nil nil nil) (nil nil (sat-external-value) nil nil nil nil) (($sat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-update-property-status (nil nil nil (sat-update-external-value) nil nil nil) (($sat) nil nil (list*) nil nil nil) ((val) nil (cdr) nil nil nil nil) (nil nil (sat-external-value) nil nil nil nil) (($sat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-marked-un-fns (nil nil (cadr) nil nil nil nil) (nil nil (sat-external-value) nil nil nil nil) (($sat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-update-marked-un-fns (nil nil nil (sat-update-external-value) nil nil nil) (($sat) nil nil nil (list*) nil nil) ((val) nil (car cddr) nil nil nil nil) (nil nil (sat-external-value sat-external-value) nil nil nil nil) (($sat $sat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-ce-alist (nil nil (caddr) nil nil nil nil) (nil nil (sat-external-value) nil nil nil nil) (($sat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-update-ce-alist (nil nil nil (sat-update-external-value) nil nil nil) (($sat) nil nil nil nil (list*) nil) ((val) nil (car cadr cdddr) nil nil nil nil) (nil nil (sat-external-value sat-external-value sat-external-value) nil nil nil nil) (($sat $sat $sat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-get-un-fn-val (nil nil nil (cond) nil nil nil) (nil nil ((atom x) t) nil nil nil nil) (nil nil nil (mv recursive-call) nil nil nil) ((x) nil (cdr) (revappend cons) nil nil nil) ((ans nil x ans) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-add-un-fn (nil nil nil (cond) nil nil nil) (nil nil ((endp fn-alist) t) nil nil nil nil) ((alist) nil nil (let) nil nil nil) (nil nil ((args (car (car fn-alist)))) nil (recursive-call) nil nil) ((fn) nil (return-val cdr) (cons) nil nil nil) ((fn-alist alist) nil (cdr) (cons) nil nil nil) ((return-val) nil (car) (cons) nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-add-un-fn-list (nil nil nil (cond) nil nil nil) (nil nil ((endp fn-list) t) nil nil nil nil) (nil nil nil nil (mv) (mv-let) nil) ((alist $sat state) nil (declare) nil (erp sat-si-un-fn-alist) (recursive-call) nil) ((un-fn-alist $sat state $sat state $sat state) nil (car ignore cdr) nil (sat-cl-add-un-fn) nil nil) ((fn-list erp fn-list un-fn-alist alist) nil (car) nil nil nil nil) ((fn-list) nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-update-current-ce (nil nil nil nil nil (mv-let) nil) (nil nil (declare) (sat-un-fn-list) (erp) (mv-let) nil) ((fn-list $sat state $sat state) nil (ignore declare) (sat-si-input-alist) (erp mv-let) nil nil) ((erp alist $sat state $sat state) nil (ignore) (alist let) nil (sat-cl-add-un-fn-list) nil) ((erp $sat state fn-list alist $sat state ($sat (sat-cl-update-ce-alist alist $sat))) nil nil (mv) nil nil nil) (($sat state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-print-alist (nil nil nil (cond) nil nil nil) (nil nil ((endp alist) t) nil nil nil nil) ((nil) nil nil (prog2$) nil nil nil) (nil nil (recursive-call) nil (cw) nil nil) ((~x0: ~x1~%) nil (caar cdar cdr) nil nil nil nil) ((alist alist alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-print-ce (nil nil (sat-cl-print-alist) nil nil nil nil) (nil nil (sat-cl-ce-alist) nil nil nil nil) (($sat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-update-and-print-ce (nil nil nil nil (mv-let) nil nil) (nil nil ($sat) (sat-cl-update-current-ce prog2$) nil nil nil) ((state $sat state) nil (sat-cl-print-ce) (mv) nil nil nil) (($sat $sat state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-add-input-literal-list (nil nil nil (cond) nil nil nil) (nil nil ((endp input-lit-list) t) nil nil nil nil) (nil nil nil (mv) nil (mv-let) nil) (($sat state) nil (declare) (erp) (recursive-call) (sat-add-expr) nil) (($sat state t $sat state $sat state) nil (car ignore cdr) nil nil nil nil) ((input-lit-list erp input-lit-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-clause-in-SULFA (nil nil nil (cond) nil nil nil) (nil nil ((endp clause) t) nil nil nil nil) (nil nil nil nil nil (mv mv-let) nil) ((t nil $sat state) nil (declare) nil (sat-in-SULFA cond) (erp) nil) ((in-SULFA sat-package-symbols $sat state $sat state) nil (car ignore sat-package-symbols (not in-SULFA) t) nil nil nil nil) ((clause erp) nil nil nil (recursive-call) (mv mv) nil) ((nil t $sat state nil nil $sat state $sat state) nil (cdr) nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-handle-un-fn-markers1 (nil nil nil (cond) nil nil nil) (nil nil ((endp un-fn-list) t) nil nil nil nil) (nil nil nil (mv) nil (mv-let) nil) (($sat state) nil (declare) (erp) (sat-mark-uninterpreted recursive-call) nil nil) (($sat state $sat state $sat state) nil (car ignore cdr) nil nil nil nil) ((un-fn-list erp un-fn-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-start (nil nil nil (let*) nil nil nil) (((prev-un-fn-list (sat-cl-marked-un-fns $sat))) nil nil nil nil (cond) nil) (nil nil ((and (not marked-un-fn-list) (not prev-un-fn-list)) (not marked-un-fn-list) (equal prev-un-fn-list marked-un-fn-list) t) nil nil nil nil) (nil nil nil (let let) nil (mv-let mv-let) nil) ((($sat (sat-cl-update-marked-un-fns nil $sat)) ($sat (sat-cl-update-marked-un-fns marked-un-fn-list $sat))) nil (declare declare) (erp sat-new-problem mv erp sat-new-problem mv) nil (mv-let mv-let) nil) (($sat state $sat state $sat state $sat state $sat state $sat state) nil (ignore declare ignore declare) (erp sat-new-problem! mv erp sat-new-problem!) (sat-cl-handle-un-fn-markers1) nil nil) ((erp $sat state $sat state $sat state erp $sat state $sat state marked-un-fn-list $sat state) nil (ignore ignore) nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-run-clause (nil nil nil (cond) nil nil nil) (nil nil ((endp input-clause) t) nil nil nil nil) (nil nil nil (mv) (mv-let) nil nil) ((nil state) nil nil (erp) (cond) nil nil) ((eval-output state ce-alist nil Counter-example check run-ce state nil) nil (car w erp (cdr eval-output) t) nil nil nil nil) ((input-clause state) nil nil (mv mv) (recursive-call) nil nil) ((state t state ce-alist state) nil (cdr) nil (er) nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat1 (nil nil nil (let*) nil nil nil) ((($sat (sat-cl-update-property-status (quote acl2::unknown) $sat))) nil nil nil (mv-let) nil nil) (nil nil ($sat) nil (sat-cl-start mv-let) nil nil) ((state marked-un-fn-list $sat state) nil nil nil (in-SULFA sat-cl-clause-in-SULFA cond) nil nil) ((sat-package-symbols $sat state input-clause $sat state) nil (sat-package-symbols (not in-SULFA) t) nil nil nil nil) (nil nil nil (prog2$) nil (mv mv) nil) ((nil $sat state nil $sat state) nil (cw) (cons cons) (mv-let) nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat-cl-lookup-hint-val (nil nil nil (let*) nil nil nil) (((entry (member key sat-hint))) nil nil nil (cond) nil nil) (nil nil ((and entry (not (consp (cdr entry)))) entry t) nil nil nil nil) ((default) nil (cadr) nil (let) nil nil) (((val (er hard (quote sat-cl) (quote start) ERROR: ~s0 requires a value~% key)) default entry) nil (declare) nil nil nil nil) (nil nil (ignore) nil nil nil nil) ((val) nil nil nil nil nil nil)) (/clause-processors/SULFA/books/clause-processors/sat-clause-processor.lisp::sat (nil nil nil nil nil nil (sat1)) ((input-clause $sat state) nil nil nil (sat-cl-lookup-hint-val sat-cl-lookup-hint-val) nil nil) ((sat-hint sat-hint) nil (quote quote quote quote) nil nil nil nil) ((:uninterpreted-functions nil :check-counter-example t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))