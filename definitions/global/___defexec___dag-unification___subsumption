((/defexec/dag-unification/subsumption.lisp::sel-match (nil nil nil nil (if) nil nil) (nil nil (endp car) (let*) nil nil nil) ((S) nil (cdr) ((equ (car S))) nil (cond) nil) ((S) nil (t1 t2 (variable-p t1) (variable-p t2) (eql (car t1) (car t2)) t) nil nil nil nil) ((equ equ) nil (car cdr recursive-call recursive-call) nil nil nil nil) ((equ equ) nil (cdr cdr) nil nil nil nil) ((S S) nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::subs-system (nil nil nil nil (if) nil nil) (nil nil nil (or) (mv mv-let) nil nil) ((S match bool) nil (not not) (S1 transform-subs) (recursive-call) nil nil) ((bool match1 bool1 S match S1 match1 bool1) nil (consp) nil nil nil nil) ((S) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::match-mv (nil nil nil nil nil (mv-let) nil) (nil nil (declare) (S1 mv) (subs-system) nil nil) ((sol1 bool1 S nil t sol1 bool1) nil (ignore) nil nil nil nil) ((S1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::subs-mv (nil nil (match-mv) nil nil nil nil) (nil nil (list) nil nil nil nil) (nil nil nil (cons) nil nil nil) ((t1 t2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::subs (nil nil nil nil nil (mv-let) nil) ((recursive-call) nil (matching declare) (subs-mv) nil nil nil) ((recursive-call t1 t2) nil (ignore) nil nil nil nil) ((matching) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::matching (nil nil nil nil nil (mv-let) nil) ((recursive-call) nil (recursive-call declare) (subs-mv) nil nil nil) ((subs t1 t2) nil (ignore) nil nil nil nil) ((subs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::subs-list-mv (nil nil nil nil (mv-let) nil nil) (nil nil (pair-lists) (pair-args) (if) nil nil) ((bool l1 l2 bool) nil (match-mv) (mv) nil nil nil) ((pair-lists nil nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::subs-list (nil nil nil nil nil (mv-let) nil) ((recursive-call) nil (matching declare) (subs-list-mv) nil nil nil) ((recursive-call l1 l2) nil (ignore) nil nil nil nil) ((matching) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/dag-unification/subsumption.lisp::matching-list (nil nil nil nil nil (mv-let) nil) ((matching) nil (matching declare) (subs-list-mv) nil nil nil) ((subs-list l1 l2) nil (ignore) nil nil nil nil) ((subs-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))