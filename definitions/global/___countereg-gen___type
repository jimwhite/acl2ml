((/countereg-gen/type.lisp::get-type-list-from-type-set (nil nil nil (let) nil nil nil) (((typ (get-type-from-type-set-decoded (acl2::decode-type-set ts)))) nil nil nil (if) nil nil) ((typ) nil (proper-consp list) nil nil nil nil) ((typ typ) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/type.lisp::get-types-from-type-set-lst (nil nil nil nil (if) nil nil) ((nil) nil (endp) (append) nil nil nil) ((ts-lst) nil (get-type-list-from-type-set recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((ts-lst ts-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/type.lisp::get-var-types-from-type-alist1 (nil nil nil nil (if) nil nil) ((ans) nil (endp) (b*) nil nil nil) ((freevars) nil nil ((var (car freevars))) (if) nil nil) ((ts) nil (ts-info ts) (let) (recursive-call) nil nil) (((types (get-type-list-from-type-set ts)) acl2-type-alist ans) nil (cdr) (assoc-eq) (if recursive-call) nil nil) ((var acl2-type-alist nil acl2-type-alist freevars) nil (consp cadr cdr) nil (acons) nil nil) ((ts-info ts-info freevars var types ans) nil nil nil nil nil nil)) (/countereg-gen/type.lisp::get-var-types-from-type-alist (nil nil nil nil (if) nil nil) (nil nil (endp quote) nil (get-var-types-from-type-alist1) nil nil) ((acl2-type-alist nil acl2-type-alist freevars) nil (quote) nil nil nil nil) ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/type.lisp::meet (nil nil nil (b*) nil nil nil) (nil nil nil nil (if) nil nil) ((typ1 typ2) nil ((unless (and (defdata::is-a-typeName typ1 wrld) (defdata::is-a-typeName typ2 wrld))) (when (eq (quote acl2::all) typ1)) (when (eq (quote acl2::all) typ2)) (when (defdata::is-subtype typ1 typ2 wrld)) (when (defdata::is-subtype typ2 typ1 wrld)) (when (defdata::is-disjoint typ2 typ1 wrld)) (when (defdata::is-a-custom-type typ1 wrld)) (when (defdata::is-a-custom-type typ2 wrld)) types-in-wrld pos1 pos2) (<) nil nil nil) ((typ2 typ1 typ1 typ2 typ1 typ2) nil (quote strip-cars nfix nfix) (position position) nil nil (er)) ((hard ~x0 or ~x1 is not a defdata type.~| typ1 typ2 acl2::empty typ1 types-in-wrld typ2 types-in-wrld pos1 pos2) nil (quote) (table-alist) nil nil nil) ((recursive-call wrld) nil (quote) nil nil nil nil) ((defdata::types-info-table) nil nil nil nil nil nil)))