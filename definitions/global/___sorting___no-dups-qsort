((/sorting/no-dups-qsort.lisp::no-dups-cons (nil nil nil (cond) nil nil nil) (nil nil ((and (consp y) (equal x (car y))) t) nil nil nil nil) ((y) nil nil (cons) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/sorting/no-dups-qsort.lisp::no-dups-qsort (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (endp (cdr x)) t) nil nil nil nil) ((nil) nil (list) (append) nil nil nil) (nil nil (car recursive-call) (no-dups-cons) nil nil nil) ((x) nil (car recursive-call) nil (filter) nil nil) ((x) nil (quote cdr car) nil (filter) nil nil) ((LT x x) nil (quote cdr car) nil nil nil nil)) (/sorting/no-dups-qsort.lisp::elim-dups (nil nil nil (cond) nil nil nil) (nil nil ((endp x) t) nil nil nil nil) ((nil) nil nil (no-dups-cons) nil nil nil) (nil nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))