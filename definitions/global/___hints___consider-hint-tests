((/hints/consider-hint-tests.lisp::map-h (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((x) nil (h recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::filter-map-h (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((x) nil (hp recursive-call) (cons) nil nil nil) (nil nil (car h recursive-call cdr) nil nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::bumper1 (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((u) nil nil (+) (recursive-call) nil nil) ((v v w) nil (cdr) (*) nil nil nil) ((w u) nil (car) nil nil nil nil) ((u) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::bumper2 (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((u) nil nil (+) (recursive-call) nil nil) ((v v w) nil (cdr) (*) nil nil nil) ((w u) nil (car) nil nil nil nil) ((u) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::bumper3 (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((u) nil (zp) (cons cons) nil nil nil) (nil (0) (car) (+) (recursive-call recursive-call) nil nil) ((u v w v v w) nil (cdr cdr) (*) nil nil nil) ((u w u) nil (car) nil nil nil nil) ((u) nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::bumper4 (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((u) nil (zp) (recursive-call cons) nil nil nil) ((v) nil (cdr) (* + recursive-call) nil nil nil) ((v u v v) nil (car car cdr) nil nil nil nil) ((u u u) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::generic-run (nil nil nil nil (if) nil nil) ((s) nil (zp) (recursive-call) nil nil nil) ((n) nil (h) (-) nil nil nil) ((s n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::m5-run (nil nil nil nil (if) nil nil) ((s) nil (zp) (recursive-call) nil nil nil) ((n) nil nil (cons -) nil nil nil) ((s n) (3 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::generic-exists (nil nil nil nil (if) nil nil) ((nil) nil (endp) (or) nil nil nil) ((x) nil (h recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::generic-list-iterator (nil nil nil (cond) nil nil nil) (nil nil ((endp x) t) nil nil nil nil) ((ans) nil nil (recursive-call) nil nil nil) (nil nil (cdr) (g) nil nil nil) ((x ans) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::get-integers (nil nil nil (cond) nil nil nil) (nil nil ((consp x) t) nil nil nil nil) ((a) nil nil (cond) nil nil nil) (nil nil ((integerp (car x)) t) nil nil nil nil) (nil nil nil (recursive-call recursive-call) nil nil nil) ((a) nil (cdr cdr) (cons) nil nil nil) ((x a x) nil (car) nil nil nil nil)) (/hints/consider-hint-tests.lisp::get-big-integers (nil nil nil (cond) nil nil nil) (nil nil ((consp x) t) nil nil nil nil) ((a) nil nil (cond) nil nil nil) (nil nil ((and (integerp (car x)) (>= (car x) min)) t) nil nil nil nil) (nil nil nil nil (recursive-call recursive-call) nil nil) ((min min a) nil (cdr cdr) (cons) nil nil nil) ((x a x) nil (car) nil nil nil nil)) (/hints/consider-hint-tests.lisp::app (nil nil nil nil (if) nil nil) ((y) nil (consp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::rev (nil nil nil nil (if) nil nil) ((nil) nil (consp) (app) nil nil nil) ((x) nil (recursive-call list) nil nil nil nil) (nil nil (cdr car) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::map-op (nil nil nil nil (if) nil nil) ((base) nil (endp) (op) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::sum-list (nil nil nil nil (if) nil nil) (nil (0) (consp) (+) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/consider-hint-tests.lisp::propertyp (nil nil nil (equal) nil nil nil) ((x) (23) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))