((/centaur/misc/tailrec.lisp::pf-steps-clk (nil nil nil nil (cond) nil nil) (nil nil ((zp clk) (pf-done st) t) nil nil nil nil) ((nil) (0) nil (let) nil nil nil) (((res (pf-steps-clk (1- clk) (pf-next st)))) nil nil (and) nil nil nil) ((res) nil nil (+) nil nil nil) ((res) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::pf-measure (nil nil nil (or) nil nil nil) (nil (0) (pf-terminates) nil nil nil nil) ((st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::pf-run (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if if) nil nil) ((pf-diverge) nil (pf-terminates pf-done pf-retval recursive-call) nil (if) nil nil) ((st st st) nil (pf-done pf-retval recursive-call pf-next) nil nil nil nil) ((st st st) nil (pf-next) nil nil nil nil) ((st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::mk-list-term (nil nil nil nil (if) nil nil) ((*nil*) nil (atom `) nil nil nil nil) ((terms) nil nil (cons) nil nil nil) (nil nil (, ,) nil nil nil nil) (nil nil (car recursive-call) nil nil nil nil) ((terms) nil (cdr) nil nil nil nil) ((terms) nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::get-mv-nths (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n) nil (`) nil (recursive-call) nil nil) ((term) nil (1-) (mv-nth +) nil nil nil) ((start n) (1) (quote ,) nil nil nil nil) ((term) nil (,) nil nil nil nil) ((start) nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::normalize-sym-alist (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((keys (look (assoc (car keys) x))) nil nil nil (if) nil nil) ((look) nil nil (cons recursive-call) nil nil nil) ((look x) nil (cdr) (recursive-call) nil nil nil) ((x keys) nil (cdr) nil nil nil nil) ((keys) nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::clean-lambda1 (nil nil nil (b*) nil nil nil) (nil nil nil ((bound-vars (remove-duplicates (term-vars body)))) (mv) nil nil) ((body) nil (alist alist strip-cars strip-cdrs) nil nil nil nil) ((alist alist) nil nil (pairlis$ normalize-sym-alist) nil nil nil) ((vars args bound-vars alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::clean-lambda2 (nil nil nil nil (if) nil nil) ((body) nil (`) (and) nil nil nil) (nil nil nil (equal subsetp-equal (lambda (, vars) (, body))) nil nil nil) ((vars args vars , args) nil (term-vars) nil nil nil nil) ((body) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::clean-lambda (nil nil nil (b*) nil nil nil) ((((mv vars body args) (clean-lambda1 vars body args))) nil nil nil (clean-lambda2) nil nil) ((vars body args) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::done-retval-next-from-body (nil nil nil nil nil nil nil) (nil nil ((atom x) (quotep x) (equal (first x) fnname) (eq (first x) (quote if)) (atom (first x)) t) nil nil nil nil) (nil nil nil (b* b*) (if) (mv mv mv) nil) ((nil *t* *nil* nil *t* x *nil* nil *t* x *nil*) nil nil (or equal) nil (mv mv mv (vars (second (first x))) mv) nil) ((x *nil* arity nil *nil* nil arity nil nil nil nil done ret next nil) nil (len (when err) (mv err else-done else-ret else-next) (when err) test done ret next body args (mv err body-done body-ret body-next) (when err)) (cond cond) (if cond) nil nil) (nil nil (rest car mk-list-term second third rest (equal body-done *t*) (equal body-done *nil*) t (equal body-done *nil*) t (equal body-done *t*) t) (=) (recursive-call if recursive-call) (mv mv cond cond mv) nil) ((x arity err nil nil nil fnname arity err nil nil nil x then-done x fnname arity body err nil nil nil *t* *nil* *nil* *nil*) (1) (rest rest fourth ` (equal done *nil*) (equal then-done *nil*) (equal else-done *nil*) t (equal done *t*) (equal then-done *t*) (equal else-done *t*) t first) (equal) (clean-lambda clean-lambda clean-lambda) nil nil)) (/centaur/misc/tailrec.lisp::done-retval-next-from-body-ind (nil nil nil nil nil nil nil) (nil nil ((atom x) (quotep x) (eq (first x) fnname) (eq (first x) (quote if)) (atom (first x)) t) nil nil nil nil) ((nil nil nil nil) nil nil (list b*) nil nil nil) (nil nil nil ((vars (second (first x)))) (recursive-call recursive-call recursive-call) nil nil) ((fnname al fnname al fnname body) nil (third fourth body args) (pairlis$) nil nil nil) ((x x vars) nil (third rest) (partial-ev-lst) nil nil nil) ((x args al) nil (first) nil nil nil nil)) (/centaur/misc/tailrec.lisp::partial-norm-body (nil nil nil (b*) nil nil nil) (nil nil nil ((arity (len formals))) (mv) nil nil) ((nil) nil ((mv err done ret next) (when err) ` `) nil nil nil nil) (nil nil nil (((not (use-by-hint (quote (, donefn)))) (equal ((, donefn) , formals) (, done)))) (done-retval-next-from-body mv if) nil nil) ((fnname arity x err x nil) nil ((lambda (mv) ((, fnname) , (if (equal arity 1) (quote (mv)) (get-mv-nths 0 arity (quote mv))))) (not (use-by-hint (quote (, retfn)))) (not (use-by-hint (quote (, nextfn))))) ((, donefn) (, retfn)) nil nil nil) ((, formals , formals) nil nil ((, nextfn) equal equal) nil nil nil) ((, formals) nil (, ,) ((, retfn) (, nextfn)) nil nil nil)) (/centaur/misc/tailrec.lisp::tr-decomp-clause-proc (nil nil nil (b*) nil nil nil) (nil nil nil (cons) nil (((unless (equal (len hints) 6)) (cw wrong shape of clause proc hints~%) (list clause))) nil) ((clauses) nil ((list fn formals body donefn retfn nextfn) (mv err new-body clauses)) ((unless (and (not (eq fn (quote quote))) (pseudo-termp body) (not (eq donefn (quote quote))) (not (eq retfn (quote quote))) (not (eq nextfn (quote quote))))) (when err) replace-subterms-list) nil nil nil) ((hints clause) nil (cw list cw list list) nil nil nil nil) ((wrong types of clause proc hints~% clause fn formals body donefn retfn nextfn err clause) nil nil (cons) nil nil nil) ((body new-body) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::partial-ev-equal-term-alistp (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((x) nil nil (equal recursive-call) nil nil nil) ((a) nil (cdr) (partial-ev partial-ev) nil nil nil) ((a a x) nil (caar cdar) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/tailrec.lisp::fsubst-into-tail-recursion (nil nil nil nil nil (cond) nil) (nil nil ((or (atom x) (eq (car x) (quote quote)) (and (not (consp (car x))) (not (eq (car x) (quote if))) (not (equal (car x) fnname)))) (equal (first x) fnname) (eq (first x) (quote if)) t) nil nil nil nil) (nil nil nil (mv mv b* b*) nil nil nil) ((base nil t) nil (` ((mv body recp) (fsubst-into-tail-recursion base tailfn fnname extras (third (car x))))) (mv mv) (((mv then-body then-recp) (fsubst-into-tail-recursion base tailfn fnname extras (third x)))) nil nil) ((t t) nil ((mv else-body else-recp) test (when (and (not then-recp) (not else-recp))) ` (when (not recp)) `) nil ((, tailfn)) nil nil) ((,) nil (,@ cdr second) (mv mv) (if (lambda (, (append extras (second (car x)))) (, body))) nil (recursive-call)) ((extras x base tailfn fnname extras x base nil base nil ,) nil (fourth , , , ,@ cdr) nil nil nil nil)))