((/arithmetic-3/bind-free/common.lisp::collect-+ (nil nil nil (+) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::collect-* (nil nil nil (*) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::bubble-down (nil nil (declare) nil nil nil nil) (nil nil (ignore) nil nil nil nil) ((match) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::addend-pattern (nil nil nil nil nil nil (cond)) (nil nil ((variablep addend) (fquotep addend) (eq (ffn-symb addend) (quote UNARY--)) (and (eq (ffn-symb addend) (quote BINARY-*)) (rational-constant-p (arg1 addend))) t) nil nil nil nil) ((addend addend addend) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (arg1 arg2) nil nil nil nil) ((addend addend) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::matching-addend-patterns-p (nil nil nil (cond) nil nil nil) (nil nil ((quotep pattern1) t) nil nil nil nil) ((nil) nil nil (equal) nil nil nil) ((pattern1 pattern2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::matching-addend-p (nil nil nil (let) nil nil nil) (((addend-pattern (addend-pattern addend))) nil nil (matching-addend-patterns-p) nil nil nil) ((pattern addend-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::factor-pattern-exponent2 (nil nil nil nil (if) nil nil) (nil nil (`) (and) (if) nil nil) (nil nil (rational-constant-p arg2 `) (eq eql BINARY-*) nil nil nil) ((weight addend) nil (fn-symb quote arg1 unquote , ,) (BINARY-*) nil nil nil) ((addend BINARY-* addend addend) nil (arg1 , , kwote) nil nil nil nil) ((addend) nil (kwote arg2 /) nil nil nil nil) ((addend weight) nil nil (/) nil nil nil)) (/arithmetic-3/bind-free/common.lisp::factor-pattern-exponent1 (nil nil nil nil (if) nil nil) (nil nil (`) (eq factor-pattern-exponent2) nil nil nil) ((exponent weight) nil (fn-symb quote) (BINARY-+) nil nil nil) ((exponent BINARY-+) nil (, ,) nil nil nil nil) (nil nil nil (factor-pattern-exponent2 recursive-call) nil nil nil) ((weight weight) nil (arg1 arg2) nil nil nil nil) ((exponent exponent) nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::factor-pattern-exponent (nil nil nil nil nil nil (cond)) (nil nil ((or (variablep exponent) (fquotep exponent)) (eq (ffn-symb exponent) (quote UNARY--)) (eq (ffn-symb exponent) (quote BINARY-*)) (eq (ffn-symb exponent) (quote BINARY-+)) t) nil nil nil nil) ((exponent exponent) nil (recursive-call) nil (if if) nil nil) ((exponent exponent) nil (arg1 rational-constant-p arg2) (let) (and) nil nil) ((exponent exponent (weight (unquote (arg1 (arg1 exponent))))) nil (arg1 rational-constant-p not) (eq factor-pattern-exponent1) nil nil nil) ((exponent exponent weight) nil (fn-symb quote arg1) (equal) nil nil nil) ((BINARY-*) nil (arg1 arg1 arg1 quote) nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::factor-pattern-gather-exponents (nil nil nil nil nil nil nil) (nil nil ((variablep factor) (fquotep factor) (eq (ffn-symb factor) (quote UNARY-/)) (eq (ffn-symb factor) (quote UNARY--)) (eq (ffn-symb factor) (quote EXPT)) t) nil nil nil nil) ((factor factor) nil (recursive-call recursive-call) (let let) nil nil nil) (((c (unquote factor))) nil (arg1 arg1 (base (factor-pattern-gather-exponents (arg1 factor)))) nil (if) (cond) nil) ((factor factor base) nil ((eql c 0) (rationalp c) (acl2-numberp c) t exponent acl2-numberp) nil (list) nil nil) ((c base base exponent) (0 0) (factor-pattern-exponent quote) nil (if) nil nil) ((c do-not-use-this-symbol) nil (/ arg2) (<) nil nil nil)) (/arithmetic-3/bind-free/common.lisp::matching-factor-gather-exponents-patterns-p (nil nil nil nil (cond) nil nil) (nil nil ((acl2-numberp pattern1) (and (consp pattern1) (eq (car pattern1) (quote do-not-use-this-symbol)) (consp (cdr pattern1))) t) nil nil nil nil) (nil nil nil (or equal) nil (and) nil) ((pattern1 pattern2) nil (consp consp) (eq equal equal) nil (and) nil) ((pattern2 pattern1 pattern2) nil (car quote cdr cadr cadr consp consp) (eq or) nil nil nil) ((pattern2 do-not-use-this-symbol pattern2 pattern2 pattern1 pattern2) nil (car quote cdr) (equal) (and) nil nil) ((pattern2 do-not-use-this-symbol pattern2) nil (cadr cadr consp consp) (equal) nil nil nil)) (/arithmetic-3/bind-free/common.lisp::matching-factor-gather-exponents-p (nil nil nil (let) nil nil nil) (((factor-pattern (factor-pattern-gather-exponents factor))) nil nil (matching-factor-gather-exponents-patterns-p) nil nil nil) ((pattern factor-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::factor-pattern-scatter-exponents (nil nil nil nil nil nil nil) (nil nil ((variablep factor) (fquotep factor) (eq (ffn-symb factor) (quote UNARY-/)) (eq (ffn-symb factor) (quote UNARY--)) (eq (ffn-symb factor) (quote EXPT)) t) nil nil nil nil) ((factor factor) nil (recursive-call recursive-call) (let let) nil nil nil) (((c (unquote factor))) nil (arg1 arg1 (base (factor-pattern-scatter-exponents (arg1 factor)))) nil (if) (cond) nil) ((factor factor) nil ((eql c 0) (rationalp c) (acl2-numberp c) t exponent acl2-numberp) nil (list cond) nil nil) ((c base base exponent) (0 0) (factor-pattern-exponent quote (variablep exponent) (fquotep exponent) t) nil (if) nil nil) ((c do-not-use-this-symbol base) nil (/ arg2 ` `) (<) nil nil nil)) (/arithmetic-3/bind-free/common.lisp::matching-factor-scatter-exponents-patterns-p (nil nil nil nil nil nil nil) (nil nil (consp consp consp consp consp consp) (eq eq equal) nil nil nil) ((pattern1 pattern2) nil (car quote car quote cdr cdr cddr cddr caddr caddr) nil nil nil nil) ((pattern1 do-not-use-this-symbol pattern2 do-not-use-this-symbol pattern1 pattern2 pattern1 pattern2 pattern1 pattern2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::matching-factor-scatter-exponents-p (nil nil nil (let) nil nil nil) (((factor-pattern (factor-pattern-scatter-exponents factor))) nil nil (matching-factor-scatter-exponents-patterns-p) nil nil nil) ((pattern factor-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::arith-factor-pattern-gather-exponents (nil nil nil nil nil nil nil) (nil nil ((variablep factor) (fquotep factor) (eq (ffn-symb factor) (quote UNARY-/)) (eq (ffn-symb factor) (quote UNARY--)) (eq (ffn-symb factor) (quote EXPT)) t) nil nil nil nil) ((factor factor) nil (recursive-call recursive-call) (let let) nil nil nil) (((c (unquote factor))) nil (arg1 arg1 (base (arith-factor-pattern-gather-exponents (arg1 factor)))) nil (if) (cond) nil) ((factor factor base) nil ((eql c 0) (rationalp c) (acl2-numberp c) t exponent acl2-numberp) nil (list) nil nil) ((c base base exponent) (0 0) (factor-pattern-exponent quote) nil (if) nil nil) ((c do-not-use-this-symbol) nil (/ arg2) (<) nil nil nil)) (/arithmetic-3/bind-free/common.lisp::arith-matching-factor-gather-exponents-patterns-p (nil nil nil nil (cond) nil nil) (nil nil ((acl2-numberp pattern1) (and (consp pattern1) (eq (car pattern1) (quote do-not-use-this-symbol)) (consp (cdr pattern1))) t) nil nil nil nil) (nil nil nil (or equal) nil (and) nil) ((pattern1 pattern2) nil (consp consp) (eq equal equal) nil (and) nil) ((pattern2 pattern1 pattern2) nil (car quote cdr cadr cadr consp consp) (eq or) nil nil nil) ((pattern2 do-not-use-this-symbol pattern2 pattern2 pattern1 pattern2) nil (car quote cdr) (equal) (and) nil nil) ((pattern2 do-not-use-this-symbol pattern2) nil (cadr cadr consp consp) (equal) nil nil nil)) (/arithmetic-3/bind-free/common.lisp::arith-matching-factor-gather-exponents-p (nil nil nil (let) nil nil nil) (((factor-pattern (arith-factor-pattern-gather-exponents factor))) nil nil (arith-matching-factor-gather-exponents-patterns-p) nil nil nil) ((pattern factor-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::arith-factor-pattern-scatter-exponents (nil nil nil nil nil nil nil) (nil nil ((variablep factor) (fquotep factor) (eq (ffn-symb factor) (quote UNARY-/)) (eq (ffn-symb factor) (quote UNARY--)) (eq (ffn-symb factor) (quote EXPT)) t) nil nil nil nil) ((factor factor) nil (recursive-call) (let list let) nil nil nil) (((c (unquote factor))) nil (quote recursive-call arg1 (base (arith-factor-pattern-scatter-exponents (arg1 factor)))) nil (if) (cond) nil) ((do-not-use-this-symbol-either factor) nil ((eql c 0) (rationalp c) (acl2-numberp c) t arg1 exponent acl2-numberp) nil (list cond) nil nil) ((c factor base base exponent) (0 0) (factor-pattern-exponent quote (variablep exponent) (fquotep exponent) t) nil (if) nil nil) ((c do-not-use-this-symbol base) nil (/ arg2 ` `) (<) nil nil nil)) (/arithmetic-3/bind-free/common.lisp::arith-matching-factor-scatter-exponents-patterns-p (nil nil nil nil nil nil (cond)) (nil nil ((acl2-numberp pattern1) (and (consp pattern1) (eq (car pattern1) (quote do-not-use-this-symbol)) (consp pattern2) (eq (car pattern2) (quote do-not-use-this-symbol))) (and (consp pattern1) (eq (car pattern1) (quote do-not-use-this-symbol-either)) (consp (cdr pattern1))) (and (consp pattern2) (eq (car pattern2) (quote do-not-use-this-symbol-either)) (consp (cdr pattern2))) t) nil nil nil nil) ((nil nil) nil nil (equal equal) nil nil nil) ((pattern2 pattern1) nil (consp consp not not consp consp cadr cadr) (equal equal) nil nil nil) ((pattern1 pattern2) nil (cdr cdr cadr cadr cddr cddr caddr caddr) (eql eql) nil nil nil) ((pattern1 pattern2 pattern1 pattern2 pattern1 pattern2 pattern1 pattern2) (0 0) (cadr cadr) nil nil nil nil) ((pattern1 pattern2) nil nil nil nil nil nil)) (/arithmetic-3/bind-free/common.lisp::arith-matching-factor-scatter-exponents-p (nil nil nil (let) nil nil nil) (((factor-pattern (arith-factor-pattern-scatter-exponents factor))) nil nil (arith-matching-factor-scatter-exponents-patterns-p) nil nil nil) ((pattern factor-pattern) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))