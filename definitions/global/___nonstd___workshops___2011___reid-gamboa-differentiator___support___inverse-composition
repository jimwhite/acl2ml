((/nonstd/workshops/2011/reid-gamboa-differentiator/support/inverse-composition.lisp::inv-d/dx-apply-fn (nil nil nil (let*) nil nil nil) (((instantiation-fns (` ((inv-f (lambda (x) (, fn))) (inv-f-domain-p (lambda (x) (, fn-domain))) (inv-f-prime (lambda (x) (, fn-derivative))) (inv-f-inverse (lambda (x) ((, inv-fn-symbol) x))) (inv-f-inverse-domain-p (lambda (x) (, inv-fn-domain))) (inv-f-inverse-prime (lambda (x) (/ ((lambda (x) (, fn-derivative)) ((, inv-fn-symbol) x))))))))) nil (`) nil nil nil nil) (nil nil nil ((encapsulate nil (local (in-theory (quote ((,@ (deriv-symbols (first fn))) (,@ (inverse-symbols (first fn))))))) (,@ (use-deriv-unary fn-symbol (quote inv-f-inverse) (` ((, inv-fn-symbol) x)) (` (/ ((lambda (x) (, fn-derivative)) ((, inv-fn-symbol) x)))) inv-fn-domain instantiation-fns)))) nil nil nil) (nil nil (/ ,) nil nil nil nil) ((inv-fn-domain) nil ((lambda (x) (, fn-derivative))) nil nil nil nil) (nil nil ((, inv-fn-symbol)) nil nil nil nil) ((x) nil nil nil nil nil nil)))