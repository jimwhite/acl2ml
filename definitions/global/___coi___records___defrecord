((/coi/records/defrecord.lisp::sbp16 (nil nil nil nil (and) nil nil) (nil nil (integerp) (<= <) nil nil nil) ((x x x) nil (-) (expt) nil nil nil) (nil (2 15) nil (expt) nil nil nil) (nil (2 15) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/records/defrecord.lisp::fix-sbp16 (nil nil nil nil (if) nil nil) ((x) (0) (sbp16) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/records/defrecord.lisp::symbol-list-to-string (nil nil nil nil (if) nil nil) (() nil (consp) nil (concatenate) nil nil) ((list) nil (quote symbol-name recursive-call) nil nil nil nil) ((string) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/records/defrecord.lisp::defrecord-fn (nil nil nil (let*) nil nil nil) (nil nil (`) nil nil nil nil) (nil nil (default rd wr clr rx zp wf wf-forward rd-same-wr-hyps rd-diff-wr-hyps wr-same-rd-hyps wr-diff-wr-hyps wr-same-wr-hyps rd-of-wr-redux wr-same-rd wr-same-wr typep-rd rd-over-clr clr-over-wr clr-over-clr clr-of-clr wr==r-hyp wr==r wr==wr-hyp wr==wr wr==r! clr-differential rx-over-wr rx-over-clr equal-g-to-equal-rd-equal-rx) nil nil nil nil) ((nil) nil (in-theory in-theory in-theory) (or or or or or defthm defthm defthm defthm defthm defthm defthm defthm defthm defthm defthmd defthm defthmd) (join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols defun defun) (join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols defun defun defthm defun defun defthm defthm defthm defthm defun defun defthmd defthm defthm) (join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols join-symbols)) ((default rd wr clr rx name typep name typep name wf base rd wr base rd wr base wr rd base wr wr base wr wr base rd wr base wr rd base wr wr base typep rd base rd clr base clr wr base clr clr base clr clr base wr base wr base wr wr base wr wr base wr base clr base rx wr base rx clr base rd rx x x :rule-classes :forward-chaining :rule-classes (:rewrite :loop-stopper ((b a (, wr)))) :hints (goal :in-theory (disable (, fix) (, rd) (, wr))) :rule-classes :hints (goal :in-theory (enable g-of-s-redux)) :hints (goal :do-not (quote (preprocess))) :hints (Goal :cases ((equal a b))) :hints (Goal :cases ((equal a b)))) nil (` quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote quote , declare , declare , , declare , a declare , , , , , , , , , (, typep) :rewrite , a , , , , , declare , , v1 declare disable , , , , a , , ,) (equal disable implies a let let implies implies implies implies implies equal equal equal equal equal implies equal v equal implies equal implies equal implies g equal equal equal) (join-symbols join-symbols join-symbols join-symbols (, wr)) (and) (disable)) ((name name name name name name name name -zp wf- -forward -same- -hyps -diff- -hyps -same- -hyps -diff- -hyps -same- -hyps -of- -redux -same- -same- - -over- -over- -over- -of- ==r-hyp ==r == -hyp == ==r! -differential -over- -over- equal-g-to-equal- -equal- zp wf (, zp) (, wf) wf-forward wr v m (x (g a m)) rd m (x (g a m)) rd-same-wr-hyps rd-diff-wr-hyps wr-same-rd-hyps wr-diff-wr-hyps wr-same-wr-hyps rd-of-wr-redux wr-same-rd r wr-same-wr typep-rd clr m a m rd-over-clr clr-over-wr clr-over-clr clr-of-clr wr==r-hyp a r wr==r wr==wr-hyp v2 (, wr==wr-hyp) wr==wr wr==r! clr-differential rx m a rx-over-wr rx-over-clr equal-g-to-equal-rd-equal-rx) nil ((, fix) quote quote quote quote (, fix) , consp (, typep) not not (, wf) not not , not (, fix) (, fix) (, fix) , , , , ,) (type type equal equal equal equal equal equal equal equal (, rd) (, rd) :forward-chaining (, rd) (, clr) equal (, clr) (, clr) (, rd) and equal equal equal and equal equal (, clr) (, rx) (, rx) (, rx) (, rx) equal and) (if type if if (, wr) (, wr) (, wr) if if type and) (and type type) nil) ((nil -rd -wr -clr -rx t x x default t x x x t a v m t a m a b a b r a b a a r a y a y r a r :trigger-terms ((, rd) a r) default a1 a1 a a r t v a r v a r t t v1 v2 v1 v2 t r1 a m a a st a a st rd-of-wr-redux rd rx wr clr) nil (car (, zp) (, wf) consp (, typep) not not (, wf) (, wf) car , (, fix) (, fix) (, fix)) ((, rd) equal (, rd) (, rd) equal equal (, rd) (, rd) (, clr) equal (, rd) equal (, clr) equal (, clr) (, clr) (, clr) equal equal equal (, wr==wr-hyp) equal equal tag-location equal (, clr) (, clr) equal equal (, clr) g g equal equal) (if if (, wr) (, wr) (, wr) (, wr) (, wr) (, wr) (, wr) (, wr) (, wr) (, wr==r-hyp) (, wr) (, wr)) nil nil)))