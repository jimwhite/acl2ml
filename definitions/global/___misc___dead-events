((/misc/dead-events.lisp::absolute-event-number (nil nil nil (let) nil nil nil) (((name (if (consp namex) (car namex) namex))) nil nil nil (cond) nil nil) (((getprop name (quote absolute-event-number) nil (quote current-acl2-world) wrld)) nil (quietp t) nil nil nil nil) ((nil) nil nil nil nil (er) nil) ((hard There is no event in the current ACL2 world that ~
                  corresponds to the name ~x0. name) nil (quote) nil nil nil nil) ((recursive-call) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/dead-events.lisp::make-supp-ar-1 (nil nil nil (cond) nil nil nil) (nil nil ((endp supp-alist) t) nil nil nil nil) ((supp-ar) nil nil (let*) nil nil nil) (nil nil nil ((n (absolute-event-number (caar supp-alist) wrld nil))) (recursive-call) nil nil) ((supp-ar wrld) nil (supps supp-ar cdr) nil nil nil nil) ((supp-alist) nil (cdar) (assert$) nil nil nil) ((supp-alist) nil (null) nil nil (aset1) nil)) (/misc/dead-events.lisp::make-supp-ar (nil nil nil (let) nil nil nil) (nil nil ((size (next-absolute-event-number wrld))) nil (make-supp-ar-1) nil nil) ((supp-alist wrld) nil (supp-alist) (compress1) nil nil nil) ((*supp-ar-name*) nil (list) (global-val) nil nil nil) ((wrld) nil (quote) nil nil nil nil) ((proof-supporters-alist :HEADER :DIMENSIONS :MAXIMUM-LENGTH :DEFAULT nil :NAME *supp-ar-name*) nil (list 1+) nil nil nil nil) ((size size) nil nil nil nil nil nil)) (/misc/dead-events.lisp::make-live-names-ar-nil (nil nil nil (cond) nil nil nil) (nil nil ((endp names) t) nil nil nil nil) ((live-names-ar) nil nil (let) nil nil nil) (((n (absolute-event-number (car names) wrld nil))) nil nil (cond) nil nil nil) (nil nil ((aref1 *live-names-ar-name* live-names-ar n) t) nil nil nil nil) (nil nil nil (let) nil (recursive-call) nil) ((supp-ar live-names-ar wrld) nil (cdr (live-names-ar (aset1 *live-names-ar-name* live-names-ar n t))) nil nil (recursive-call) nil)) (/misc/dead-events.lisp::immediate-syntactic-supporters (nil nil nil (cond) nil nil nil) (nil nil ((function-symbolp name wrld) t) nil nil nil nil) (nil nil nil (let let) nil nil nil) (((thm (getprop name (quote theorem) nil (quote current-acl2-world) wrld))) nil ((guard (guard name t wrld))) (cond) (if) nil nil) ((thm nil) nil (anc (equal guard *t*) t) (all-ffn-symbs) nil nil nil) ((anc thm nil) nil nil (all-ffn-symbs) (immediate-instantiable-ancestors) nil nil) ((name wrld nil anc) nil nil nil (guard) nil nil)) (/misc/dead-events.lisp::make-live-names-ar-t (nil nil nil (cond) nil nil nil) (nil nil ((endp names) t) nil nil nil nil) ((live-names-ar) nil nil (let) nil nil nil) (((n (absolute-event-number (car names) wrld nil))) nil nil (cond) nil nil nil) (nil nil ((aref1 *live-names-ar-name* live-names-ar n) t) nil nil nil nil) (nil nil nil (let) nil (recursive-call) nil) ((supp-ar live-names-ar wrld) nil (cdr) ((live-names-ar (aset1 *live-names-ar-name* live-names-ar n t))) nil (recursive-call) nil)) (/misc/dead-events.lisp::make-live-names-ar (nil nil nil (let*) nil nil nil) (nil nil nil ((dimensions (dimensions *supp-ar-name* supp-ar))) (if) nil nil) ((syntaxp) nil (maximum-length live-names-ar) nil nil (make-live-names-ar-t make-live-names-ar-nil) nil) ((names supp-ar live-names-ar wrld names supp-ar live-names-ar wrld) nil nil (maximum-length compress1) nil nil nil) ((*supp-ar-name* supp-ar *live-names-ar-name*) nil (list) nil nil nil nil) (nil nil nil nil nil nil nil) ((:HEADER :DIMENSIONS dimensions :MAXIMUM-LENGTH maximum-length :DEFAULT nil :NAME *live-names-ar-name*) nil nil nil nil nil nil)) (/misc/dead-events.lisp::dead-events-1 (nil nil nil (cond) nil nil nil) (nil nil ((null trips) t) nil nil nil nil) (nil nil nil (let) nil (er) nil) ((hard Implementation error!  Somehow missed event landmark for ~x0. start (trip (car trips))) nil (quote) nil nil (case-match) nil) ((recursive-call trip) nil (((quote event-landmark) (quote global-value) . rest) (name prop . &) &) nil nil nil nil) (nil nil nil (cond) (er) nil (recursive-call)) ((start live-names-ar wrld hard Implementation error: Found non-triple in world!) nil ((eql (access-event-tuple-number rest) start) t cdr quote) nil (if) nil nil)) (/misc/dead-events.lisp::max-live-names-ar-number (nil nil nil (cond) nil nil nil) (nil nil ((endp live-names-ar) t) nil nil nil nil) ((acc) nil nil (recursive-call) nil nil nil) (nil nil (cdr) nil (if) nil nil) ((live-names-ar acc) nil nil (eq max) nil nil nil) ((:HEADER acc) nil (caar caar) nil nil nil nil) ((live-names-ar live-names-ar) nil nil nil nil nil nil)) (/misc/dead-events.lisp::return-tail-of-world (nil nil nil (cond) nil nil nil) (nil nil ((endp wrld) t) nil nil nil nil) (nil nil nil (let) (er) nil nil) ((hard Implementation error: Reached the end of the world! (trip (car wrld))) nil (quote) nil nil (case-match) nil) ((recursive-call trip) nil (((quote event-landmark) (quote global-value) . rest) (& & . &) &) nil nil nil nil) (nil nil nil (cond recursive-call) (er) nil nil) ((max-live-event-number hard Implementation error: Found non-triple in world!) nil ((eql (access-event-tuple-number rest) max-live-event-number) t cdr quote) nil nil nil nil)) (/misc/dead-events.lisp::dead-events-fn (nil nil nil (let) nil nil nil) (((ctx (quote dead-events))) nil nil nil nil (cond) nil) (nil nil ((null names) (not (symbol-listp names)) (and (not redef-ok) (global-val (quote redef-seen) wrld)) t) nil nil nil nil) (nil nil nil (let*) (er er) (er) nil) ((hard ctx At least one name must be supplied to DEAD-EVENTS. hard ctx The argument of DEAD-EVENTS must evaluate to a true list of ~
           symbols, but instead it evaluates to ~x0. names hard ctx Redefinition has taken place in the current ACL2 world.  However, ~
           the DEAD-EVENTS utility has been designed under the assumption ~
           that there has not been any redefinition.  If you wish to risk ~
           hard errors and surprising results, use keyword parameter ~
           :REDEF-OK T.) nil nil nil nil ((supp-ar (make-supp-ar wrld))) (dead-events-1)) ((start live-names-ar trips wrld nil) nil (live-names-ar start max trips) nil nil nil nil) (nil nil nil (max-live-names-ar-number return-tail-of-world) (cond) (make-live-names-ar) nil)) (/misc/dead-events.lisp::event-supports-fn (nil nil nil (let) nil nil nil) (((supporters (cdar supp-alist))) nil nil nil (if) nil nil) ((events-acc) nil (endp) nil (recursive-call) nil nil) ((supp-alist name) nil (cdr) nil (if) nil nil) ((supp-alist events-acc) nil nil (member-eq cons) nil nil nil) ((name supporters events-acc) nil (caar) nil nil nil nil) ((supp-alist) nil nil nil nil nil nil)) (/misc/dead-events.lisp::event-supports-fn-lst (nil nil nil (cond) nil nil nil) (nil nil ((endp names) t) nil nil nil nil) ((acc) nil nil nil (recursive-call) nil nil) ((supp-alist) nil (cdr) (cons) nil nil nil) ((names acc) nil nil (cons) nil nil nil) (nil nil (car) nil (event-supports-fn) nil nil) ((names supp-alist nil) nil (car) nil nil nil nil)))