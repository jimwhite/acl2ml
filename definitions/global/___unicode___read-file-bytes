((/unicode/read-file-bytes.lisp::tr-read-byte$-all (nil nil nil nil (if) nil nil) (nil nil (mbt) (mv) (mv-let) nil nil) ((nil state) nil (state-p byte) (read-byte$) (if) nil nil) ((state state channel state) nil nil (eq mv) (recursive-call) nil nil) ((byte nil state channel state) nil (reverse) (cons) nil nil nil) ((acc byte acc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/unicode/read-file-bytes.lisp::read-byte$-all (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if tr-read-byte$-all) nil nil) ((channel state nil) nil (state-p) (mv) (mv-let) nil nil) ((state nil state) nil (byte) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (mv-let) nil nil) ((byte nil state) nil (rest) (recursive-call mv) nil nil nil) ((state channel state state) nil nil (cons) nil nil nil)) (/unicode/read-file-bytes.lisp::read-file-bytes (nil nil nil nil (mv-let) nil nil) (nil nil (channel) nil (open-input-channel if) nil nil) ((state filename :byte state channel) nil nil (mv) (mv-let) nil nil) ((Error opening file. state) nil (data) (read-byte$-all let) nil nil nil) ((state channel state (state (close-input-channel channel state))) nil nil (mv) nil nil nil) ((data state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))