((/make-event/inline-book.lisp::remove-entry-by-key (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((alist) nil (cdr) (eq cons) nil nil nil) ((key alist) nil (caar car) (recursive-call) nil nil nil) ((alist alist key) nil (cdr) nil nil nil nil) ((alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/make-event/inline-book.lisp::generate-add-include-book-dir-calls (nil nil nil nil (if) nil nil) ((nil) nil nil (or cons) nil nil nil) ((t) nil (endp ` recursive-call) nil nil nil nil) ((dir-alist) nil (cdr) (add-include-book-dir) nil nil nil) ((dir-alist) nil (, ,) nil nil nil nil) (nil nil (caar cdar) nil nil nil nil) ((dir-alist dir-alist) nil nil nil nil nil nil)) (/make-event/inline-book.lisp::compute-inline-book-fn (nil nil nil (let*) nil nil nil) (nil nil nil (er-let*) nil ((ctx (quote inline-book))) nil) (((dir-value (cond (dir (include-book-dir-with-chk soft ctx dir)) (t (value (cbd)))))) nil (wrld0 saved-acl2-defaults-table saved-acl2-defaults-table-minus-book-dir-alist saved-book-dir-alist) nil nil (mv-let) nil) (nil nil (w cdr declare) (table-alist remove-entry-by-key full-book-name) (er-progn) nil (parse-book-name)) ((state wrld0 :INCLUDE-BOOK-DIR-ALIST saved-acl2-defaults-table directory-name familiar-name dir-value user-book-name .lisp ctx state) nil (quote) (assoc-eq ignore er-let*) (chk-input-object-file) (chk-book-name) nil) ((acl2-defaults-table :include-book-dir-alist saved-acl2-defaults-table directory-name familiar-name user-book-name full-book-name ctx state full-book-name ctx state (ev-lst (read-object-file full-book-name ctx state))) nil (value) nil nil nil nil) (nil nil (`) nil nil nil nil)))