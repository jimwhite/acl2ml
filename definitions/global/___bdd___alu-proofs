((/bdd/alu-proofs.lisp::v-alu1 (nil nil nil nil nil nil nil) (nil nil ((v-equal op (quote (nil nil nil nil))) (v-equal op (quote (t nil nil nil))) (v-equal op (quote (nil t nil nil))) (v-equal op (quote (t t nil nil))) (v-equal op (quote (nil nil t nil))) (v-equal op (quote (t nil t nil))) (v-equal op (quote (nil t t nil))) (v-equal op (quote (t t t nil))) (v-equal op (quote (nil nil nil t))) (v-equal op (quote (t nil nil t))) (v-equal op (quote (nil t nil t))) (v-equal op (quote (t t nil t))) (v-equal op (quote (nil nil t t))) (v-equal op (quote (t nil t t))) (v-equal op (quote (nil t t t))) t) nil nil nil nil) (nil nil (cvzbv-inc cvzbv-neg cvzbv-dec cvzbv-v-asr cvzbv-v-lsr cvzbv-v-not) (cvzbv-v-ror) (cvzbv cvzbv-v-adder cvzbv-v-adder cvzbv-v-subtracter cvzbv-v-subtracter cvzbv cvzbv cvzbv cvzbv) nil nil) ((nil nil a c a b nil a b a a c a b nil a b c a a a nil nil nil nil nil nil a nil nil) nil (v-buf v-buf) (v-xor v-or v-and) nil nil nil) ((a a b a b a b a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu-proofs.lisp::shuffle (nil nil nil (cond) nil nil nil) (nil nil ((atom lst1) t) nil nil nil nil) ((nil) nil nil nil (list*) nil nil) (nil nil (car car) (recursive-call) nil nil nil) ((lst1 lst2) nil (cdr cdr) nil nil nil nil) ((lst1 lst2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))