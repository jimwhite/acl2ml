((/centaur/esim/esim-sexpr.lisp::eapply-sexpr (nil nil nil nil (mv) nil nil) (nil nil nil (gpl gpl gpl) nil nil nil) ((:nst x :out x :int x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/centaur/esim/esim-sexpr.lisp::mk-symbol-substitution (nil nil nil (b*) nil nil nil) (nil nil nil (cons) nil (((when (Atom names)) nil)) nil) (nil nil (name (unless (str::substrp str name)) new-name sym) (cons) (recursive-call) nil nil) ((sym str repl) nil (symbol-name car cdr) (intern-in-package-of-symbol) (recursive-call str::strsubst) nil nil) ((str repl str repl name new-name names names) nil (car cdr car) nil nil nil nil) ((names names names) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr.lisp::filter-symbols (nil nil (Declare) nil nil nil nil) (nil nil nil (Xargs) nil nil nil) ((:guard t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr.lisp::replace-templates (nil nil nil (b*) nil nil nil) (nil nil nil (append) nil nil (((when (atom forms)) forms))) (nil nil ((unless (and (consp (car forms)) (eq (caar forms) (quote template)))) template-form feature-form subforms (unless (check-features features feature-form))) (recursive-call recursive-call) nil nil nil) ((features subforms features) nil (car cadr cddr cdr) (cons recursive-call) nil nil nil) ((forms template-form template-form features forms) nil (cdr) (recursive-call recursive-call) nil nil nil) ((features features forms) nil (car cdr) nil nil nil nil) ((forms forms) nil nil nil nil nil nil)))