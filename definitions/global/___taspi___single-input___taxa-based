((/taspi/single-input/taxa-based.lisp::get-top-containing-subtree-of-taxon (nil nil nil nil (if) nil nil) (nil nil (consp) nil (if if) nil nil) ((tree tree nil) nil (car) (member-gen recursive-call equal) nil nil nil) ((taxon tree taxon tree taxon) nil (mytips cdr) nil nil nil nil) ((tree) nil (car) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::get-top-containing-subtree-of-taxon-brlens-helper (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((tree) nil (car) (member-gen recursive-call) nil nil nil) ((taxon tree taxon) nil (mytips-brlens cdr) nil nil nil nil) ((tree) nil (car) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::get-top-containing-subtree-of-taxon-brlens (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((tree) nil (consp) (get-top-containing-subtree-of-taxon-brlens-helper get-top-containing-subtree-of-taxon-brlens-helper) nil nil nil) ((taxon tree taxon) nil (cdr car) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::len-path-to-taxon (nil nil nil nil (if) nil nil) (nil nil (quote) (taspip) (if) nil nil) ((t tree nil need-valid-tree) nil nil (member-gen) (if) nil nil) ((taxon acc) nil (mytips) (or let) nil nil nil) ((tree (container (get-top-containing-subtree-of-taxon taxon tree))) nil nil (member-gen equal) (recursive-call) nil nil) ((taxon tree taxon tree taxon container) nil (1+) nil nil nil nil) ((acc) nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::len-path-to-taxon-brlens (nil nil nil nil (if) nil nil) (nil nil (quote) (member-gen) (if) nil nil) ((taxon need-taxon-in-tree) nil (mytips-brlens) (member-gen let) (if) nil nil) ((tree taxon tree (container (get-top-containing-subtree-of-taxon-brlens taxon tree))) nil (acl2-numberp quote) (+) (if) nil nil) ((acc need-treep-num-brlens) nil (cdr cdr consp quote) nil (if) nil nil) ((tree tree tree need-treep-num-brlens) nil (acl2-numberp) nil (recursive-call recursive-call) nil nil) ((taxon container taxon container acc) nil (cdr) (+) nil nil nil)) (/taspi/single-input/taxa-based.lisp::least-common-ancestor (nil nil nil nil (if) nil nil) ((curLeast) nil (consp) nil (if) nil nil) ((tree flg) nil nil nil (if if) nil nil) ((curLeast) nil nil (and and) nil nil (recursive-call recursive-call recursive-call)) ((nil a b tree tree t a b nil a b curLeast) nil (car car cdr) (member-gen member-gen member-gen member-gen) nil nil nil) ((a b a b tree tree tree) nil (mytips mytips mytips mytips) nil nil nil nil) ((tree tree) nil (car car) nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::lca (nil nil nil nil nil nil (least-common-ancestor)) ((t a b tree nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::path-distance-no-brlens (nil nil nil nil (if) nil nil) (nil (0) nil (equal let) nil nil nil) ((a b (lca (lca a b tree))) nil nil (+) nil nil nil) (nil nil nil nil (len-path-to-taxon len-path-to-taxon) nil nil) ((a lca b lca) (1 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::path-distance-brlens (nil nil nil nil (if) nil nil) (nil (0) nil (equal let*) nil nil nil) ((a b) nil nil ((lca (lca a b tree))) (if) nil nil) (nil nil (part1 part2 quote) (and +) nil nil nil) ((part1 part2 need-taxa-in-tree) nil (acl2-numberp acl2-numberp) nil (len-path-to-taxon-brlens len-path-to-taxon-brlens) nil nil) ((a lca b lca part1 part2) (0 0) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::find-max-pair-dist-help (nil nil nil nil (if) nil nil) (nil (0) nil (and) (if) nil nil) ((curMax) nil (consp) (taspip member-gen) (if) nil nil) ((t tree taxon rest) (0) (mytips) (member-gen) nil (recursive-call) nil) ((tree taxon tree) nil (car mytips cdr) (max) nil nil nil) ((rest tree rest curMax) nil nil nil (path-distance-no-brlens) nil nil) ((taxon tree) nil (car) nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::find-max-pair-dist-help-brlens (nil nil nil nil (if) nil nil) ((curMax) nil (consp) (let) nil nil nil) ((rest (newMax? (path-distance-brlens taxon (car rest) tree))) nil nil nil (if) nil nil) (nil (0) (rationalp) nil nil (recursive-call) nil) ((newMax? taxon tree) nil (cdr) (max) nil nil nil) ((rest curMax newMax?) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::find-max-pair-dist (nil nil nil nil (if) nil nil) ((curMax) nil (consp) nil (recursive-call) nil nil) ((taxa tree) nil (cdr) nil nil (find-max-pair-dist-help) nil) ((taxa tree curMax) nil (car cdr) nil nil nil nil) ((taxa taxa) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::find-max-pair-dist-brlens (nil nil nil nil (if) nil nil) ((curMax) nil (consp) nil (recursive-call) nil nil) ((taxa tree) nil (cdr) nil nil (find-max-pair-dist-help-brlens) nil) ((taxa tree curMax) nil (car cdr) nil nil nil nil) ((taxa taxa) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::get-containing-subtree-of-taxa-help (nil nil nil nil (if) nil nil) ((nil) nil nil (subset) (if) nil nil) ((taxa curTree) nil (mytips consp) nil (if) nil nil) ((curTree tree) nil nil (subset) (recursive-call recursive-call) nil nil) ((taxa taxa taxa curTree) nil (mytips car car cdr) nil nil nil nil) ((tree tree tree) nil (car) nil nil nil nil) ((tree) nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::get-containing-subtree-of-taxa (nil nil nil nil (get-containing-subtree-of-taxa-help) nil nil) ((taxa tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::get-containing-subtree-of-taxa-brlens (nil nil nil (get-containing-subtree-of-taxa) nil nil nil) ((taxa) nil (remove-brlens) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::monophyletic? (nil nil nil (let) nil nil nil) (((subtree (get-containing-subtree-of-taxa taxa tree))) nil nil nil (if) nil nil) ((subtree nil) nil nil (perm) nil nil nil) ((taxa) nil (mytips) nil nil nil nil) ((subtree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::monophyletic?-brlens (nil nil nil (monophyletic?) nil nil nil) ((taxa) nil (remove-brlens) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::check-for-fringe-membership (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((bfringes t) nil nil (or) (recursive-call) nil nil) ((taxa not-taxa) nil (cdr) (equal equal) nil nil nil) ((taxa not-taxa bfringes) nil (car car) nil nil nil nil) ((bfringes bfringes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::fringe-based-monophyletic-check (nil nil nil nil (if) nil nil) (nil nil nil (let perm) nil nil nil) ((taxa tree) nil (treep consp int-symlist consp treep consp treep) (<= (bfringes (term-to-bfringes tree taxa-list))) (check-for-fringe-membership) nil nil) ((tree tree taxa-list taxa taxa bfringes) (2) (len taxa-fringe not-taxa-fringe car car) (difference difference) nil nil nil) ((taxa-list taxa-list taxa taxa-list taxa taxa-fringe not-taxa-fringe) nil nil (term-to-bfringes term-to-bfringes) nil nil nil) ((taxa taxa-list taxa-list) nil nil (difference) nil nil nil) ((taxa-list taxa) nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::root-to-monophyletic? (nil nil nil nil (if) nil nil) (nil nil (consp quote) nil (if) nil nil) ((tree not-unrooted-tree) nil nil (or monophyletic?) (fringe-based-monophyletic-check) nil nil) ((taxa tree taxa) nil (consp mytips cdr) (member-gen) nil nil nil) ((taxa tree tree) nil (car car) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::root-to-monophyletic?-brlens (nil nil nil (root-to-monophyletic?) nil nil nil) ((taxa) nil (remove-brlens) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::project (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) ((nil) nil (atom atom) (let let) (if) nil nil) ((x x nil (lst (project nil keep x)) x) nil ((term (project t keep (car x)))) (member-gen) (if if) nil nil) ((x keep nil rest) nil (atom rest null) (cons) (if) nil nil) ((lst lst term term rest) nil (atom car) nil (recursive-call) nil nil) ((lst nil keep) nil (cdr cdr) nil nil nil nil)) (/taspi/single-input/taxa-based.lisp::project-with-normalize (nil nil nil nil (if) nil nil) ((Error: bad arguments in project-with-normalize) nil nil (let) (and) nil nil) (((ordered-projection (order-by-merge (project t keep tree) (taxa-list-to-taxon-index taxa-list)))) nil (good-taxon-index-halist) (taspip subset) (if) nil nil) ((t rooted? ordered-projection) nil (taxa-list-to-taxon-index mytips get-taxa-from-taxon-index) (mv-root) (project) nil nil) ((taxa-list t keep tree ordered-projection) nil (taxa-list-to-taxon-index taxa-list-to-taxon-index) nil (project) nil nil) ((t keep tree taxa-list taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))