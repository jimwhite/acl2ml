((/taspi/tree-generation/distance-based/naive-quartet-method.lisp::quartet-p (nil nil nil (case-match) nil nil nil) ((x) nil (((a b) (c d))) nil nil nil nil) (nil nil nil nil nil (and) nil) (nil nil (natp natp natp natp) nil nil nil nil) ((a b c d) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::pair-p (nil nil nil (case-match) nil nil nil) ((x) nil ((a b)) nil nil nil nil) (nil nil nil (and) nil nil nil) (nil nil (natp natp) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::quartet-list-p (nil nil nil nil (if) nil nil) (nil nil (atom) (equal and) nil nil nil) ((x x nil) nil (quartet-p recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::nat-listp (nil nil nil (cond) nil nil nil) (nil nil ((atom l) t) nil nil nil nil) (nil nil nil (eq and) nil nil nil) ((l nil) nil (natp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::dist-matrix-helper (nil nil nil nil (if) nil nil) (nil nil (atom) (equal) (and) nil nil) ((M M nil) nil (nat-listp) (= recursive-call) nil nil nil) ((n n) nil (car len cdr) nil nil nil nil) ((M M) nil (car) nil nil nil nil) ((M) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::dist-matrix-p (nil nil nil (dist-matrix-helper) nil nil nil) ((M) nil (len) nil nil nil nil) ((M) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::indexp (nil nil nil (and) nil nil nil) (nil nil (natp) (<) nil nil nil) ((n n max) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::get-distance (nil nil nil (nth) nil nil nil) ((j) nil nil (nth) nil nil nil) ((i M) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::quartet-guard (nil nil nil (and) nil nil nil) (nil nil (dist-matrix-p) (let) nil nil nil) ((M (n (len M))) nil nil nil nil nil (and)) (nil nil (no-duplicatesp) (indexp indexp indexp indexp) nil nil nil) ((i n j n k n l n) nil nil nil nil (list) nil) ((i j k l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::get-quartet (nil nil nil (let) nil nil nil) (nil nil nil ((sum1 (+ (get-distance M i j) (get-distance M k l)))) (if) nil nil) (nil nil (sum2 sum3) (<) (if if) nil nil) ((sum1 sum2) nil (` ` ` `) (+ + < <) nil nil nil) ((sum1 sum3 sum2 sum3) nil (((, i) (, j)) ((, i) (, l)) ((, i) (, k)) ((, i) (, l))) nil (get-distance get-distance get-distance get-distance) nil nil) ((M i k M j l M i l M j k) nil ((, k) (, j) (, j) (, j)) nil nil nil nil) (nil nil (, , , ,) nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::get-quartets (nil nil nil (let) nil nil nil) (nil nil ((maxidx (1- (len M)))) nil (if) nil nil) ((nil) nil (q mbt) nil nil nil (cond)) (nil nil ((< l maxidx) (< k (1- l)) (< j (1- k)) (< i (1- j)) t) nil nil nil (get-quartet quartet-guard)) ((M i j k l M i j k l) nil (list) (cons cons cons cons) nil nil nil) ((q q q q q) nil nil nil nil nil (recursive-call recursive-call recursive-call recursive-call)) ((M i j k M i j M i M) nil (1+ 1+ 1+ 1+) (+ + + + + +) nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::quartet-member (nil nil nil (or) nil nil nil) (nil nil nil (member member) nil nil nil) ((i i) nil (car cadr) nil nil nil nil) ((quartet quartet) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::quartets-member (nil nil nil nil (if) nil nil) ((nil) nil (atom) (or) nil nil nil) ((quartets) nil nil (quartet-member recursive-call) nil nil nil) ((i i) nil (car cdr) nil nil nil nil) ((quartets quartets) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::check-sibling (nil nil nil (let) nil nil nil) (nil nil ((i (car pair))) (and) nil nil nil) (nil nil (j not not) nil nil nil nil) (nil nil (cadr) (and and) nil nil nil) ((pair) nil nil (member member member member) nil nil nil) ((i j i j) nil (car cadr cadr car) nil nil nil nil) ((quartet quartet quartet quartet) nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::check-siblings (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((quartets) nil nil (check-sibling recursive-call) nil nil nil) ((pair pair) nil (car cdr) nil nil nil nil) ((quartets quartets) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::maybe-pair-and-quartet-listp (nil nil nil (or) nil nil nil) (nil nil nil (equal) (and) nil nil) ((x nil) nil (consp quartet-list-p) (or) nil nil nil) ((x) nil (quartet-p cdr) (let) nil nil nil) (((carx (car x)) x) nil (car) (case-match) nil nil nil) ((x carx) nil (((a b))) nil nil nil nil) (nil nil nil (and) nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::find-siblings (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((rest (pair (caar rest))) nil nil nil (if) nil nil) ((pair) nil nil (check-siblings) (if) nil nil) ((pair quartets) nil nil (<= recursive-call recursive-call) nil nil nil) ((quartets quartets) (1) (len cdr) (cons) nil nil nil) ((rest) nil (car cdar cdr) nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::remove-from-quartets (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((quartets) nil nil (quartet-member recursive-call cons) nil nil nil) ((i i) nil (car cdr car) (recursive-call) nil nil nil) ((quartets quartets quartets i) nil (cdr) nil nil nil nil) ((quartets) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::add-sibling (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) ((nil) nil (atom atom) (cons) (if) (recursive-call) nil) ((tree tree curr new tree nil tree) nil nil (eql list) nil (recursive-call recursive-call) nil) ((tree curr curr new curr new t curr new nil) nil (car cdr) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::naive-quartet-recursion (nil nil nil nil (if) nil nil) ((taxa) nil (atom) nil (if) nil nil) ((quartets nil) nil (mbt) (let*) nil nil nil) (((siblings (find-siblings quartets quartets))) nil (quartet-list-p) nil (if) nil nil) ((quartets siblings taxa) nil nil (let*) nil nil nil) (nil nil nil ((quartets (remove-from-quartets (car siblings) quartets))) nil (add-sibling) nil) ((tree t) nil (taxa tree cadr car) nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::list-up-to-n-helper (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n) nil (1- recursive-call) nil nil nil nil) ((n) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::list-up-to-n (nil nil (reverse) nil nil nil nil) (nil nil (list-up-to-n-helper) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/distance-based/naive-quartet-method.lisp::naive-quartet-method (nil nil nil (let*) nil nil nil) (nil nil nil ((n (len M)) naive-quartet-recursion) nil nil nil) ((taxa quartets) nil (taxa quartets) nil nil nil nil) (nil nil (list-up-to-n) nil nil nil (get-quartets)) ((n M) (0 1 2 3) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))