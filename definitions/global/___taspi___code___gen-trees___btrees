((/taspi/code/gen-trees/btrees.lisp::ilog2-help (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) (nil (0) nil (+) nil nil nil) (nil (1) (recursive-call) nil nil nil nil) (nil nil nil (floor) nil nil nil) ((n) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::ilog2 (nil nil nil (cond) nil nil nil) (nil nil ((< n 1) t) nil nil nil nil) (nil (0) (ilog2-help) nil nil nil nil) (nil nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::bits-to-tree (nil nil nil nil (if) nil nil) ((nil) nil nil (or) (if) nil nil) (nil nil (not) (< equal hons let) nil nil nil) ((log2-len-taxa-list log2-len-taxa-list (value (expt 2 log2-len-taxa-list))) (0 0) (integerp oddp evenp) nil (if) nil nil) ((log2-len-taxa-list i i) nil nil (< hons hons) nil nil nil) ((i value nil nil) nil nil (recursive-call recursive-call) nil nil nil) ((i) nil (1- 1-) (-) nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::taxa-list-to-tree-alist-help (nil nil nil (cond) nil nil nil) (nil nil ((atom taxa-list) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil nil (cons) (recursive-call) nil nil) ((num-of-bits) nil (car cdr 1+) (bits-to-tree) nil nil nil) ((taxa-list pos num-of-bits taxa-list pos) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::taxa-list-to-tree-alist (nil nil nil nil (taxa-list-to-tree-alist-help) nil nil) ((taxa-list) (0) (1-) nil nil nil nil) (nil nil (ilog2) nil nil nil nil) (nil nil (len) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::build-taxa-list-tree-help (nil nil nil nil (if) nil nil) (nil nil (zp cdr) (hons) nil nil nil) ((tree-depth) nil nil (het) (recursive-call recursive-call) nil nil) ((pos index-to-taxon index-to-taxon pos index-to-taxon) nil (1- 1-) (+) nil nil nil) ((tree-depth pos tree-depth) nil nil (expt) nil nil nil) (nil (2) (1-) nil nil nil nil) ((tree-depth) nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::build-taxa-list-tree (nil nil nil (let) nil nil nil) (nil nil ((tree-depth (ilog2 (len taxa-list)))) nil (build-taxa-list-tree-help) nil nil) ((tree-depth index-to-taxon) (0) (index-to-taxon) nil nil nil nil) (nil nil (taxa-list-to-index-taxon) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::balanced-tree-helper (nil nil nil nil (if) nil nil) (nil nil (zp atom) nil (and) nil nil) ((level x) nil (consp) (recursive-call recursive-call) nil nil nil) ((x) nil (car 1- cdr 1-) nil nil nil nil) ((x level x level) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::depth (nil nil nil nil (if) nil nil) (nil (0) (consp 1+) nil nil nil nil) ((x) nil nil (max) nil nil nil) (nil nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::balanced-tree (nil nil nil (balanced-tree-helper) nil nil nil) ((x) nil (depth) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-trees/btrees.lisp::good-depths (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil nil (<= recursive-call) nil nil nil) ((y) nil (depth depth cdr) nil nil nil nil) ((y x) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))