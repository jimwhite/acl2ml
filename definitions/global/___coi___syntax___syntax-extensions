((/coi/syntax/syntax-extensions.lisp::syn::alist-binding (nil nil nil nil (if) nil nil) ((nil) nil (`) (and) nil nil nil) ((((, symbol) , symbol)) nil (symbolp) (equal) nil nil nil) ((alist1) nil (symbol-name symbol-name) nil nil nil nil) ((alist1 symbol) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax-extensions.lisp::mv-equality-terms (nil nil nil nil (if) nil nil) ((nil) nil (zp) (let) nil nil nil) ((vals (vals (1- vals))) nil nil (let) nil nil nil) (((term (` (equal (val (, vals) ((, fname) (, alist-1) (,@ args))) (val (, vals) ((, fname) (, alist) (,@ args))))))) nil nil (cons) nil nil nil) ((term) nil nil nil nil nil (recursive-call)) ((vals fname alist-1 alist args) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/syntax/syntax-extensions.lisp::equality-terms (nil nil nil nil (if) nil nil) (nil nil (` `) (<) nil nil nil) (nil (2) (nfix and) (equal) nil nil nil) ((vals) nil (,@) ((, fname) (, fname)) nil nil nil) (nil nil (, ,@ , ,@) nil nil nil (mv-equality-terms)) ((alist-1 args alist args vals fname alist-1 alist args) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))