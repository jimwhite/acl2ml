((/nonstd/misc/defattach-bang.lisp::defattach!-defun (nil nil nil (let) nil nil nil) (((cl (getprop name (quote symbol-class) nil (quote current-acl2-world) wrld))) nil nil nil nil (case) nil) ((cl) nil (:ideal :common-lisp-compliant t) nil nil nil nil) ((nil) nil nil (let) nil (er) nil) (((formals (formals name wrld)) hard ctx Not a logic-mode function symbol: ~x0 name) nil nil nil nil nil (list)) ((formals) nil (quote quote) (intern-in-package-of-symbol list) nil nil nil) ((defun name) nil (declare quote) (cons) (concatenate) nil nil)) (/nonstd/misc/defattach-bang.lisp::defattach!-event (nil nil nil (cond) nil nil nil) (nil nil ((or (endp args) (keywordp (car args))) t) nil nil nil nil) (nil nil nil (and let*) nil nil nil) ((defs) nil nil (cons cond) nil nil ((arg (car args)))) (nil nil (quote f g ctx def new-args def t) (append) nil nil nil) ((progn defs) nil (list car cadr quote) nil (defattach!-defun if) (recursive-call recursive-call) nil) ((arg arg defattach! g ctx wrld def wrld new-args wrld defs new-args) nil (cdr cdr) (cons cons cons cons) nil nil nil)) (/nonstd/misc/defattach-bang.lisp::defattach!-fn (nil nil (`) nil nil nil nil) (nil nil (make-event) nil nil nil nil) (nil nil nil (let) nil nil nil) (((event (defattach!-event (quote (, args)) (w state) nil nil))) nil nil (or) nil nil nil) ((event) nil nil (cons) nil nil nil) (nil nil (quote quote) nil nil nil nil) ((defattach) nil (,) nil nil nil nil)))