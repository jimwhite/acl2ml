((/security/des/des.lisp::apply-table (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((table) nil nil (Nth recursive-call) nil nil nil) ((x-bits x-bits) nil (cdr) (-) nil nil nil) ((table) (1) (car) nil nil nil nil) ((table) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::IP (nil nil nil nil (if) nil nil) ((nil) nil (not) (apply-table) nil nil nil) ((x-bits *IP-table*) nil (64-bitp) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::mem (nil nil nil nil (if) nil nil) ((nil) nil (atom) (or) nil nil nil) ((x) nil nil (equal recursive-call) nil nil nil) ((e e) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::del (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x) nil (cdr) (equal cons) nil nil nil) ((e x) nil (car car) (recursive-call) nil nil nil) ((x x e) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::perm (nil nil nil nil (if) nil nil) (nil nil (atom atom) (and) nil nil nil) ((x y) nil nil (member recursive-call) nil nil nil) ((y) nil (car cdr) (del) nil nil nil) ((x x y) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::IP-inverse (nil nil nil nil (if) nil nil) ((nil) nil (not) (apply-table) nil nil nil) ((x-bits *IP-inverse-table*) nil (64-bitp) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::gen (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (GL::g-number recursive-call) nil nil nil nil) (nil nil (list) (-) nil nil nil) ((n) (1) nil (list) nil nil nil) (nil nil nil (- -) nil nil nil)) (/security/des/des.lisp::expand (nil nil nil nil (if) nil nil) ((nil) nil (not) (apply-table) nil nil nil) ((x-bits *expand-table*) nil (32-bitp) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::permute (nil nil nil nil (if) nil nil) ((nil) nil (not) (apply-table) nil nil nil) ((x-bits *permute-table*) nil (32-bitp) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::permuted-choice-1 (nil nil nil nil (if) nil nil) ((nil) nil (not) (append) nil nil nil) (nil nil (64-bitp) (apply-table apply-table) nil nil nil) ((key-bits key-bits *permuted-choice-1-left-table* key-bits *permuted-choice-1-right-table*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::permuted-choice-2 (nil nil nil nil (if) nil nil) ((nil) nil (not) (apply-table) nil nil nil) ((key-bits *permuted-choice-2-table*) nil (56-bitp) nil nil nil nil) ((key-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::get-xx (nil nil nil (+) nil nil nil) (nil nil nil (* Nth) nil nil nil) ((x-bits) (2 5) nil (Nth) nil nil nil) ((x-bits) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::get-yyyy (nil nil nil nil nil (+) nil) (nil nil nil (* * * Nth) nil nil nil) ((x-bits) (8 4 2 4) nil (Nth Nth Nth) nil nil nil) ((x-bits x-bits x-bits) (1 2 3) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::apply-subst-table (nil nil nil nil (if) nil nil) ((nil) nil (not number-to-4bits-msb) nil nil nil nil) (nil nil (6-bitp) (Nth) nil nil nil) ((x-bits) nil (get-yyyy) (Nth) nil nil nil) ((x-bits table) nil (get-xx) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::rotate-bits (nil nil nil nil (if) nil nil) ((encrypt) nil nil (append append) nil nil nil) (nil nil nil (get-nth prefix-nth get-nth prefix-nth) nil nil nil) ((x-bits num x-bits num x-bits x-bits) nil nil (- -) nil nil nil) ((num num) nil (len len) nil nil nil nil) ((x-bits x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::get-key-rotation-list (nil nil nil nil (if) nil nil) ((nil) nil (not) nil (if) nil nil) ((encrypt *key-rotation*) nil (booleanp reverse) nil nil nil nil) ((encrypt *key-rotation*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::get-round-key (nil nil nil (let*) nil nil nil) (nil nil nil (append) ((kLeft (prefix-nth kCurr 28))) nil nil) (nil nil (kRight key-rotation-list num-shift) nil (rotate-bits rotate-bits) nil nil) ((kLeft num-shift encrypt kRight num-shift encrypt) nil (get-key-rotation-list) (get-nth Nth) nil nil nil) ((kCurr encrypt round key-rotation-list) (28) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::apply-S-boxes (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((6-bit-groups) nil nil (apply-subst-table recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((6-bit-groups subst-tables 6-bit-groups subst-tables) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::48-to-6bit-groups (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x-bits) nil nil (<= cons cons) nil nil nil) ((x-bits nil) (6) (len recursive-call) (prefix-nth) nil nil nil) ((x-bits x-bits) (6) nil (get-nth) nil nil nil) ((x-bits) (6) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::bits-to-64bit-blocks (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x-bits) nil nil (<= cons cons) nil nil nil) ((x-bits nil) (64) (len recursive-call) (prefix-nth) nil nil nil) ((x-bits x-bits) (64) nil (get-nth) nil nil nil) ((x-bits) (64) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::feistel-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (or let*) nil nil nil) (nil nil (not not permute) nil ((expanded-bits (expand half-block-bits))) nil nil) ((S-boxes-output) nil (32-bitp 48-bitp xor-bits 6bit-groups S-boxes-output) nil nil nil nil) ((half-block-bits subkey-48) nil (48-to-6bit-groups) (xor-bit-list apply-S-boxes) nil nil nil) ((expanded-bits subkey-48 xor-bits 6bit-groups *S-boxes*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::encrypt-decrypt-64bit-block1 (nil nil nil nil (if) nil nil) ((nil) nil nil (or) (if) nil nil) (nil nil (not not) (< let* cons) nil nil nil) ((iteration) (16) (natp booleanp cdr car) nil nil (recursive-call) ((shifted-key-bits (get-round-key key-bits iteration encrypt)))) ((iteration encrypt new-64bit-block shifted-key-bits encrypt 64bit-block 64bit-block) nil (subkey-iter feistel-output new-car new-cdr new-64bit-block) (+) nil nil nil) ((iteration) (1) (permuted-choice-2 cdr) (feistel-fn xor-bit-list cons) nil nil nil) ((shifted-key-bits subkey-iter 64bit-block feistel-output new-car new-cdr) nil (cdr car) nil nil nil nil)) (/security/des/des.lisp::encrypt-decrypt-64bit-block (nil nil nil nil (if) nil nil) ((nil) nil nil (let*) (or) nil nil) (nil nil (not not not IP-inverse) ((initial-permuted-bits (IP 64bit-block))) nil nil nil) (nil nil (64-bitp 56-bitp booleanp block-bits-proper encrypted-before-final) (append) nil nil nil) ((64bit-block key-bits encrypt) nil (car cdr) (cons) nil (encrypt-decrypt-64bit-block1) nil) ((block-bits-proper key-bits encrypt encrypted-before-final encrypted-before-final) (0) nil (prefix-nth get-nth) nil nil nil) ((initial-permuted-bits initial-permuted-bits) (32 32) nil nil nil nil nil)) (/security/des/des.lisp::DES-encrypt-decrypt (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((message-64bit-blocks) nil nil nil (encrypt-decrypt-64bit-block recursive-call) nil nil) ((key-56bit encrypt key-56bit encrypt) nil (car cdr) nil nil nil nil) ((message-64bit-blocks message-64bit-blocks) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/des/des.lisp::DES (nil nil nil nil (if) nil nil) ((nil) nil (not) (let) nil nil nil) (nil nil (booleanp (message-bits (bytes-to-8bits-msb message-bytes))) nil (if) nil nil) ((encrypt nil) nil (key-bits) (or let*) nil nil nil) (nil nil (bytes-to-8bits-msb not not (message-64bit-blocks (bits-to-64bit-blocks message-bits)) bits-to-bytes) nil nil nil nil) ((key-bytes) nil (64-bit-multiplep 64-bitp key-56bit) nil (DES-encrypt-decrypt) nil nil) ((message-bits key-bits message-64bit-blocks key-56bit encrypt) nil (permuted-choice-1) nil nil nil nil)) (/security/des/des.lisp::3-DES (nil nil nil nil (if) nil nil) ((nil) nil nil (or) (DES) nil nil) ((encrypt) nil (not not) (get-nth) (DES) nil nil) ((key-bytes) (16) (booleanp not) (equal prefix-nth) (DES) nil nil) ((encrypt message-bytes encrypt encrypt) (24 8) (len) (prefix-nth get-nth) nil nil nil) ((key-bytes key-bytes key-bytes) (8 8) nil nil nil nil nil) (nil nil nil nil nil nil nil)))