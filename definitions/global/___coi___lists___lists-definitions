((/coi/lists/lists-definitions.lisp::setequiv (nil nil nil (and) nil nil nil) (nil nil nil (subsetp subsetp) nil nil nil) ((x y y x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::find-index (nil nil nil nil (if) nil nil) (nil (0) (endp) nil (if) nil nil) ((lst) (0) nil (equal +) nil nil nil) ((key) (1) (car) (recursive-call) nil nil nil) ((lst key) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::len-len-induction (nil nil nil nil (if) nil nil) ((nil) nil nil (and recursive-call) nil nil nil) (nil nil (consp consp cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::list::list-fix (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil (list::fix recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::list::list-equiv (nil nil nil (equal) nil nil nil) (nil nil (list::list-fix list::list-fix) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::binary-appendx (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (append) (if) nil nil) ((x y y) nil (consp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::disjoint (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((x nil) nil nil (memberp recursive-call) nil nil nil) ((y y) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::mutual-non-membership (nil nil nil (implies) nil nil nil) (nil nil (not) (memberp) nil nil nil) ((a x) nil nil (memberp) nil nil nil) ((a y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/coi/lists/lists-definitions.lisp::drop-irrelevant-update-nth-calls-from-update-nth-nest-aux (nil nil nil nil (if) nil nil) (nil nil (not) nil (if if) nil nil) ((changed-anything-flg term nil) nil (consp) nil (and if if) nil nil) ((term changed-anything-flg term nil) nil (quotep natp) (equal equal) (if recursive-call) nil nil) ((n changed-anything-flg term nil n t) nil (quote car cadr cadr cadr cadddr) nil nil nil nil) ((update-nth term term term) nil (cadr cadr) nil nil nil nil) ((term term) nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::drop-irrelevant-update-nth-calls-from-update-nth-nest (nil nil nil nil (if) nil nil) ((term) nil nil (let) nil nil nil) (((result (drop-irrelevant-update-nth-calls-from-update-nth-nest-aux (cadr (cadr term)) (caddr term) nil))) nil (consp consp quotep natp) (equal equal) (if) nil nil) ((term result term) nil (caddr car quote car quote cadr cadr `) nil nil nil nil) ((term update-nth term nth term) nil (caddr cadr) (nth) nil nil nil) ((term term) nil (, unhide) nil nil nil nil) (nil nil (cadr hide) nil nil nil nil)) (/coi/lists/lists-definitions.lisp::get-nth-component-of-update-nth-nest-aux (nil nil nil nil (if) nil nil) ((nil) nil (not) nil (if) nil nil) ((nil) nil (consp) nil (and if) nil nil) ((term) nil (quotep natp caddr) (equal equal recursive-call) nil nil nil) ((n term n) nil (quote car cadr cadr cadr cadddr) nil nil nil nil) ((update-nth term term term) nil (cadr cadr) nil nil nil nil) ((term term) nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::get-nth-component-of-update-nth-nest (nil nil nil nil (if) nil nil) ((term) nil nil (let*) nil nil nil) (((val (get-nth-component-of-update-nth-nest-aux (cadr (cadr term)) (caddr term)))) nil (consp consp quotep natp) (equal equal) (if) nil nil) ((term val term) nil (caddr car quote car quote cadr cadr `) nil nil nil nil) ((term update-nth term nth term) nil (caddr cadr unhide) nil nil nil nil) ((term term) nil (hide) nil nil nil nil) (nil nil (,) nil nil nil nil)) nil (/coi/lists/lists-definitions.lisp::drop-irrelevant-update-nth-calls-from-update-nth-nest-aux (nil nil nil nil (if) nil nil) (nil nil (not) nil (if if) nil nil) ((changed-anything-flg nil) nil (consp `) nil (and if if) nil nil) ((term changed-anything-flg nil) nil (quotep natp ` `) (nth equal equal) (recursive-call) nil nil) ((n n t) nil (quote unhide quote car cadr cadr cadr unhide cadddr) (nth) nil nil nil) ((update-nth term term term) nil (, hide cadr cadr hide quote unhide) nil nil nil nil) ((n term term) nil (, , , hide) nil nil nil nil)) (/coi/lists/lists-definitions.lisp::drop-irrelevant-update-nth-calls-from-update-nth-nest (nil nil nil nil (if) nil nil) ((term) nil nil (let) nil nil nil) (((result (drop-irrelevant-update-nth-calls-from-update-nth-nest-aux (cadr (cadr term)) (caddr term) nil))) nil (consp consp quotep natp) (equal equal) (if) nil nil) ((term result result term) nil (caddr car quote car quote cadr cadr) nil nil nil nil) ((term update-nth term nth term) nil (caddr cadr) nil nil nil nil) ((term term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::remove-list (nil nil nil nil (if) nil nil) ((y) nil (consp) (remove) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::remove-induction-1 (nil nil nil nil (if) nil nil) ((x) nil (consp recursive-call) nil nil nil nil) ((x) nil nil (remove) nil nil nil) ((x) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::remove-induction-2 (nil nil nil nil (if) nil nil) (nil nil (consp) (recursive-call list) nil nil nil) ((x x y) nil nil (remove remove) nil nil nil) ((x y) nil (car car) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::remove-induction-3 (nil nil nil nil (if) nil nil) (nil nil (consp) nil (recursive-call list) nil nil) ((x x y z) nil nil (remove remove remove) nil nil nil) ((x y z) nil (car car car) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/lists-definitions.lisp::setequiv (nil nil nil (and) nil nil nil) (nil nil nil (subsetp subsetp) nil nil nil) ((x y y x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))