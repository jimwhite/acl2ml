((/hacking/defstruct-parsing.lisp::defstruct-conc-name (nil nil nil nil nil (cond) nil) (nil nil ((endp options) (eq (quote :conc-name) (car options)) (and (consp (car options)) (eq (quote :conc-name) (caar options))) t) nil nil nil nil) (() nil nil (string-append let recursive-call) nil nil nil) ((- (arglst (cdar options)) name) nil (symbol-name cdr) nil (if) nil nil) ((name  options) nil (symbol-name) nil (and) nil nil) (nil nil (consp symbolp car car) nil nil nil nil) ((arglst arglst arglst) nil (car) nil nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-constructor-name-lst1 (nil nil nil nil (cond) nil nil) (nil nil ((endp options) (and (consp (car options)) (eq (quote :constructor) (caar options)) (consp (cdar options))) t) nil nil nil nil) (nil nil nil nil (cond cond) (recursive-call) nil) ((name sofar nilseen) nil (sofar nilseen t (null (cadar options)) (symbolp (cadar options)) t cdr) nil nil nil nil) ((sofar nil options) nil (list) nil nil (recursive-call recursive-call recursive-call) nil) ((name sofar t name nilseen name sofar nilseen) nil (cdr cdr cdr) (intern-in-package-of-symbol cons) nil nil nil) ((name options options sofar options) nil (cadar) (string-append) nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-constructor-name-lst (nil nil nil nil nil (defstruct-constructor-name-lst1) nil) ((name options nil nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-copier-name-lst1 (nil nil nil nil (cond) nil nil) (nil nil ((endp options) (and (consp (car options)) (eq (quote :copier) (caar options)) (consp (cdar options))) t) nil nil nil nil) (nil nil nil nil (cond cond) (recursive-call) nil) ((name sofar nilseen) nil (sofar nilseen t (null (cadar options)) (symbolp (cadar options)) t cdr) nil nil nil nil) ((sofar nil options) nil (list) nil nil (recursive-call recursive-call recursive-call) nil) ((name sofar t name nilseen name sofar nilseen) nil (cdr cdr cdr) (intern-in-package-of-symbol cons) nil nil nil) ((name options options sofar options) nil (cadar) (string-append) nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-copier-name-lst (nil nil nil nil nil (defstruct-copier-name-lst1) nil) ((name options nil nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-predicate-name-lst1 (nil nil nil nil (cond) nil nil) (nil nil ((endp options) (and (consp (car options)) (eq (quote :predicate) (caar options)) (consp (cdar options))) t) nil nil nil nil) (nil nil nil nil (cond cond) (recursive-call) nil) ((name sofar nilseen) nil (sofar nilseen t (null (cadar options)) (symbolp (cadar options)) t cdr) nil nil nil nil) ((sofar nil options) nil (list) nil nil (recursive-call recursive-call recursive-call) nil) ((name sofar t name nilseen name sofar nilseen) nil (cdr cdr cdr) (intern-in-package-of-symbol cons) nil nil nil) ((name options options sofar options) nil (cadar) (string-append) nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-predicate-name-lst (nil nil nil nil nil (defstruct-predicate-name-lst1) nil) ((name options nil nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-accessors (nil nil nil nil (if) nil nil) ((nil) nil (endp) (let*) nil nil nil) ((descs) nil ((desc (car descs))) nil (if) nil nil) (nil nil (name symbolp) (cons) (recursive-call) nil nil) ((name conc-name package-of-symbol) nil (cdr) nil (if if recursive-call) nil nil) ((desc name conc-name package-of-symbol descs) nil (consp car cdr) (equal intern-in-package-of-symbol) nil nil nil) ((desc desc conc-name  package-of-symbol descs) nil nil (string-append) nil nil nil)) (/hacking/defstruct-parsing.lisp::defstruct-name-and-fns (nil nil nil nil (if) nil nil) ((nil) nil (not) (let*) nil nil nil) (nil nil nil (cons) nil (and) nil) ((name) nil (consp consp name options slot-descs conc-name top-fns accessors) (eq or append) nil nil nil) ((form top-fns accessors) nil (car quote cdr symbolp) (and defstruct-conc-name) (if if if append defstruct-accessors) nil nil) ((form defstruct form name-and-options nil name options conc-name slot-descs name) nil (cadr consp symbolp consp car consp cdr cdddr cddr) (and defstruct-constructor-name-lst defstruct-copier-name-lst defstruct-predicate-name-lst) nil nil nil) ((form name-and-options name-and-options name-and-options name-and-options form form name options name options name options) nil (cadr caadr consp stringp) nil nil nil nil)))