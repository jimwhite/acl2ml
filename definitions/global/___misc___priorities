((/misc/priorities.lisp::all-prioritized-items (nil nil nil (cond) nil nil nil) (nil nil ((endp alist) t) nil nil nil nil) ((nil) nil nil (union-equal) nil nil nil) (nil nil (cdar recursive-call) nil nil nil nil) ((alist) nil (cdr) nil nil nil nil) ((alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/priorities.lisp::next-priority1 (nil nil nil nil (cond) nil nil) (nil nil ((endp alist) (< n (caar alist)) t) nil nil nil nil) ((candidate) nil nil nil (if recursive-call) nil nil) ((candidate n candidate) nil (cdr) nil (if recursive-call) nil nil) ((n alist) nil (caar cdr) (<) (recursive-call recursive-call) nil nil) ((candidate n n candidate alist alist) nil (caar caar cdr cdr) nil nil nil nil) ((alist alist alist alist) nil nil nil nil nil nil)) (/misc/priorities.lisp::next-priority (nil nil nil nil (next-priority1) nil nil) ((n nil) nil nil (table-alist) nil nil nil) ((world) nil (quote) nil nil nil nil) ((priorities) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/priorities.lisp::rules-up-to-priority1 (nil nil nil nil (cond) nil nil) (nil nil ((endp alist) (<= (caar alist) n) t) nil nil nil nil) ((nil) nil nil (union-equal recursive-call) nil nil nil) ((n) nil (cdar cdr) (recursive-call) nil nil nil) ((alist n alist) nil (cdr) nil nil nil nil) ((alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/priorities.lisp::rules-up-to-priority (nil nil nil (rules-up-to-priority1) nil nil nil) ((n) nil nil (table-alist) nil nil nil) ((world) nil (quote) nil nil nil nil) ((priorities) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/priorities.lisp::priority-phased-simplification (nil nil nil nil (if) nil nil) ((stable-under-simplificationp nil) nil nil (let) nil nil nil) (((next (next-priority current-priority world))) nil nil nil (if) nil nil) ((next nil) nil (`) nil nil nil nil) (nil nil nil nil (:computed-hint-replacement) nil nil) (((priority-phased-simplification world stable-under-simplificationp (, next)) :in-theory) nil (enable) nil nil nil nil) (nil nil (,@) nil nil nil nil)))