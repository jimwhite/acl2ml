((/centaur/gl/g-primitives-help.lisp::gobjectp-formals-list (nil nil nil nil (if) nil nil) ((nil) nil (Atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (gobjectp cdr) nil nil nil nil) ((formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::acl2-count-gobj-fix-formals-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (acl2-count cdr) nil nil nil nil) ((formals) nil (gobj-fix) nil nil nil nil) (nil nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::mbe-gobj-fix-formals-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil ((, (car formals)) cdr) nil nil nil nil) ((formals) nil nil nil nil (mbe) nil) ((:logic :exec) nil (gobj-fix ,) nil nil nil nil) (nil nil (, car) nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::gobjectp-thmname (nil nil nil nil (incat) nil nil) ((GOBJECTP-) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::correct-thmname (nil nil nil nil (incat) nil nil) ((-CORRECT) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::correct1-thmname (nil nil nil nil (incat) nil nil) ((-CORRECT1) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::gobj-fix-thmname (nil nil nil nil (incat) nil nil) ((-GOBJ-FIX) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::def-gobjectp-thm-fn (nil nil nil (b*) nil nil nil) (nil nil ((formals (wgetprop fn (quote formals))) `) nil nil nil nil) (nil nil (thmname) (progn) nil nil nil) (nil nil (gobjectp-thmname) (add-to-ruleset!) nil (defthm) nil) ((gfn :hints g-gobjectp-lemmas) nil (, gobjectp , quote) nil nil nil nil) ((thmname hints (, thmname)) nil nil nil ((, gfn)) nil nil) ((hyp clk) nil (,@) nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::ev-formals-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (`) (recursive-call) nil nil nil) ((ev) nil (cdr) ((, ev)) nil nil nil) ((env formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::gobj-fix-formals-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (gobj-fix cdr) nil nil nil nil) ((formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::pair-gobj-fix-formals-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil ((, (car formals)) cdr) nil nil nil nil) ((formals) nil (gobj-fix) nil nil nil nil) (nil nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil)) (/centaur/gl/g-primitives-help.lisp::def-g-correct-thm-fn (nil nil nil (b*) nil nil nil) (nil nil (`) nil ((formals (wgetprop fn (quote formals)))) nil nil) (nil nil (thmname thmname1 gobj-thmname) nil nil nil nil) ((nil) nil (correct-thmname correct1-thmname gobj-fix-thmname local local in-theory) nil (table) (defthm) nil) ((gfn gfn gfn :hints gl-function-info) nil (disable , , quote quote) (implies) nil (defthm defthm) nil) ((:hints :hints (goal :expand (((, gfn) (,@ (gobj-fix-formals-list formals)) (bfr-fix hyp) clk) ((, gfn) (,@ formals) hyp clk) (:free (x) (hide x)))) thmname) nil (, , , , , (, gfn)) (implies equal bfr-eval equal or) nil nil nil) ((thmname1 hints gobj-thmname gfn hyp final-hints fn) nil (car `) (equal (, ev) (, fn) (, thmname)) (and (, gfn) (, gfn)) nil nil)))