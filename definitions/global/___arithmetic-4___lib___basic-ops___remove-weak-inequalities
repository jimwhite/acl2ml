((/arithmetic-4/lib/basic-ops/remove-weak-inequalities.lisp::remove-weak-inequalities-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq let) nil nil nil) (((contradictionp (mfc-ap (` (< (, y) (, x))) mfc state))) nil (quote) (present-in-hyps) (if) nil nil) ((positive t nil) nil (` mfc-clause) nil nil nil (and)) ((mfc) nil (consp consp consp consp) (< equal) nil nil nil) ((contradictionp) (1) (, , car caar cdaar len) nil nil nil nil) ((y x contradictionp contradictionp contradictionp) nil nil nil (access) nil nil)) (/arithmetic-4/lib/basic-ops/remove-weak-inequalities.lisp::remove-strict-inequalities-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq let) nil nil nil) (((contradictionp (mfc-ap (` (NOT (< (, x) (, y)))) mfc state))) nil (quote) (present-in-hyps) (if) nil nil) ((negative t nil) nil (` mfc-clause) nil nil nil (and)) ((mfc) nil (consp consp consp consp) (< equal) nil nil nil) ((contradictionp) (1) (, , car caar cdaar len) nil nil nil nil) ((x y contradictionp contradictionp contradictionp) nil nil nil (access) nil nil)))