((/paco/books/proveall.lisp::app (nil nil nil nil (if) nil nil) ((y) nil (endp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::rv (nil nil nil nil (if) nil nil) ((nil) nil (endp) (app) nil nil nil) ((x) nil (recursive-call list) nil nil nil nil) (nil nil (cdr car) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::intersection-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (member-equal (car x) y) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((y) nil (car cdr) (recursive-call) nil nil nil) ((x y x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::flatten (nil nil nil (cond) nil nil nil) (nil nil ((atom x) t) nil nil nil nil) (nil nil (list) (app) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::mc-flatten (nil nil nil (cond) nil nil nil) (nil nil ((atom x) t) nil nil nil nil) (nil nil nil (cons recursive-call) nil nil nil) ((x a) nil (car) (recursive-call) nil nil nil) ((x a) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::insert (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (<= e (car x)) t) nil nil nil nil) (nil nil nil (cons cons cons) nil nil nil) ((e x e x) nil (car) (recursive-call) nil nil nil) ((x e) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::orderedp (nil nil nil nil nil (cond) nil) (nil nil ((endp x) (endp (cdr x)) (<= (car x) (cadr x)) t) nil nil nil nil) ((t t nil) nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::isort (nil nil nil (cond) nil nil nil) (nil nil ((endp x) t) nil nil nil nil) ((nil) nil nil (insert) nil nil nil) (nil nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::del (nil nil nil nil (cond) nil nil) (nil nil ((atom lst) (equal x (car lst)) t) nil nil nil nil) ((nil) nil (cdr) (cons) nil nil nil) ((lst) nil (car) (recursive-call) nil nil nil) ((lst x) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::mem (nil nil nil nil (cond) nil nil) (nil nil ((atom lst) (equal x (car lst)) t) nil nil nil nil) ((nil t) nil nil (recursive-call) nil nil nil) ((x) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::perm (nil nil nil nil (cond) nil nil) (nil nil ((atom lst1) (mem (car lst1) lst2) t) nil nil nil nil) ((nil) nil (atom) (recursive-call) nil nil nil) ((lst2) nil (cdr) (del) nil nil nil) ((lst1 lst2) nil (car) nil nil nil nil) ((lst1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::xor (nil nil nil nil (if) nil nil) ((a b) nil nil nil (if) nil nil) ((b nil t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::adder (nil nil nil (cond) nil nil nil) (nil nil ((and (endp x) (endp y)) t) nil nil nil nil) (nil nil (list) (cons) nil nil nil) ((c) nil nil (xor) (recursive-call) nil nil) (nil nil (car cdr cdr) (xor) (or) nil nil) ((x c x y) nil (car) (and and and) nil nil nil) ((y c c) nil (car car car car) nil nil nil nil)) (/paco/books/proveall.lisp::nat (nil nil nil nil (if) nil nil) (nil (0) (endp) (+) nil nil nil) ((x) nil nil (*) (if) nil nil) (nil (1 0 2) (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::multiplier (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (car x) t) nil nil nil nil) ((a) nil nil nil (recursive-call recursive-call) nil nil) ((a) nil (cdr cdr) (cons cons) (adder) nil nil) ((x nil y y a nil x nil y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::conc (nil nil nil nil (if) nil nil) ((y) nil (endp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::rve (nil nil nil nil (if) nil nil) ((nil) nil (endp) (conc) nil nil nil) ((x) nil (recursive-call list) nil nil nil nil) (nil nil (cdr car) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::rv1 (nil nil nil nil (if) nil nil) ((a) nil (endp) (recursive-call) nil nil nil) ((x) nil (cdr) (cons) nil nil nil) ((x a) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/books/proveall.lisp::rv1top (nil nil nil (rv1) nil nil nil) ((x nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))