((/fix-cert/fix-cert.lisp::create-pkgs-for-cert-file1 (nil nil nil nil (mv-let) nil nil) (nil nil nil (eofp state-global-let*) nil (cond) nil) ((cmd state (infixp nil)) nil (eofp (eq cmd :end-portcullis-cmds) (and (consp cmd) (eq (car cmd) (quote defpkg)) (consp (cdr cmd)) (stringp (cadr cmd))) t) (read-object) nil nil nil) ((ch state) nil (value) (let) nil (ill-formed-certificate-er) nil) ((ctx file1 file2 new-pkgs-sofar (pkg (cadr cmd)) file1 file2 ch known-pkgs new-pkgs-sofar ctx state) nil (quote) nil (if) nil nil) ((recursive-call) nil nil (member-equal er-progn) nil nil nil) ((pkg known-pkgs file1 file2 ch known-pkgs new-pkgs-sofar ctx state) nil nil nil nil nil nil)) (/fix-cert/fix-cert.lisp::set-current-package1 (nil nil nil nil nil (mv-let) nil) ((state) nil (declare) (erp set-current-package) nil nil nil) ((v state val state) nil nil (ignore) nil nil nil) ((v erp) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/fix-cert/fix-cert.lisp::create-pkgs-for-cert-file (nil nil nil (let) nil nil nil) (((file2 (convert-book-name-to-cert-name file1 t))) nil nil nil (mv-let) nil nil) (nil nil (ch) nil (open-input-channel if) nil nil) ((state file2 :object state) nil (null) (er-let*) nil nil nil) ((ch file1 file2 There is no certificate on file for ~x0. :uncertified-okp *fix-cert-suspect-book-action-alist* ctx state (pkg (state-global-let* ((infixp nil)) (chk-in-package ch file2 nil ctx state)))) nil nil nil (if) nil nil) (nil nil (not) (state-global-let*) nil nil (ill-formed-certificate-er)) ((ctx file1 file2 pkg (current-package ACL2 set-current-package1)) nil (quote) (equal) (mv-let) nil nil)) (/fix-cert/fix-cert.lisp::fix-cert-fn (nil nil nil (er-let*) nil nil nil) (((dir-value (cond (dir (include-book-dir-with-chk soft ctx dir)) (t (value (cbd)))))) nil nil nil nil (mv-let) nil) (nil nil (declare) (new-full-book-name er-let*) nil nil (parse-book-name)) ((new-directory-name-with-slash new-familiar-name dir-value .lisp ctx state) nil ((new-pkg-lst (create-pkgs-for-cert-file new-full-book-name ctx state))) (prog2$ ignorable let*) nil nil nil) ((user-book-name new-directory-name-with-slash new-familiar-name) nil (cert-obj) (cw) (if) nil nil) ((~%Fixing .cert file for ~x0~% user-book-name) nil (post-alist expansion-alist pcert-info expansion-alist-nonelided old-full-book-name old-directory-name new-directory-name value) (equal) nil nil nil) ((new-full-book-name new-directory-name-with-slash ctx state *fix-cert-suspect-book-action-alist* nil old-full-book-name new-full-book-name :not-needed new-full-book-name portcullis post-alist expansion-alist expansion-alist-nonelided old-directory-name new-directory-name nil ctx state) nil (quote caar remove-after-last-directory-separator remove-after-last-directory-separator) (and convert-book-name-to-cert-name) (access access access) nil nil)) (/fix-cert/fix-cert.lisp::fix-certs-fn (nil nil nil nil (if) nil nil) (nil nil (not) nil (if) (mv-let) nil) (nil nil (consp stringp value declare) (er-flag) nil (fix-cert-fn fix-cert-fn recursive-call) nil) ((user-book-names user-book-names user-book-names dir ctx state :done val state dir ctx state dir ctx state) nil (car cdr) (ignore) nil nil nil) ((user-book-names er-flag val user-book-names) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))