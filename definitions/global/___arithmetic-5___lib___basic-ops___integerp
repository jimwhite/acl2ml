(nil (/arithmetic-5/lib/basic-ops/integerp.lisp::reduce-integerp-+-fn-1 (nil nil nil nil nil (cond) nil) (nil nil ((and (not (equal (arg1 x) (quote (quote 0)))) (if intp-flag (proveably-integer (quote x) (` ((x , (arg1 x)))) mfc state) (proveably-real/rational (quote x) (` ((x , (arg1 x)))) mfc state)) (stable-under-rewriting-sums (negate-match (arg1 x)) mfc state)) (eq (fn-symb (arg2 x)) (quote BINARY-+)) (and (not (equal (arg2 x) (quote (quote 0)))) (if intp-flag (proveably-integer (quote x) (` ((x , (arg2 x)))) mfc state) (proveably-real/rational (quote x) (` ((x , (arg2 x)))) mfc state)) (stable-under-rewriting-sums (negate-match (arg2 x)) mfc state)) t) nil nil nil nil) ((nil) nil (list list) nil nil (recursive-call) nil) ((intp-flag mfc state) nil (arg2) (cons cons) nil nil nil) ((x) nil (quote negate-match quote negate-match) nil nil nil nil) ((z z) nil (arg1 arg2) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/arithmetic-5/lib/basic-ops/integerp.lisp::reduce-integerp-+-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq) nil (reduce-integerp-+-fn-1) nil) ((x intp-flag mfc state) nil (fn-symb quote) nil nil nil nil) ((x BINARY-+) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-5/lib/basic-ops/integerp.lisp::reduce-rationalp-*-fn-1 (nil nil nil nil nil (cond) nil) (nil nil ((and (not (equal (arg1 x) (quote (quote 1)))) (proveably-non-zero-rational (quote x) (` ((x , (arg1 x)))) mfc state) (stable-under-rewriting-products (invert-match (arg1 x)) mfc state)) (eq (fn-symb (arg2 x)) (quote BINARY-*)) (and (not (equal (arg2 x) (quote (quote 1)))) (proveably-non-zero-rational (quote x) (` ((x , (arg2 x)))) mfc state) (stable-under-rewriting-products (invert-match (arg2 x)) mfc state)) t) nil nil nil nil) ((nil) nil (list list) nil (recursive-call) nil nil) ((mfc state) nil (arg2) (cons cons) nil nil nil) ((x) nil (quote invert-match quote invert-match) nil nil nil nil) ((z z) nil (arg1 arg2) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/arithmetic-5/lib/basic-ops/integerp.lisp::reduce-real/rationalp-*-fn-1 (nil nil nil nil nil (cond) nil) (nil nil ((and (not (equal (arg1 x) (quote (quote 1)))) (proveably-non-zero-real/rational (quote x) (` ((x , (arg1 x)))) mfc state) (stable-under-rewriting-products (invert-match (arg1 x)) mfc state)) (eq (fn-symb (arg2 x)) (quote BINARY-*)) (and (not (equal (arg2 x) (quote (quote 1)))) (proveably-non-zero-rational (quote x) (` ((x , (arg2 x)))) mfc state) (stable-under-rewriting-products (invert-match (arg2 x)) mfc state)) t) nil nil nil nil) ((nil) nil (list list) nil (recursive-call) nil nil) ((mfc state) nil (arg2) (cons cons) nil nil nil) ((x) nil (quote invert-match quote invert-match) nil nil nil nil) ((z z) nil (arg1 arg2) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/arithmetic-5/lib/basic-ops/integerp.lisp::reduce-rationalp-*-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq) (reduce-rationalp-*-fn-1) nil nil) ((x mfc state) nil (fn-symb quote) nil nil nil nil) ((x BINARY-*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-5/lib/basic-ops/integerp.lisp::reduce-real/rationalp-*-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq) (reduce-real/rationalp-*-fn-1) nil nil) ((x mfc state) nil (fn-symb quote) nil nil nil nil) ((x BINARY-*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-5/lib/basic-ops/integerp.lisp::find-integerp-hyp-1 (nil nil nil nil (cond) nil nil) (nil nil ((endp type-alist) (let ((typed-term (caar type-alist)) (type (cadar type-alist))) (and (eq (fn-symb typed-term) (quote BINARY-*)) (quotep (arg1 typed-term)) (equal (arg2 typed-term) x) (ts-subsetp type *ts-integer*) (integerp (/ (unquote c) (unquote (fargn typed-term 1)))))) t) nil nil nil nil) ((nil) nil nil (list) (recursive-call) nil nil) ((c x) nil (cdr) (cons cons) nil nil nil) ((type-alist) nil (quote quote kwote) (fargn) nil nil nil) ((d a) (1) (caar) (/) nil nil nil) ((type-alist) nil (unquote unquote) nil nil nil nil)) (/arithmetic-5/lib/basic-ops/integerp.lisp::find-integerp-hyp (nil nil nil nil (find-integerp-hyp-1) nil nil) ((c x) nil (mfc-type-alist) nil nil nil nil) ((mfc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))