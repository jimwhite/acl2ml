((/rtl/rel8/support/lib2.delta1/add-proofs.lisp::rc-carry (nil nil nil nil (if) nil nil) (nil (0) (zp) (logior) nil nil nil) ((k) nil nil (logand logior) nil nil nil) (nil nil nil (bitn bitn logand logand) nil nil nil) ((x y) nil (1- 1-) (bitn bitn) (recursive-call recursive-call) nil nil) ((k k x x y y x y) nil (1- 1- 1- 1-) nil nil nil nil) ((k k k k) nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::rc-sum (nil nil nil nil (if) nil nil) (nil (0) (zp) nil nil (cat) nil) ((k) (1) (1-) (logxor) (recursive-call) nil nil) ((x y k) nil (1-) (bitn logxor) nil nil nil) ((x k) nil (1-) (bitn) (rc-carry) nil nil) ((k y x y) nil (1- 1-) nil nil nil nil) ((k k) nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::gen (nil nil nil nil (if) nil nil) (nil (0) nil nil (and if) nil nil) (nil nil (natp natp) (>= = bitn) nil (recursive-call) nil) ((i j i j x i x y j) nil (1-) (bitn bitn) nil nil nil) ((x i y i i) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::prop (nil nil nil nil (if) nil nil) (nil (1) nil nil (and if) nil nil) (nil (0) (natp natp) (>= =) nil (recursive-call) nil) ((i j i j x y j) nil (1-) (bitn bitn) nil nil nil) ((x i y i i) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lamt (nil nil nil (logxor) nil nil nil) ((a) nil nil nil (bits) nil nil) ((e) (0) (lognot) nil nil nil nil) ((b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lamg (nil nil nil (logand) nil nil nil) ((a) nil nil nil (bits) nil nil) ((e) (0) (lognot) nil nil nil nil) ((b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lamz (nil nil nil nil (bits) nil nil) ((e) (0) (lognot) nil nil nil nil) (nil nil nil (logior) nil nil nil) ((a) nil nil nil (bits) nil nil) ((e) (0) (lognot) nil nil nil nil) ((b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lam1 (nil nil nil (logand) nil nil nil) (nil nil nil (logand) (bits) nil nil) ((e) (2) nil nil (lamt bits bits) nil nil) ((a b e) (1 0) (1- lognot) (-) (lamg) nil nil) ((a b e e e) (2) nil nil (lamz) nil nil) ((a b e) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lam2 (nil nil nil (logand) nil nil nil) (nil nil nil (logand) (bits) nil nil) ((e) (2) (lognot) nil (bits bits) nil nil) (nil (1 0) (1- lognot) (-) (lamt lamz) nil nil) ((a b e a b e e e) (2) nil nil (lamz) nil nil) ((a b e) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lam3 (nil nil nil (logand) nil nil nil) (nil nil nil (logand) (bits) nil nil) ((e) (2) nil nil (lamt bits bits) nil nil) ((a b e) (1 0) (1- lognot) (-) (lamz) nil nil) ((a b e e e) (2) nil nil (lamg) nil nil) ((a b e) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lam4 (nil nil nil (logand) nil nil nil) (nil nil nil (logand) (bits) nil nil) ((e) (2) (lognot) nil (bits bits) nil nil) (nil (1 0) (1- lognot) (-) (lamt lamg) nil nil) ((a b e a b e e e) (2) nil nil (lamg) nil nil) ((a b e) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lam0 (nil nil nil (logior) nil nil nil) (nil nil nil (logior) (lam1) nil nil) ((a b e) nil nil (logior) (lam2) nil nil) ((a b e) nil nil nil (lam3 lam4) nil nil) ((a b e a b e) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/add-proofs.lisp::lamb (nil nil nil (+) nil nil nil) (nil nil nil (* bitn) nil nil nil) (nil (2 0) (lognot) nil (lam0) nil nil) ((a b e) nil nil nil (lamt) nil nil) ((a b e) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))