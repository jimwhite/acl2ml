((/paco/output-module.lisp::nume-to-rune (nil nil nil (let) nil nil nil) (((temp (if (and (integerp nume) (<= 0 nume)) (acl2::enabled-numep nume map) nil))) nil nil nil (if) nil nil) ((temp nil) nil (consp) nil nil nil nil) ((temp) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/output-module.lisp::numes-to-runes (nil nil nil (cond) nil nil nil) (nil nil ((endp numes) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((rune (nume-to-rune (car numes) map))) nil nil (cond) nil nil nil) (nil nil (rune t) nil nil nil nil) (nil nil nil (cons recursive-call) nil nil nil) ((rune map) nil (cdr) (recursive-call) nil nil nil)) (/paco/output-module.lisp::make-not (nil nil nil (cond) nil nil nil) (nil nil ((and (consp term) (eq (car term) (quote NOT))) t) nil nil nil nil) (nil nil (cadr) (list) nil nil nil) ((term term) nil (quote) nil nil nil nil) ((NOT) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/output-module.lisp::make-not-lst (nil nil nil (cond) nil nil nil) (nil nil ((endp lst) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (make-not recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/output-module.lisp::prettyify-clause (nil nil nil nil nil (cond) nil) (nil nil ((endp cl) (endp (cdr cl)) (endp (cddr cl)) t) nil nil nil nil) ((nil) nil (car ` `) nil nil nil nil) ((cl) nil nil (implies implies) nil nil nil) (nil nil (, , and ,) nil nil nil nil) (nil nil (make-not cadr ,@ car) nil nil nil nil) ((cl) nil (car make-not-lst last) nil nil nil nil)) (/paco/output-module.lisp::reset-nume-stack (nil nil nil nil (wormhole-eval) nil nil) ((nil) nil (quote quote) nil nil nil nil) ((nume-stack) nil nil (lambda) nil nil nil) ((nil) nil nil nil (make-wormhole-status) nil nil) ((nil :ENTER nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/paco/output-module.lisp::push-nume-frame (nil nil nil nil (wormhole-eval) nil nil) ((nil) nil (quote quote) nil nil nil nil) ((nume-stack) nil nil (lambda) nil nil nil) ((whs) nil nil (set-wormhole-data) nil nil nil) ((whs) nil nil (cons) nil nil nil) (nil nil (wormhole-data) nil (if) nil nil) ((nume nil whs) nil (list) nil nil nil nil)) (/paco/output-module.lisp::push-nume (nil nil nil nil (if) nil nil) ((nume nil) nil nil nil (wormhole-eval) nil nil) ((nil) nil (quote quote) nil nil nil nil) ((nume-stack) nil nil (lambda) nil nil nil) ((whs) nil nil (set-wormhole-data) nil nil nil) ((whs) nil nil (cons) nil nil nil) (nil nil (cdr) (cons) nil nil nil)) (/paco/output-module.lisp::pop-nume-frame-nil (nil nil nil nil (wormhole-eval) nil nil) ((nil) nil (quote quote) nil nil nil nil) ((nume-stack) nil nil (lambda) nil nil nil) ((whs) nil nil (set-wormhole-data) nil nil nil) ((whs) nil (cdr) nil nil nil nil) (nil nil (wormhole-data) nil nil nil nil) ((whs) nil nil nil nil nil nil)) (/paco/output-module.lisp::pop-nume-frame-t (nil nil nil nil (wormhole-eval) nil nil) ((nil) nil (quote quote) nil nil nil nil) ((nume-stack) nil nil (lambda) nil nil nil) ((whs) nil nil (set-wormhole-data) nil nil nil) ((whs) nil nil (cons) nil nil nil) (nil nil (cddr) (union-equal) nil nil nil) (nil nil (car cadr wormhole-data) nil nil nil nil)) (/paco/output-module.lisp::prove-summary-msg (nil nil nil (prog2$) nil nil nil) (nil nil (value) (cw) nil nil nil) ((~x0~% :q) nil nil (CONS) nil nil nil) (nil nil (quote) (NUMES-TO-RUNES) nil nil nil) ((SUMMARY) nil (CAR @) nil nil nil nil) ((ACL2::NUME-TO-RUNE-MAP) nil (wormhole-data) nil nil nil nil) (nil nil (@) nil nil nil nil)))