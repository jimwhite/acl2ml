((/defexec/other-apps/records/records.lisp::ill-formed-key ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::wf-keyp (nil nil (not) nil nil nil nil) (nil nil nil (equal) nil nil nil) ((x ill-formed-key) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::well-formed-map (nil nil nil (or) nil nil nil) (nil nil (null) nil nil nil (and)) ((x) nil (consp consp recursive-call cdar) (or) nil nil nil) ((x x) nil (car cdr null) (<<) nil nil nil) ((x x) nil (cdr caar caadr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::ifrp (nil nil nil (or) nil nil nil) (nil nil (not) nil nil nil (and)) (nil nil (well-formed-map consp null consp recursive-call) (equal) nil nil nil) ((x x ill-formed-key) nil (cdr car caar cdar) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::acl2->map (nil nil nil nil (if) nil nil) ((x) nil (ifrp list) nil nil nil nil) ((x) nil nil (cons) nil nil nil) ((ill-formed-key x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::map->acl2 (nil nil nil nil (if) nil nil) ((x) nil (ifrp cdar) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::mget-wf (nil nil nil nil (cond) nil nil) (nil nil ((or (endp x) (<< a (caar x))) (equal a (caar x)) t) nil nil nil nil) ((nil) nil (cdar) (recursive-call) nil nil nil) ((x a) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::good-map (nil nil nil (or) nil nil nil) (nil nil (null) nil nil nil nil) ((x) nil (consp consp recursive-call cdar wf-keyp) (or) nil nil nil) ((x x) nil (car cdr caar null) (<<) nil nil nil) ((x x x) nil (cdr caar caadr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::mget-fast (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (equal a (caar x)) t) nil nil nil nil) ((nil) nil (cdar) (recursive-call) nil nil nil) ((x a) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::mget (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (mget-wf mget-fast) nil nil nil) ((a a x) nil (acl2->map) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::mset-wf (nil nil nil nil (cond) nil nil) (nil nil ((or (endp r) (<< a (caar r))) (equal a (caar r)) t) nil nil nil nil) (nil nil nil (cons) (if if) nil nil) ((v r v) nil (cdr car) (cons cons) (recursive-call) nil nil) ((r r r a v) nil (cdr cdr) (cons cons) nil nil nil) ((a v a v r r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::mset-fast (nil nil nil nil nil (cond) nil) (nil nil ((endp r) (equal a (caar r)) (<< a (caar r)) t) nil nil nil nil) (nil nil nil (cons) (if if if) nil nil) ((v nil v v r) nil (cdr car) (cons cons cons) (recursive-call) nil nil) ((r r r r a v) nil (cdr cdr) (cons cons cons) nil nil nil) ((a v a v r a v r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/records.lisp::mset (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil (map->acl2) nil (mset-fast) nil nil) ((a v x) nil nil nil (mset-wf) nil nil) ((a v) nil (acl2->map) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))