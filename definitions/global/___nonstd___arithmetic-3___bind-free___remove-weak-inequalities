((/nonstd/arithmetic-3/bind-free/remove-weak-inequalities.lisp::present-in-goal (nil nil nil nil nil (cond) nil) (nil nil ((endp goal) (equal term (car goal)) (and (eq (fn-symb (car goal)) (quote NOT)) (equal term (fargn (car goal) 1))) t) nil nil nil nil) ((nil) nil (quote quote) (recursive-call) nil nil nil) ((positive negative term) nil (cdr) nil nil nil nil) ((goal) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/remove-weak-inequalities.lisp::remove-weak-inequalities-one-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq let) nil nil nil) (((contradictionp (mfc-ap (` (< (, y) (, x))) mfc state))) nil (quote) (present-in-goal) (if) nil nil) ((positive t nil) nil (` mfc-clause) (equal) nil nil nil) ((mfc) (1) (length) (<) nil nil nil) (nil nil (, ,) nil (access) nil nil) ((y x poly contradictionp :parents) nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/remove-weak-inequalities.lisp::remove-weak-inequalities-two-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq let) nil nil nil) (((contradictionp (mfc-ap (` (NOT (< (, x) (, y)))) mfc state))) nil (quote) (present-in-goal) (if) nil nil) ((negative t nil) nil (` mfc-clause) (equal) nil nil nil) ((mfc) (1) (length) (<) nil nil nil) (nil nil (, ,) nil (access) nil nil) ((x y poly contradictionp :parents) nil nil nil nil nil nil)))