((/defexec/other-apps/records/recordsim.lisp::wf-rcdp (nil nil (good-map) nil nil nil nil) ((r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::next-fn (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($next) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::mk-signal-guard (nil nil nil nil (if) nil nil) (nil nil (endp quote `) nil nil nil nil) ((args) nil (quote) (and) nil nil nil) ((t) nil (wf-rcdp ,) nil nil nil nil) (nil nil (, recursive-call) nil nil nil nil) (nil nil (first rest) nil nil nil nil) ((args args) nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-defp (nil nil nil nil nil (and) nil) (nil nil (true-listp symbolp symbol-listp) (member-eq) nil nil nil) ((x) nil (first quote second third) nil nil nil nil) ((x x x) nil nil (defunc) nil nil nil) ((defreg defwire) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-def-listp (nil nil nil (or) nil nil nil) (nil nil (null) nil (and) nil nil) ((x) nil (consp sim-defp recursive-call) nil nil nil nil) ((x) nil (first rest) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::get-wires (nil nil nil nil (cond) nil nil) (nil nil ((endp defs) (eq (first (first defs)) (quote defwire)) t) nil nil nil nil) ((nil) nil (recursive-call) (cons) nil nil nil) (nil nil (recursive-call rest) (cons) nil nil nil) ((defs) nil (second third rest) nil nil nil nil) ((defs) nil (first first) nil nil nil nil) ((defs defs) nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::get-regs (nil nil nil nil (cond) nil nil) (nil nil ((endp defs) (eq (first (first defs)) (quote defreg)) t) nil nil nil nil) ((nil) nil (recursive-call) (cons) nil nil nil) (nil nil (recursive-call rest) (cons) nil nil nil) ((defs) nil (second third rest) nil nil nil nil) ((defs) nil (first first) nil nil nil nil) ((defs defs) nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::signal-listp (nil nil nil (or) nil nil nil) (nil nil (null) nil nil (and) nil) ((x) nil (consp symbol-listp consp recursive-call) nil nil nil nil) ((x) nil (first first rest) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::logic-var-binds (nil nil nil nil (if) nil nil) ((rslt) nil (endp) (let) nil nil nil) ((vars (var (first (first vars)))) nil (`) nil nil nil nil) (nil nil nil nil (bind) nil nil) (nil nil (, ,) (g) nil nil nil) ((var x) nil (quote) (recursive-call) nil nil nil) ((rslt) nil (, rest) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::logic-wire-upds (nil nil nil nil (if) nil nil) ((rslt) nil (endp) (let) nil nil nil) ((wires) nil ((wire (first (first wires))) `) nil nil nil nil) (nil nil (args) nil (bind) nil nil) (nil nil (rest , (, (next-fn wire)) ,) nil nil nil nil) ((wire) nil (first ,@) (recursive-call) nil nil nil) ((wires args rslt) nil (rest) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::logic-reg-upds (nil nil nil nil (if) nil nil) ((rslt) nil (endp) (let) nil nil nil) ((regs) nil ((reg (first (first regs))) `) nil nil nil nil) (nil nil (args) nil (bind) nil nil) ((x) nil (rest ,) nil (s) nil nil) ((x) nil (first quote (, (next-fn reg))) (recursive-call) nil nil nil) ((regs rslt) nil (, ,@ rest) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::logic-reg-types (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((regs) nil (` recursive-call) nil nil nil nil) (nil nil (wf-rcdp rest) nil nil nil nil) ((regs) nil nil (g) nil nil nil) ((x) nil (quote) nil nil nil nil) (nil nil (,) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::logic-step (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($logic-step) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::logic-run (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($logic-run) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::wf-logicp (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($wf-logicp) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-logic (nil nil nil (let) nil nil nil) (nil nil ((wires (get-wires defs)) `) nil nil nil nil) (nil nil (regs) ((defun (, (wf-logicp name)) (x) (declare (xargs :guard t)) (and (wf-rcdp x) (,@ (logic-reg-types regs))))) nil nil nil) (nil nil (get-regs) nil nil (defun defun) nil) ((defs x) nil (, declare , , x declare) nil (if) nil nil) ((n x) nil (logic-step logic-run zp) (xargs logic-var-binds xargs (, (logic-run name))) nil nil nil) ((name :guard regs name :guard n) nil ((, (wf-logicp name)) (, (logic-step name)) 1-) (logic-wire-upds and) nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::stobj-name (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) ((stobj$) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::get-fnname (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) ((get-) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::set-fnname (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) ((update-) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::stobj-fields (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((regs) nil (` recursive-call) nil nil nil nil) (nil nil (rest) nil nil ((, (first (first regs)))) nil) ((:type :initially nil regs) nil (satisfies) nil nil nil nil) ((wf-rcdp) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::stobj-renaming (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((regs) nil (` recursive-call) nil nil nil nil) (nil nil ((, (first (first regs))) rest) nil nil nil nil) ((regs) nil (,) nil nil nil nil) (nil nil (get-fnname) nil nil nil nil) (nil nil (first) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-stobj (nil nil nil (let) nil nil nil) (((regs (get-regs defs))) nil (`) nil nil nil nil) (((defstobj (, (stobj-name name)) (,@ (stobj-fields regs)) :renaming (, (stobj-renaming regs)) :inline t)) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-var-binds (nil nil nil nil (if) nil nil) ((rslt) nil (endp) (let) nil nil nil) ((regs (reg (first (first regs)))) nil (`) nil nil nil nil) (nil nil nil nil (bind) nil nil) (nil nil (, (, (get-fnname reg)) ,) nil nil nil nil) ((reg) nil (,) nil (recursive-call) nil nil) ((st st rslt) nil (rest) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-wire-upds (nil nil nil (logic-wire-upds) nil nil nil) ((wires rslt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-reg-upds (nil nil nil nil (if) nil nil) ((rslt) nil (endp) (let) nil nil nil) ((regs) nil ((reg (first (first regs))) `) nil nil nil nil) (nil nil (args) nil (bind) nil nil) (nil nil (rest , ,) ((, (set-fnname reg))) nil nil nil) ((st) nil (first (, (next-fn reg)) ,) nil (recursive-call) nil nil) ((regs st st rslt) nil (,@ rest) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-load-upds (nil nil nil nil (if) nil nil) ((rslt) nil (endp) (let) nil nil nil) ((regs (reg (first (first regs)))) nil (`) nil nil nil nil) (nil nil nil nil (bind) nil nil) (nil nil (, ,) ((, (set-fnname reg))) nil nil nil) ((st) nil (,) (g) (recursive-call) nil nil) ((x st st rslt) nil (quote rest) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-extract-upds (nil nil nil nil (if) nil nil) ((rslt) nil (endp) (let) nil nil nil) ((regs (reg (first (first regs)))) nil (`) nil nil nil nil) (nil nil nil nil (s) nil nil) (nil nil (quote (, (get-fnname reg)) ,) nil nil nil nil) (nil nil (, ,) nil (recursive-call) nil nil) ((reg st st rslt) nil (rest) nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-step (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($exec-step) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-run1 (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($exec-run1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-load (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($exec-load) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-extract (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($exec-extract) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::exec-run (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) (($exec-run) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-exec (nil nil nil (let) nil nil nil) (nil nil (`) ((wires (get-wires defs))) nil nil nil) (nil nil (regs st) nil nil ((defun* (, (exec-step name)) ((, st)) :inline (declare (xargs :stobjs (, st))) (, (exec-var-binds regs st (exec-wire-upds wires (exec-reg-upds regs st st)))))) nil) (nil nil (get-regs stobj-name) nil nil (defun* defun defun defun) nil) ((defs name) nil (, (, st) declare , x declare , , (, st) declare , , x declare) (with-local-stobj) (if) nil nil) ((n x n) nil (exec-run1 zp , exec-load , exec-extract exec-run ,) (xargs) (bind exec-load-upds exec-extract-upds mv-let) (xargs xargs xargs) nil) ((name :stobjs :guard n st name st :stobjs :guard regs st st name :stobjs :guard regs st name :guard st rslt) nil (, natp , (, (exec-step name)) , (, (wf-logicp name)) , wf-rcdp quote rslt) ((, (exec-run1 name)) and let*) nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-thms (nil nil (`) nil nil nil nil) (nil nil nil nil nil ((local (defthm (, (symbol-append name (quote -extract-load))) (equal ((, (exec-extract name)) ((, (exec-load name)) x st) x) x)))) nil) (nil nil (local in-theory local local) nil nil nil nil) (nil nil nil (defthm defthm defthm) nil (disable) nil) (nil nil (, , , , , , ,) (equal equal equal) nil nil nil) (nil nil ((, (logic-step name)) logic-step exec-step exec-extract exec-load) (symbol-append (, (exec-extract name)) symbol-append (, (exec-extract name)) (, (logic-run name)) symbol-append (, (exec-run name)) (, (logic-run name))) nil nil nil) ((name x name name name name name x n name x n x n) nil (quote (, (exec-step name)) quote quote) ((, (exec-extract name)) (, (exec-run1 name)) (, (exec-extract name))) nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-top-fn (nil nil nil (symbol-append) nil nil nil) ((name) nil (quote) nil nil nil nil) ((run-) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::sim-top (nil nil (`) nil nil nil nil) (((defun (, (sim-top-fn name)) (x n) (declare (xargs :guard (and ((, (wf-logicp name)) x) (natp n)))) (mbe :logic ((, (logic-run name)) x n) :exec ((, (exec-run name)) x n)))) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/other-apps/records/recordsim.lisp::inv (nil nil nil (let) nil nil nil) (nil nil nil ((pc (g :pc (g (quote pc) x)))) (and) nil nil) (nil nil (rfile mem natp) (equal equal) nil nil nil) ((pc) (0) nil (g g g g) (list) nil nil) ((x x R rfile pc mem R pc) nil (quote quote quote) nil nil nil nil) ((rfile mem jmp0) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))