((/security/jfkr/jfkr.lisp::identityp (nil nil (integerp) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-constantsp (nil nil nil nil nil nil nil) (nil nil (alistp integerp integerp integerp integerp integerp integerp) (<= <=) nil nil nil) ((lst) (1 1) (id nonce dh-exponent private-key ip sa nonce dh-exponent) nil nil nil nil) ((lst lst lst lst lst lst lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-constantsp (nil nil nil nil nil nil nil) (nil nil (alistp integerp integerp integerp integerp integerp integerp integerp integerp) (<= <= <= <=) nil nil nil) ((lst) (1 1 1 1) (id nonce dh-exponent private-key ip sa nonce dh-exponent g b g b) nil nil nil nil) ((lst lst lst lst lst lst lst lst lst lst lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::public-constantsp (nil nil nil nil (and) nil nil) (nil nil (alistp integerp integerp) nil nil nil nil) ((lst) nil (public-key-i public-key-r) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-constants (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((lst) nil (quote) nil nil nil nil) ((recursive-call) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-constants (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((lst) nil (quote) nil nil nil nil) ((recursive-call) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::public-constants (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((lst) nil (quote) nil nil nil nil) ((recursive-call) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::constantsp (nil nil nil nil nil nil (and)) (nil nil (initiator-constantsp responder-constantsp public-constantsp) (CRYPTO::public-private-key-pairp CRYPTO::public-private-key-pairp) nil nil nil) (nil nil (initiator-constants responder-constants public-constants public-key-r private-key public-key-i private-key) nil nil nil nil) ((lst lst lst) nil (public-constants responder-constants public-constants initiator-constants) nil nil nil nil) ((lst lst lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::msg1 (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((s) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::msg2 (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((s) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::msg3 (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((s) (3) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::msg4 (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((s) (4) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::compute-Ei (nil nil nil (CRYPTO::encrypt-symmetric-list) nil nil nil) ((session-key) nil nil nil (list) nil nil) ((IDi SAi SigKi) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::compute-Er (nil nil nil (CRYPTO::encrypt-symmetric-list) nil nil nil) ((session-key) nil nil nil (list) nil nil) ((IDr SAr SigKr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-msg1p (nil nil nil nil (and) nil nil) (nil nil (alistp integerp integerp) nil nil nil nil) ((msg) nil (Ni-msg src-ip-msg) nil nil nil nil) ((msg msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::badly-forged-msg1p ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-msg2p (nil nil nil nil nil nil nil) (nil nil (alistp integerp integerp integerp integerp integerp integerp) (<= <=) nil nil nil) ((msg) (1 1) (Ni-msg Nr-msg Nr-msg Xr-msg Xr-msg G-msg B-msg Tr-msg) nil nil nil nil) ((msg msg msg msg msg msg msg msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::badly-forged-msg2p ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-msg3p (nil nil nil nil nil nil nil) (nil nil (alistp integerp integerp integerp integerp integerp integer-listp integerp integerp) (<= <=) nil nil nil) ((msg) (0 0) (Ni-msg Nr-msg Xi-msg Xi-msg Xr-msg Xr-msg Tr-msg Er-msg Hi-msg Src-ip-msg) nil nil nil nil) ((msg msg msg msg msg msg msg msg msg msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-msg4p (nil nil nil nil (and) nil nil) (nil nil (alistp integer-listp integerp) nil nil nil nil) ((msg) nil (Er-msg Hr-msg) nil nil nil nil) ((msg msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-network-state-after-step1p (nil nil (well-formed-msg1p) nil nil nil nil) (nil nil (msg1) nil nil nil nil) ((network) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-network-state-after-step2p (nil nil nil (and) nil nil nil) (nil nil (well-formed-msg1p well-formed-msg2p) nil nil nil nil) (nil nil (msg1 msg2) nil nil nil nil) ((network network) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-network-state-after-step3p (nil nil nil nil (and) nil nil) (nil nil (well-formed-msg1p well-formed-msg2p well-formed-msg3p) nil nil nil nil) (nil nil (msg1 msg2 msg3) nil nil nil nil) ((network network network) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-network-state-after-step4p (nil nil nil nil nil (and) nil) (nil nil (well-formed-msg1p well-formed-msg2p well-formed-msg3p well-formed-msg4p) nil nil nil nil) (nil nil (msg1 msg2 msg3 msg4) nil nil nil nil) ((network network network network) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::well-formed-network-statep (nil nil nil nil nil nil (or)) (nil nil (null well-formed-network-state-after-step1p well-formed-network-state-after-step2p well-formed-network-state-after-step3p well-formed-network-state-after-step4p) nil nil nil nil) ((network network network network network) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::protocol-failure (nil nil nil (and) nil nil nil) (nil nil (null done) nil nil nil nil) ((my-state) nil (success) nil nil nil nil) ((my-state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::protocol-success (nil nil nil (and) nil nil nil) (nil nil (success done) nil nil nil nil) ((my-state my-state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-state-after-step-1p (nil nil (declare) nil nil nil nil) (nil nil (ignore) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-state-after-step-2p (nil nil nil nil nil nil nil) (nil nil (initiator-state-after-step-1p integerp integerp integerp integerp) (<= <=) nil nil nil) ((s) (0 0) (Nr Xi Xi Xr Xr session-key) nil nil nil nil) ((s s s s s s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-state-after-step-3p (nil nil nil nil nil (and) nil) (nil nil (initiator-state-after-step-2p success done identityp) nil nil nil nil) ((s s s) nil (id-r) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-state-after-step-1p (nil nil (declare) nil nil nil nil) (nil nil (ignore) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-state-after-step-2p (nil nil nil nil nil nil (and)) (nil nil (responder-state-after-step-1p session-key id-i) (assoc-equal assoc-equal) nil nil nil) ((s s s s s) nil (quote quote) nil nil nil nil) ((success done) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-step1-aux (nil nil nil (let*) nil nil nil) (nil nil ((network-update (list (cons (quote Ni) (nonce my-constants)) (cons (quote Src-ip) (ip my-constants))))) (mv) nil nil nil) (nil nil (my-update) (append) (acons) nil nil) ((nil network-update network-s my-update my-s) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/security/jfkr/jfkr.lisp::initiator-step1 (nil nil nil nil (if) nil nil) ((initiator-step1-prev-msg-ok get-mv-protocol-failure) nil nil nil nil (initiator-step1-aux) nil) ((network-s my-s my-constants public-constants) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::run-1-step-honest (nil nil nil nil (mv-let) nil nil) (nil nil (network-s-after-1) nil (mv) (initiator-step1) nil) ((initiator-s-after-1 network-s initiator-s initiator-constants public-constants network-s-after-1 initiator-s-after-1 responder-s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-step1-aux (nil nil nil (let*) nil nil nil) (nil nil nil (mv) nil nil nil) (nil nil (Ni Src-ip Nr g dh-exponent b Xr private-key Tr network-update my-update) (append) (acons) nil nil) ((nil network-update network-s my-update my-s) (2) (ni-msg Src-ip-msg nonce g dh-exponent b private-key) nil (CRYPTO::compute-public-dh-value) nil (compute-tr)) ((prev-msg prev-msg my-constants my-constants my-constants my-constants g dh-exponent b my-constants Xr Nr Ni src-ip private-key) nil nil (cons cons cons cons cons cons) nil nil nil) ((Ni Nr Xr G B Tr) nil (quote quote quote quote quote quote) nil nil nil nil) ((Ni Nr Xr G B Tr) nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-step1-prev-msg-ok (nil nil (well-formed-msg1p) nil nil nil nil) ((msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-step1 (nil nil nil nil (if) nil nil) ((get-mv-protocol-failure) nil (responder-step1-prev-msg-ok) nil nil (responder-step1-aux) nil) ((network-s my-s my-constants public-constants) nil (msg1) nil nil nil nil) ((network-s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::run-2-steps-honest (nil nil nil nil (mv-let) nil nil) (nil nil (network-s-after-1) nil (mv-let) (initiator-step1) nil) ((initiator-s-after-1 network-s initiator-s initiator-constants public-constants) nil (network-s-after-2) nil (mv) (responder-step1) nil) ((responder-s-after-2 network-s-after-1 responder-s responder-constants public-constants network-s-after-2 initiator-s-after-1 responder-s-after-2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-step2-aux (nil nil nil (let*) nil nil nil) (nil nil nil (mv) nil nil nil) (nil nil (Ni Nr dh-exponent G B Xi Xr Tr ID-i SA-i private-key Sig-Ki dh-key session-key Ei Hi src-ip network-update my-update) (append) (acons) nil nil) ((network-update network-s my-update my-s) (3) (nonce Nr-msg dh-exponent G-msg B-msg Xr-msg Tr-msg id sa private-key ip) (compute-hi) (CRYPTO::compute-public-dh-value CRYPTO::compute-dh-key compute-session-key) (compute-ei) (list)) ((my-constants prev-msg my-constants prev-msg prev-msg g dh-exponent b prev-msg prev-msg my-constants my-constants my-constants Ni Nr Xi Xr G B private-key Xr dh-exponent b Ni Nr dh-key ID-i SA-i Sig-Ki session-key Ei Session-key my-constants) nil nil (cons cons cons cons cons cons cons cons cons cons cons cons cons) nil nil nil) ((Ni Nr Xi Xr Tr Ei Hi Src-ip Ni Nr Xi Xr session-key) nil (quote quote quote quote quote quote quote quote quote quote quote quote quote) nil nil nil nil) ((Ni Nr Xi Xr Tr Ei Hi Src-ip Ni Nr Xi Xr session-key) nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-step2-prev-msg-ok (nil nil nil (and) nil nil nil) (nil nil (well-formed-msg2p) (equal) nil nil nil) ((msg2) nil (Ni-msg nonce) nil nil nil nil) ((msg2 my-constants) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-step2 (nil nil nil nil (if) nil nil) ((get-mv-protocol-failure) nil nil nil nil (initiator-step2-prev-msg-ok initiator-step2-aux) nil) ((my-s my-constants public-constants network-s my-s my-constants public-constants) nil (msg2) nil nil nil nil) ((network-s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::run-3-steps-honest (nil nil nil nil (mv-let) nil nil) (nil nil (network-s-after-1) nil (mv-let) (initiator-step1) nil) ((initiator-s-after-1 network-s initiator-s initiator-constants public-constants) nil (network-s-after-2) nil (mv-let) (responder-step1) nil) ((responder-s-after-2 network-s-after-1 responder-s responder-constants public-constants) nil (network-s-after-3) nil (mv) (initiator-step2) nil) ((initiator-s-after-3 network-s-after-2 initiator-s-after-1 initiator-constants public-constants network-s-after-3 initiator-s-after-3 responder-s-after-2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-step2-aux (nil nil nil nil (let*) nil nil) (nil nil (declare) (mv) nil nil nil) (nil nil (Xr Nr Xi Ni Tr-msg Ei Hi-msg Src-ip dh-exponent b g dh-key session-key hi-calc private-key tr-calc ei-decrypted id-i sa-i sig-ki-msg public-key-i SigKi-calc sa-r id-r sig-kr er hr success done my-update network-update ignore) (append) (acons) nil nil) ((t sa-i network-update network-s my-update my-s) (4) (Xr-msg Nr-msg Xi-msg Ni-msg Tr-msg Ei-msg Hi-msg src-ip-msg dh-exponent b g private-key public-key-i sa id) (compute-hi CRYPTO::decrypt-symmetric-list nth nth nth compute-hr list) (CRYPTO::compute-dh-key compute-session-key and) (compute-er list) (compute-tr compute-sig-kr)) ((prev-msg prev-msg prev-msg prev-msg prev-msg prev-msg prev-msg prev-msg my-constants my-constants my-constants Xi dh-exponent b Ni Nr dh-key Ei Session-key my-constants Ni Nr Xr src-ip private-key ei session-key ei-decrypted ei-decrypted ei-decrypted public-constants Ni Nr Xi Xr G B public-key-i my-constants my-constants Xi Xr Ni Nr private-key ID-r sa-r sig-kr session-key Er session-key) (0 1 2) nil (equal equal equal cons cons cons cons cons cons) nil nil nil) ((sig-ki-msg SigKi-calc tr-msg tr-calc hi-msg hi-calc Id-i session-key success done er hr) nil (quote quote quote quote quote quote) nil nil nil nil) ((ID-i session-key success done er hr) nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-step2-prev-msg-ok (nil nil nil (and) nil nil nil) (nil nil (well-formed-msg3p) nil (let*) nil nil) ((prev-msg) nil (declare) nil nil nil (and)) (nil nil (Nr-msg Xi-msg Ni-msg Tr-msg Ei-msg Hi-msg Src-ip-msg Nr-c dh-exponent B-c G-c Xr-c dh-key-calc session-key-calc hi-calc private-key tr-calc Ei-decrypted id-i sa-i sig-ki-msg public-key-i SigKi-calc sa-r id-r sig-kr er hr) (equal equal equal equal equal) (ignore) nil nil) ((id-i sa-i hr Nr-msg Nr-c Xr-msg Xr-c tr-msg tr-calc hi-msg hi-calc sig-ki-msg SigKi-calc) nil (Nr-msg Xi-msg Ni-msg Tr-msg Ei-msg Hi-msg src-ip-msg nonce dh-exponent b g private-key public-key-i sa id) (compute-hi CRYPTO::decrypt-symmetric-list nth nth nth compute-hr) (CRYPTO::compute-public-dh-value CRYPTO::compute-dh-key compute-session-key) (compute-er) (compute-tr compute-sig-kr)) ((prev-msg prev-msg prev-msg prev-msg prev-msg prev-msg prev-msg my-constants my-constants my-constants my-constants G-c B-c Xi-msg dh-exponent B-c Ni-msg Nr-c dh-key-calc Ei-msg session-key-calc my-constants Ni-msg Nr-c Xr-c src-ip-msg private-key Ei-msg session-key-calc Ei-decrypted Ei-decrypted Ei-decrypted public-constants Ni-msg Nr-msg Xi-msg Xr-msg G-c B-c public-key-i my-constants my-constants Ni-msg Nr-c Xi-msg Xr-c private-key ID-r sa-r sig-kr session-key-calc Er session-key-calc) (0 1 2) (dh-exponent) nil nil nil nil) ((my-constants) nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::badly-forged-msg3p-old (nil nil nil (let*) nil nil nil) (nil nil (not) nil ((dh-key (CRYPTO::compute-dh-key (xi-msg msg) (dh-exponent responder-constants) (b responder-constants)))) nil nil) (nil nil (session-key SigKi Ei-decrypted) (equal) nil nil nil) ((SigKi) nil nil (CRYPTO::decrypt-symmetric-list nth) (compute-session-key) nil nil) ((dh-key initiator-private-key session-key Ei-decrypted) (2) (Ni-msg Nr-msg Ni-msg Nr-msg Xi-msg Xr-msg g b Ei-msg) nil nil nil nil) ((msg msg msg msg msg msg responder-constants responder-constants msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::badly-forged-msg3p (nil nil nil (let*) nil nil nil) (nil nil (not) nil ((dh-key (CRYPTO::compute-dh-key (xi-msg msg) (dh-exponent responder-constants) (b responder-constants)))) nil nil) (nil nil (session-key SigKi Ei-decrypted) (equal) nil nil nil) ((SigKi) nil nil (CRYPTO::decrypt-symmetric-list nth) (compute-session-key) nil nil) ((dh-key initiator-public-key session-key Ei-decrypted) (2) (Ni-msg Nr-msg Ni-msg Nr-msg Xi-msg Xr-msg g b Ei-msg) nil nil nil nil) ((msg msg msg msg msg msg responder-constants responder-constants msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::responder-step2 (nil nil nil nil (if) nil nil) ((get-mv-protocol-failure) nil nil nil (responder-step2-prev-msg-ok) (responder-step2-aux) nil) ((my-constants public-constants network-s my-s my-constants public-constants) nil (msg3) nil nil nil nil) ((network-s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::run-4-steps-honest (nil nil nil nil (mv-let) nil nil) (nil nil (network-s-after-1) nil (mv-let) (initiator-step1) nil) ((initiator-s-after-1 network-s initiator-s initiator-constants public-constants) nil (network-s-after-2) nil (mv-let) (responder-step1) nil) ((responder-s-after-2 network-s-after-1 responder-s responder-constants public-constants) nil (network-s-after-3) nil (mv-let) (initiator-step2) nil) ((initiator-s-after-3 network-s-after-2 initiator-s-after-1 initiator-constants public-constants) nil (network-s-after-4) nil (mv) (responder-step2) nil) ((responder-s-after-4 network-s-after-3 responder-s-after-2 responder-constants public-constants network-s-after-4 initiator-s-after-3 responder-s-after-4) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-step3-aux (nil nil nil nil (let*) nil nil) (nil nil (declare) (mv) nil nil nil) (nil nil (er Hr-msg session-key er-decrypted id-r sa-r sig-kr-msg Xr Nr Xi Ni public-key-r SigKr-calc hr-calc success done my-update network-update ignore) (append) (acons) nil nil) ((t nil sa-r network-update network-s my-update my-s) (5) (er-msg Hr-msg session-key Xr Nr Xi nonce public-key-r) (CRYPTO::decrypt-symmetric-list nth nth nth compute-hr and) (list) nil (verify-sig-kr)) ((prev-msg prev-msg my-s er session-key er-decrypted er-decrypted er-decrypted my-s my-s my-s my-constants public-constants Ni Nr Xi Xr public-key-r Er session-key) (0 1 2) nil (equal equal cons cons cons) nil nil nil) ((sig-kr-msg SigKr-calc hr-msg hr-calc Id-r success done) nil (quote quote quote) nil nil nil nil) ((ID-r success done) nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-step3-prev-msg-ok (nil nil nil (and) nil nil nil) (nil nil (well-formed-msg4p) nil (let*) nil nil) ((prev-msg) nil (declare) (and) nil nil nil) (nil nil (Hr-msg Session-key Er-decrypted id-r sa-r sig-kr-msg Xr-s Nr-s Xi-s Ni-c public-key-r SigKr-calc hr-calc) (ignore equal equal) nil nil nil) ((id-r sa-r sig-kr-msg SigKr-calc hr-msg hr-calc) nil (Hr-msg session-key Xr Nr Xi nonce public-key-r) (CRYPTO::decrypt-symmetric-list nth nth nth compute-hr) nil nil (verify-sig-kr)) ((prev-msg my-s Er-msg session-key er-decrypted er-decrypted er-decrypted my-s my-s my-s my-constants public-constants Ni-c Nr-s Xi-s Xr-s public-key-r Er-msg session-key) (0 1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::initiator-step3 (nil nil nil nil (if) nil nil) ((get-mv-protocol-failure) nil nil nil nil (initiator-step3-prev-msg-ok initiator-step3-aux) nil) ((my-s my-constants public-constants network-s my-s my-constants public-constants) nil (msg4) nil nil nil nil) ((network-s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::badly-forged-msg4p (nil nil nil nil (let*) nil nil) (nil nil (declare not) ((dh-key (CRYPTO::compute-dh-key (Xr initiator-s) (dh-exponent initiator-constants) (b initiator-s)))) nil nil nil) (nil nil (SigKr Er-decrypted ignore) (equal) nil nil nil) ((dh-key SigKr) nil nil (CRYPTO::decrypt-symmetric-list nth) nil nil (verify-sig-Kr)) ((responder-public-key Er-decrypted) (2) (Nonce Nr Xi Xr Er-msg session-key) nil nil nil nil) ((initiator-constants initiator-s initiator-s initiator-s msg initiator-s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::run-5-steps-honest (nil nil nil nil (mv-let) nil nil) (nil nil (network-s-after-1) nil (mv-let) (initiator-step1) nil) ((initiator-s-after-1 network-s initiator-s initiator-constants public-constants) nil (network-s-after-2) nil (mv-let) (responder-step1) nil) ((responder-s-after-2 network-s-after-1 responder-s responder-constants public-constants) nil (network-s-after-3) nil (mv-let) (initiator-step2) nil) ((initiator-s-after-3 network-s-after-2 initiator-s-after-1 initiator-constants public-constants) nil (network-s-after-4) nil (mv-let) (responder-step2) nil) ((responder-s-after-4 network-s-after-3 responder-s-after-2 responder-constants public-constants) nil (network-s-after-5) nil (mv) (initiator-step3) nil) ((initiator-s-after-5 network-s-after-4 initiator-s-after-3 initiator-constants public-constants network-s-after-5 initiator-s-after-5 responder-s-after-4) nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::example-correct-message1 (nil nil nil (let-with-bindings-from-all-constants) nil nil nil) (nil nil (declare) (let) nil nil nil) (((prev-msg (msg1 network))) nil nil (and) nil nil nil) ((ipr-c public-key-i-c public-key-r-c tr-c hi-c hr-c) nil nil (equal equal) nil nil nil) ((Ni-c SrcIP-c) nil (Ni-msg Src-ip-msg) nil nil nil nil) ((prev-msg prev-msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::example-correct-message2 (nil nil nil (let-with-bindings-from-all-constants) nil nil nil) (nil nil (declare) (let) nil nil nil) (((prev-msg (msg2 network))) nil nil nil nil nil (ignore and)) ((ipr-c public-key-r-c public-key-i-c hr-c hi-c) nil nil (equal equal equal equal equal) nil nil nil) ((Ni-c Nr-c Xr-c G-c Tr-c) nil (Ni-msg Nr-msg Xr-msg g-msg tr-msg) nil nil nil nil) ((prev-msg prev-msg prev-msg prev-msg prev-msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::example-correct-message3 (nil nil nil (let-with-bindings-from-all-constants) nil nil nil) (nil nil (declare) (let) nil nil nil) (((prev-msg (msg3 network))) nil nil nil nil (ignore) nil) ((ipr-c public-key-i-c public-key-r-c hr-c) nil nil (equal equal equal equal equal equal equal) nil nil nil) ((Ni-c Nr-c Xi-c Xr-c Tr-c Ei-c Hi-c) nil (Ni-msg Nr-msg Xi-msg Xr-msg tr-msg Ei-msg Hi-msg) nil nil nil nil) ((prev-msg prev-msg prev-msg prev-msg prev-msg prev-msg prev-msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/jfkr/jfkr.lisp::example-correct-message4 (nil nil nil (let-with-bindings-from-all-constants) nil nil nil) (nil nil (declare) (let) nil nil nil) (((prev-msg (msg4 network))) nil nil (and) nil nil (ignore)) ((ipr-c public-key-i-c public-key-r-c tr-c hi-c) nil nil (equal equal) nil nil nil) ((Er-c Hr-c) nil (Er-msg Hr-msg) nil nil nil nil) ((prev-msg prev-msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))