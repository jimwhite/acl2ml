((/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::zero-sat-plus-stobj (nil nil nil (let*) nil nil nil) (($sat-plus) nil (($sat-plus (update-fn-call-to-ivar-alist (eriks-ht-reset) $sat-plus))) nil nil nil nil) (nil nil ($sat-plus) nil nil nil nil) (nil nil nil (update-extra-fun-world) nil nil nil) ((nil $sat-plus) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::create-uninterpreted-function-entry (nil nil nil (cons) nil nil nil) ((var call) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::uce-args (nil nil (cddr) nil nil nil nil) ((uc-entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::uce-return-var (nil nil (car) nil nil nil nil) ((uc-entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::sig-type-bv-size (nil nil nil nil (cond) nil nil) (nil nil ((equal type (quote bool)) (and (consp type) (equal (car type) (quote bitvec))) t) nil nil nil nil) (nil (0) (cadr) nil nil (er) nil) ((type hard Unrecognized type: ~x0~% type) nil (quote) nil nil nil nil) ((recursive-call) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::get-ivar-if-present (nil nil (cdr) nil nil nil nil) (nil nil nil (eriks-ht-lookup) nil nil nil) ((call) nil (fn-call-to-ivar-alist) nil nil nil nil) (($sat-plus) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::add-new-fun-call (nil nil nil (let*) nil nil nil) (($sat-plus) nil nil ((alist (fn-call-to-ivar-alist $sat-plus))) nil nil nil) (nil nil (alist $sat-plus) nil nil nil nil) (nil nil nil (update-fn-call-to-ivar-alist) (eriks-ht-set) nil nil) ((call ivar alist alist $sat-plus) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::lookup-extra-fun-sig (nil nil nil (let) nil nil nil) (((extra-fun-world (extra-fun-world $sat-plus))) nil nil nil nil nil (getprop)) ((fn nil extra-fun-world) nil (quote quote) nil nil nil nil) ((acl2::sig extra-fun-world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::add-extra-fn-list (nil nil nil (cond) nil nil nil) (nil nil ((endp extra-fn-list) t) nil nil nil nil) (($sat-plus) nil nil (let*) nil nil nil) (nil nil nil (recursive-call) nil ((fn (car (car extra-fn-list)))) nil) (($sat-plus) nil (sig extra-fun-world extra-fun-world $sat-plus cdr) nil nil nil nil) ((extra-fn-list) nil (cdr extra-fun-world) (update-extra-fun-world) nil (putprop) nil) (($sat-plus fn sig extra-fun-world extra-fun-world $sat-plus) nil (car quote) nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::extra-funp (nil nil nil (lookup-extra-fun-sig) nil nil nil) ((fn $sat-plus) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::update-uce-list-pair (nil nil nil (cond) nil nil nil) (nil nil (const-argsp t) nil nil nil nil) (nil nil nil (cons cons) nil nil nil) (nil nil (cdr car) (cons cons) nil nil nil) ((new-uce uce-list-pair uce-list-pair new-uce) nil (car cdr) nil nil nil nil) ((uce-list-pair uce-list-pair) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::const-uce-list (nil nil (car) nil nil nil nil) ((uce-list-pair) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::non-const-uce-list (nil nil (cdr) nil nil nil nil) ((uce-list-pair) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::lookup-extra-fun-call-list (nil nil nil (let*) nil nil nil) (nil nil ((extra-fun-world (extra-fun-world $sat-plus))) (cond) nil nil nil) (nil nil (uce-list-pair const-argsp t) nil nil nil nil) (nil nil (non-const-uce-list) (revappend) nil nil (getprop)) ((fn nil extra-fun-world uce-list-pair) nil (quote quote non-const-uce-list const-uce-list) nil nil nil nil) ((acl2::uce-list-pair extra-fun-world uce-list-pair uce-list-pair) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::add-new-extra-fun-call (nil nil nil (let*) nil nil nil) (($sat-plus) nil nil nil nil nil nil) (nil nil (new-uce extra-fun-world uce-list-pair uce-list-pair extra-fun-world $sat-plus) nil nil nil nil) (nil nil (extra-fun-world) (create-uninterpreted-function-entry update-extra-fun-world) (update-uce-list-pair) (putprop) (getprop)) ((var call $sat-plus fn nil extra-fun-world new-uce const-argsp uce-list-pair fn uce-list-pair extra-fun-world extra-fun-world $sat-plus) nil (quote quote quote) nil nil nil nil) ((acl2::uce-list-pair extra-fun-world acl2::uce-list-pair) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::sp-constp (nil nil (quotep) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::sp-const-val (nil nil nil (cond) nil nil nil) (nil nil ((quotep x) t) nil nil nil nil) ((x) nil (unquote) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::gen-eq-todo-expr (nil nil nil nil nil (cond) nil) (nil nil ((equal arg1 arg2) (and (sp-constp arg1) (sp-constp arg2)) (term-order arg1 arg2) t) nil nil nil nil) (nil nil (quote) nil (cond cond) (cond) nil) (nil nil (quote (equal type (quote bool)) (equal type (quote nat)) (and (consp type) (equal (car type) (quote bitvec))) t (equal type (quote bool)) (and (consp type) (equal (car type) (quote bitvec))) t (equal type (quote bool)) (and (consp type) (equal (car type) (quote bitvec))) t) nil nil nil nil) ((t) nil (` ` ` ` ` ` `) nil (er er er) nil nil) ((hard Not supported
 hard Not supported
 hard Not supported
) nil (quote quote quote quote quote quote quote) (iff) (bv-eq-raw bv-eq-raw) nil nil) ((recursive-call recursive-call recursive-call) nil (, , , sat::i-expression sat::i-expression quote sat::i-expression sat::i-expression quote sat::i-expression sat::i-expression) (iff) nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::args-bv-eq-todo-expr (nil nil nil (cond) nil nil nil) (nil nil ((endp args1) t) nil nil nil nil) ((acc-body) nil nil (let) nil nil nil) (((bv-eq-expr (gen-eq-todo-expr (car arg-rv-types) (car args1) (car args2)))) nil nil nil (cond) nil nil) (nil nil ((not (quotep bv-eq-expr)) (unquote bv-eq-expr) t) nil nil nil nil) (nil nil (`) nil (cond) (recursive-call) nil) ((acc-body) nil ((not (quotep acc-body)) (unquote acc-body) t cdr cdr cdr quote) nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::extra-fun-todo-expr (nil nil nil (cond) nil nil nil) (nil nil ((endp call-list) t) nil nil nil nil) ((acc-body) nil nil (let*) nil nil nil) (nil nil nil nil ((uc-entry (car call-list)) cond) nil nil) (nil nil (uce-args uce-rv bv-eq-expr (not (quotep bv-eq-expr)) (unquote bv-eq-expr) t) nil nil nil nil) (nil nil (uce-args uce-return-var) nil nil (args-bv-eq-todo-expr recursive-call recursive-call recursive-call) nil) ((uc-entry uc-entry arg-rv-types args uce-args arg-rv-types args arg-rv-types args uce-rv arg-rv-types args acc-body) nil (quote cdr ` cdr cdr) nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::constant-listp (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (quotep (car x)) t) nil nil nil nil) ((t nil) nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::create-todo-args-list (nil nil nil (cond) nil nil nil) (nil nil ((endp iargs-list) t) nil nil nil nil) (nil nil nil (revappend recursive-call) nil nil nil) ((acc nil) nil (cdr) (cons) nil nil nil) ((iargs-list acc) nil (`) nil nil nil nil) (nil nil (sat::i-expression) nil nil nil nil) (nil nil (,) nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::lookup-ivar-from-fn-call (nil nil nil (let*) nil nil nil) (((ivar (get-ivar-if-present expr $sat-plus))) nil nil nil nil (cond) nil) (nil nil (ivar (atom expr) (not (extra-funp (car expr) $sat-plus)) t) nil nil nil nil) (nil nil nil (let) (mv mv-let mv-let) nil nil) ((ivar $sat $sat-plus (t-args (create-todo-args-list (cdr expr) nil))) nil (ivar sat::new-top-i-var ivar sat::new-top-i-var) (let* let*) (mv-let) nil nil) (($sat $sat ($sat-plus (add-new-fun-call ivar expr $sat-plus)) $sat $sat) nil (ivar) (let* (const-argsp (constant-listp (cdr expr))) cond) (mv sat::new-i-variable) nil nil) ((ivar $sat $sat-plus $sat sat::*empty-at-entry* $sat ($sat-plus (add-new-fun-call ivar expr $sat-plus))) nil (call-list sig (endp call-list) t) (cons) (mv) nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::smt-sat-add-expr (nil nil nil nil (mv-let) nil nil) (nil nil nil (i-expr) (mv-let) (redundancy-removal) nil) (($sat $sat-plus expr nil $sat $sat-plus) nil ($sat) nil (mv) nil (sat::add-expr-ivar-alist)) ((state nil nil $sat state $sat $sat-plus state) nil (`) nil nil nil nil) (nil nil (sat::i-expression) nil nil nil nil) (nil nil (,) nil nil nil nil) ((i-expr) nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::smt-sat-solve (nil nil nil (let*) nil nil nil) ((($sat (sat::update-problem-stack-depth 2 $sat))) nil nil (sat-solve) nil nil nil) (($sat state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/bv-smt-solver/redundancy-removal.lisp::smt-sat-add-expr (nil nil nil (let*) nil nil nil) (nil nil (($sat (sat::update-problem-stack-depth 2 $sat))) nil (mv-let) nil nil) (nil nil ($sat) (i-expr) (mv-let) (redundancy-removal) nil) (($sat $sat-plus expr nil $sat $sat-plus) nil (f-expr) (sat::update-need-more-traversals sat::i-expr-to-f-expr) (mv-let) nil nil) ((t $sat $sat i-expr $sat) nil ($sat) nil (sat::add-cnf-clause mv) nil nil) ((state $sat state $sat $sat-plus state) nil (`) nil nil nil nil) (((, f-expr)) nil nil nil nil nil nil)))