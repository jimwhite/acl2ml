((/centaur/gl/g-predicates.lisp::strip-correct-lemmas (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((alist) nil (strip-cars recursive-call) nil nil nil nil) (nil nil (cddr cdr) nil nil nil nil) ((alist) nil (car) nil nil nil nil) ((alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/g-predicates.lisp::def-g-predicate-fn (nil nil nil (let*) nil nil nil) (nil nil (`) ((gfn (gl-fnsym fn))) nil nil nil) (nil nil (booleanp-thmname x) nil nil nil nil) ((nil logic) nil (car local local local local) (def-g-fn) nil nil (incat encapsulate encapsulate encapsulate)) ((:: -IS-BOOLEANP formals nil nil nil) nil (quote symbol-package-name symbol-name , ` in-theory local ,@ ,@ local ,@ ,@ local ,@ ,@) (def-ruleset! defthm) (def-gobjectp-thm verify-g-guards) (defthm def-g-correct-thm) nil) ((gl-thm::foo fn fn g-correct-lemmas fn tag-of-cons :hints (Goal :in-theory (enable tag)) encap gobj-encap :hints encap guard-encap :hints encap corr-encap eval-g-base :hints) nil (strip-correct-lemmas disable , booleanp in-theory , ` in-theory , quote in-theory , `) (equal) (if) nil nil) ((booleanp-thmname a fn fn fn) nil (atom (, (quote (, fn))) , (, fn) tag ,) (table-alist e/d** (goal :induct ((, gfn) (, (quote (, x))) hyp clk) :expand (((, gfn) (, (quote (, x))) hyp clk))) e/d**) (e/d* (goal :in-theory (enable (:induction (, gfn))) :induct ((, gfn) (, (quote (, x))) hyp clk) :expand (((, gfn) (, (quote (, x))) hyp clk)))) nil nil)))