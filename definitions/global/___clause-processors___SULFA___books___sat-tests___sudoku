((/clause-processors/SULFA/books/sat-tests/sudoku.lisp::member-n (nil nil nil nil (cond) nil nil) (nil nil ((zp n) (equal a (car x)) t) nil nil nil nil) ((nil t) nil nil nil (recursive-call) nil nil) ((a) nil (1- cdr) nil nil nil nil) ((n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::duplicatesp (nil nil nil nil (cond) nil nil) (nil nil ((zp row-n) (member-n (1- row-n) (car x) (cdr x)) t) nil nil nil nil) ((nil t) nil nil (recursive-call) nil nil nil) (nil nil (1- cdr) nil nil nil nil) ((row-n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::good-rowsp (nil nil nil nil (cond) nil nil) (nil nil ((zp row-num) (duplicatesp 9 (car x)) t) nil nil nil nil) ((t nil) nil nil (recursive-call) nil nil nil) (nil nil (1- cdr) nil nil nil nil) ((row-num x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::make-column (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil nil (nth) (recursive-call) nil nil) ((col-num col-num) nil (car 1- cdr) nil nil nil nil) ((x n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::good-columnsp (nil nil nil nil (cond) nil nil) (nil nil ((zp col-num) (duplicatesp 9 (make-column (1- col-num) 9 x)) t) nil nil nil nil) ((t nil) nil nil (recursive-call) nil nil nil) ((x) nil (1-) nil nil nil nil) ((col-num) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::make-cell (nil nil nil (cond) nil nil nil) (nil nil ((zp element-num) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil nil (nth) (recursive-call) nil nil) ((cell-num x) nil (1-) (+ nth) nil nil nil) ((x element-num) nil nil (mod * +) nil nil nil) (nil (3 3) (1-) (mod floor *) nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::good-cellsp (nil nil nil nil (cond) nil nil) (nil nil ((zp cell-num) (duplicatesp 9 (make-cell (1- cell-num) 9 x)) t) nil nil nil nil) ((t nil) nil nil (recursive-call) nil nil nil) ((x) nil (1-) nil nil nil nil) ((cell-num) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::valid-numbers-rowp (nil nil nil nil (cond) nil nil) (nil nil ((zp n) (not (or (equal (car x) 1) (equal (car x) 2) (equal (car x) 3) (equal (car x) 4) (equal (car x) 5) (equal (car x) 6) (equal (car x) 7) (equal (car x) 8) (equal (car x) 9))) t) nil nil nil nil) ((t nil) nil nil (recursive-call) nil nil nil) (nil nil (1- cdr) nil nil nil nil) ((n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::valid-numbersp (nil nil nil nil (cond) nil nil) (nil nil ((zp row-n) (not (valid-numbers-rowp 9 (car x))) t) nil nil nil nil) ((t nil) nil nil (recursive-call) nil nil nil) (nil nil (1- cdr) nil nil nil nil) ((row-n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::good-solutionp (nil nil nil nil nil (and) nil) (nil nil nil (valid-numbersp good-rowsp good-columnsp good-cellsp) nil nil nil) ((x x x x) (9 9 9 9) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::satisfies-constraints-rowp (nil nil nil nil nil (cond) nil) (nil nil ((endp constraints) (eq (car constraints) (quote X)) (not (eq (car constraints) (car x))) t) nil nil nil nil) ((t nil) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (cdr cdr cdr cdr) nil nil nil nil) ((constraints x constraints x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/sudoku.lisp::satisfies-constraintsp (nil nil nil nil (cond) nil nil) (nil nil ((endp constraints) (not (satisfies-constraints-rowp (car constraints) (car x))) t) nil nil nil nil) ((t nil) nil nil (recursive-call) nil nil nil) (nil nil (cdr cdr) nil nil nil nil) ((constraints x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))