((/nonstd/misc/dijkstra-shortest-path.lisp::del (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((y) nil (cdr) (equal cons) nil nil nil) ((x y) nil (car car) (recursive-call) nil nil nil) ((y y x) nil (cdr) nil nil nil nil) ((y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::memp (nil nil nil nil (if) nil nil) ((nil) nil (endp) (or) nil nil nil) ((x) nil nil (equal recursive-call) nil nil nil) ((e e) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::setp (nil nil nil nil (cond) nil nil) (nil nil ((endp s) (memp (car s) (cdr s)) t) nil nil nil nil) ((t nil) nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::my-union (nil nil nil nil (cond) nil nil) (nil nil ((endp s1) (memp (car s1) s2) t) nil nil nil nil) ((s2) nil nil (recursive-call cons) nil nil nil) ((s2) nil (cdr car) (recursive-call) nil nil nil) ((s1 s1 s2) nil (cdr) nil nil nil nil) ((s1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::my-subsetp (nil nil nil (cond) nil nil nil) (nil nil ((endp s1) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (memp recursive-call) nil nil nil) ((s2 s2) nil (car cdr) nil nil nil nil) ((s1 s1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::infinitep (nil nil (null) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::lt (nil nil nil nil (cond) nil nil) (nil nil ((infinitep x) (infinitep y) t) nil nil nil nil) ((nil t) nil nil (<) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::plus (nil nil nil (cond) nil nil nil) (nil nil ((or (infinitep x) (infinitep y)) t) nil nil nil nil) ((nil) nil nil (+) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::edge-listp (nil nil nil nil (cond) nil nil) (nil nil ((endp lst) (and (consp (car lst)) (rationalp (cdar lst)) (<= 0 (cdar lst)) (not (assoc (caar lst) (cdr lst)))) t) nil nil nil nil) ((nil) nil (recursive-call) (equal) nil nil nil) ((lst nil) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::graphp (nil nil nil nil (cond) nil nil) (nil nil ((endp g) (and (consp (car g)) (edge-listp (cdar g))) t) nil nil nil nil) ((nil) nil (recursive-call) (equal) nil nil nil) ((g nil) nil (cdr) nil nil nil nil) ((g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::cons-set (nil nil nil nil (if) nil nil) ((s) nil nil (memp cons) nil nil nil) ((e s e s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::all-nodes (nil nil nil (cond) nil nil nil) (nil nil ((endp g) t) nil nil nil nil) ((nil) nil nil (cons-set) nil nil nil) (nil nil (caar) (my-union) nil nil nil) ((g) nil (strip-cars recursive-call) nil nil nil nil) (nil nil (cdar cdr) nil nil nil nil) ((g g) nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::nodep (nil nil nil (memp) nil nil nil) ((n) nil (all-nodes) nil nil nil nil) ((g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::neighbors (nil nil (strip-cars) nil nil nil nil) (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc) nil nil nil) ((n g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::pathp-aux (nil nil nil nil (cond) nil nil) (nil nil ((endp path) (endp (cdr path)) t) nil nil nil nil) ((nil) nil nil (nodep and) nil nil nil) ((g) nil (car) (memp recursive-call) nil nil nil) ((path g) nil (cadr cdr) (neighbors) nil nil nil) ((path g path) nil (car) nil nil nil nil) ((path) nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::pathp (nil nil nil (and) nil nil nil) (nil nil (true-listp) (pathp-aux) nil nil nil) ((path path g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::edge-len (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc) nil nil nil) ((b) nil (cdr) nil nil nil nil) (nil nil nil (assoc) nil nil nil) ((a g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::path-len (nil nil nil nil (cond) nil nil) (nil nil ((endp path) (endp (cdr path)) t) nil nil nil nil) ((nil) nil nil (plus) (if) nil nil) ((nil) (0) nil (nodep recursive-call) (edge-len) nil nil) ((g g g) nil (car car cadr cdr) nil nil nil nil) ((path path path path) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::path (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc) nil nil nil) ((n pt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::d (nil nil nil (path-len) nil nil nil) ((g) nil nil (path) nil nil nil) ((n pt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::choose-next (nil nil nil nil nil (cond) nil) (nil nil ((endp ts) (endp (cdr ts)) (lt (d (car ts) pt g) (d (choose-next (cdr ts) pt g) pt g)) t) nil nil nil nil) (nil nil (quote car car) nil (recursive-call) nil nil) ((non-node ts ts pt g) nil (cdr) nil nil nil nil) ((ts) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::reassign (nil nil nil (cond) nil nil nil) (nil nil ((endp v-lst) t) nil nil nil nil) ((pt) nil nil (let*) nil nil nil) (nil nil ((v (car v-lst))) (cond) nil nil nil) (nil nil (w (lt (plus (d u pt g) w) (d v pt g)) t) nil nil nil nil) (nil nil nil (cons) (edge-len) (recursive-call) nil) ((u v g u pt g) nil (cdr) (cons) nil (recursive-call) nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::dsp (nil nil nil (cond) nil nil nil) (nil nil ((endp ts) t) nil nil nil nil) ((pt) nil nil (let) nil nil nil) (((u (choose-next ts pt g))) nil nil nil (recursive-call) nil nil) ((g) nil nil (del) nil (reassign) nil) ((u ts u pt g) nil nil (neighbors) nil nil nil) ((u g) nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::dijkstra-shortest-path (nil nil nil (let) nil nil nil) (((p (dsp (all-nodes g) (list (cons a (list a))) g))) nil nil (path) nil nil nil) ((b p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::pathp-from-to (nil nil nil nil (and) nil nil) (nil nil nil (pathp equal equal) nil nil nil) ((p g a b) nil (car car) nil nil nil nil) ((p) nil (last) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::pt-propertyp (nil nil nil nil (if) nil nil) ((t) nil (endp) (and) nil nil nil) ((pt) nil nil (or) (recursive-call) nil nil) ((a g) nil (null cdr) nil nil (pathp-from-to) nil) ((a g pt) nil (cdar cdar caar) nil nil nil nil) ((pt pt pt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::lte (nil nil (not) nil nil nil nil) (nil nil nil (lt) nil nil nil) ((n2 n1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::shorterp (nil nil nil (lte) nil nil nil) (nil nil nil (path-len path-len) nil nil nil) ((p1 g p2 g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::confinedp (nil nil nil nil (if) nil nil) ((t) nil (endp) nil (if) nil nil) ((p t) nil (endp) (and) nil nil nil) (nil nil (cdr) (memp recursive-call) nil nil nil) ((p fs fs) nil (car cdr) nil nil nil nil) ((p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::ts-propertyp (nil nil nil nil (if) nil nil) ((t) nil (endp) nil (and) nil nil) ((ts) nil nil (confinedp) nil nil (shortest-confined-pathp recursive-call)) ((a fs g fs a fs pt g) nil (car cdr) (path path) nil nil nil) ((ts pt pt ts) nil (car car) nil nil nil nil) ((ts ts) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::fs-propertyp (nil nil nil nil (if) nil nil) ((t) nil (endp) nil (and) nil nil) ((fs) nil nil (confinedp) nil (shortest-pathp) (recursive-call)) ((a g fs0 a fs0 pt g) nil (car cdr) (path path) nil nil nil) ((fs pt pt fs) nil (car car) nil nil nil nil) ((fs fs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::comp-set (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((s) nil nil (memp recursive-call cons) nil nil nil) ((ts ts) nil (car cdr car) (recursive-call) nil nil nil) ((s s s ts) nil (cdr) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::invp (nil nil nil (let) nil nil nil) (((fs (comp-set ts (all-nodes g)))) nil nil nil (and) nil nil) (nil nil nil nil (pt-propertyp) nil (ts-propertyp fs-propertyp)) ((a ts fs pt g a fs fs pt g a pt g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::find-partial-path (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((p) nil (list) (memp cons) nil nil nil) ((s) nil (car car car) (recursive-call) nil nil nil) ((p p s p) nil (cdr) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::find-last-next-path (nil nil nil nil (if) nil nil) ((nil) nil nil (or cons) nil nil nil) (nil nil (endp endp car recursive-call) nil nil nil nil) ((p p) nil (cdr cdr) nil nil nil nil) ((p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::last-node (nil nil (car) nil nil nil nil) (nil nil (last) nil nil nil nil) (nil nil (find-last-next-path) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/dijkstra-shortest-path.lisp::find-partial-path-to-u (nil nil nil nil (cond) nil nil) (nil nil ((not (memp u p)) (equal (car p) u) t) nil nil nil nil) ((nil) nil (list) (cons) nil nil nil) ((u) nil (car) (recursive-call) nil nil nil) ((p u) nil (cdr) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))