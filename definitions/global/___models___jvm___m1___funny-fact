((/models/jvm/m1/funny-fact.lisp::ok-inputs (nil nil (natp) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::! (nil nil nil nil (if) nil nil) (nil (1) (zp) (*) nil nil nil) ((n n) nil (recursive-call) nil nil nil nil) (nil nil nil (-) nil nil nil) ((n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::theta (nil nil (!) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::helper1 (nil nil nil nil (if) nil nil) ((stack) nil (zp) (recursive-call) nil nil nil) ((n) nil nil (- push) nil nil nil) ((n n stack) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::helper2 (nil nil nil nil (if) nil nil) ((stack) nil (zp) (recursive-call) nil nil nil) ((m) nil nil (- push) nil nil nil) ((m) (1) (pop) (*) nil nil nil) (nil nil (top top pop) nil nil nil nil) ((stack stack) nil (pop) nil nil nil nil) ((stack) nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::fn (nil nil nil nil (if) nil nil) (nil (1) (zp top) nil nil nil nil) ((n) nil nil (helper2) nil nil nil) (nil nil nil (- helper1) nil nil nil) ((n n nil) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::ap (nil nil nil nil (if) nil nil) ((y) nil (endp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::nats (nil nil nil nil (if) nil nil) ((nil) nil (zp) (ap) nil nil nil) ((n) nil (recursive-call list) nil nil nil nil) ((n) nil nil (-) nil nil nil) ((n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::prod (nil nil nil nil (if) nil nil) (nil (1) (endp) (*) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::firstn (nil nil nil nil (if) nil nil) (nil (1) nil (or cons) nil nil nil) (nil nil (zp endp car) (recursive-call) nil nil nil) ((n x x) nil (cdr) (-) nil nil nil) ((n x) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::natp-list (nil nil nil nil (if) nil nil) ((t) nil (endp) (and) nil nil nil) ((x) nil (natp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::loop1-clk (nil nil nil nil (if) nil nil) (nil (2) (zp) (clk+) nil nil nil) ((n) (8) (recursive-call) nil nil nil nil) (nil nil nil (-) nil nil nil) ((n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::loop2-clk (nil nil nil nil (if) nil nil) (nil (2) (zp) (clk+) nil nil nil) ((m) (8) (recursive-call) nil nil nil nil) (nil nil nil (-) nil nil nil) ((m) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/funny-fact.lisp::clk (nil nil nil nil (if) nil nil) (nil (8) (zp) (clk+) nil nil nil) ((n) (6) nil (clk+) nil nil nil) (nil nil (loop1-clk loop2-clk) nil nil nil nil) ((n) nil nil (-) nil nil nil) ((n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)))