((/powerlists/batcher-sort.lisp::p-min (nil nil nil nil (if) nil nil) (nil nil nil (and p-zip fix-min) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-max (nil nil nil nil (if) nil nil) (nil nil nil (and p-zip fix-max) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-batcher-merge (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-zip p-zip) nil nil nil) ((x) nil nil (p-min p-max p-min p-max) nil nil nil) ((x y x y) nil nil (recursive-call recursive-call recursive-call recursive-call) nil nil nil) (nil nil (p-unzip-l p-unzip-r p-unzip-r p-unzip-l p-unzip-l p-unzip-r p-unzip-r p-unzip-l) nil nil nil nil) ((x y x y x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-batcher-sort (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) (p-batcher-merge) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-min-tie (nil nil nil nil (if) nil nil) (nil nil nil (and p-tie fix-min) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-max-tie (nil nil nil nil (if) nil nil) (nil nil nil (and p-tie fix-max) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-interleaved-p (nil nil nil nil (if) nil nil) (nil nil (powerlist-p not) nil nil nil nil) ((x) nil (powerlist-p powerlist-p) (recursive-call recursive-call <= <= <= <=) nil nil nil) ((y y) nil (p-untie-l p-untie-l p-untie-r p-untie-r p-max-elem p-min-elem p-max-elem p-min-elem p-max-elem p-min-elem p-max-elem p-min-elem) nil nil nil nil) ((x y x y) nil (p-untie-l p-untie-r p-untie-l p-untie-r p-untie-l p-untie-r p-untie-l p-untie-r) nil nil nil nil) ((x x x y y x y y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-member-count-<= (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (+) (if) nil nil) ((x) (1 0) nil (recursive-call recursive-call <=) nil nil nil) ((m m m) nil (p-untie-l p-untie-r realfix) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::p-elem-count (nil nil nil nil (if) nil nil) (nil (1) (powerlist-p) (+) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/batcher-sort.lisp::interleaved-p-cutoff (nil nil nil nil (if) nil nil) ((nil) nil nil (and) nil (cond) nil) (nil nil (powerlist-p powerlist-p (< (p-min-elem (p-untie-r x)) (p-max-elem (p-untie-l x))) (< (p-min-elem (p-untie-r x)) (p-max-elem (p-untie-l y))) (interleaved-p-cutoff (p-untie-l x) (p-untie-l y)) (interleaved-p-cutoff (p-untie-r x) (p-untie-r y))) nil nil nil nil) ((x y) nil (p-min-elem p-min-elem) (recursive-call recursive-call) nil nil nil) (nil nil (p-untie-r p-untie-r p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x x x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))