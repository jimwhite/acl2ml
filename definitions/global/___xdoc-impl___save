((/xdoc-impl/save.lisp::cw-princ$ (nil nil nil nil nil (mbe) nil) ((:logic nil :exec) nil nil nil nil nil nil) ((nil :ld-prompt nil :ld-pre-eval-print nil :ld-post-eval-print nil :ld-verbose nil) nil (quote quote `) nil nil nil nil) ((cw-raw-wormhole) nil nil (lambda let) nil nil nil) ((whs whs (state (princ$ (quote (, str)) *standard-co* state))) nil (value) nil nil nil nil) ((:q) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::clean-topics-aux (nil nil nil (b*) nil nil nil) (nil nil nil (cons) (((when (atom x)) (fast-alist-free seen-names-fal) nil)) nil nil) (nil nil (name1 seen-names-fal car) ((when (hons-get name1 seen-names-fal)) recursive-call) nil nil nil) ((x seen-names-fal) nil (cdr cdr) (cw recursive-call) (hons-acons) nil nil) ((~|WARNING: dropping shadowed topic for ~x0.~% name1 seen-names-fal name1 t seen-names-fal x) nil (cdr) (assoc) nil nil nil) ((:name x) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::clean-topics (nil nil nil (clean-topics-aux) nil nil nil) ((x) nil (len) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::stupid-copy-file-aux (nil nil nil nil (mv-let) nil nil) (nil nil (byte) (read-byte$) (if) nil nil) ((state in state state) nil (not) (let) nil nil nil) ((byte (state (write-byte$ byte out state))) nil nil nil (recursive-call) nil nil) ((in out state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::stupid-copy-file (nil nil nil (b*) nil nil nil) ((state) nil nil nil nil (((mv in state) (open-input-channel src :byte state))) nil) (nil nil ((mv out state) state state state) nil nil nil nil) (nil nil nil (close-input-channel close-output-channel) (open-output-channel stupid-copy-file-aux) nil nil) ((dest :byte state in out state in state out state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::stupid-copy-files (nil nil nil nil (if) nil nil) ((state) nil (atom) (b*) nil nil nil) ((filenames) nil nil ((srcfile (acl2::extend-pathname srcdir (car filenames) state))) nil (recursive-call) nil) ((srcdir destdir state) nil (destfile state cdr) nil nil nil nil) ((filenames) nil nil nil (acl2::extend-pathname stupid-copy-file) nil nil) ((destdir state srcfile destfile state) nil (car) nil nil nil nil) ((filenames) nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::normalize-parents (nil nil nil (let*) nil nil nil) (nil nil nil nil (if) ((name (cdr (assoc :name x)))) nil) ((x) nil (parents orig parents parents) (equal) (acons) nil nil) ((parents parents orig :parents parents x) nil (cdr) nil (if if) nil nil) ((parents parents) nil (no-duplicatesp-equal) (assoc member-equal prog2$ prog2$) nil nil nil) ((:parents x name parents parents) nil (remove-duplicates-equal) (cw remove-equal cw) nil nil nil) ((; xdoc note: removing self-referencing :parents entry for ~x0.~% name name parents ; xdoc note: removing duplicate :parents for ~x0.~% name parents) nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::normalize-parents-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (normalize-parents recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::find-roots (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x) nil (not recursive-call) (cons) nil nil nil) (nil nil (cdr cdr recursive-call cdr) nil nil nil nil) ((x) nil (cdr) (assoc assoc) nil nil nil) ((:parents :name x) nil (car car) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::find-children-aux (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x) nil nil (member-equal cons recursive-call) nil nil nil) ((par par) nil (cdr cdr cdr) (recursive-call) nil nil nil) ((par x) nil (cdr) (assoc assoc) nil nil nil) ((:parents :name x) nil (car car) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::find-children (nil nil (mergesort) nil nil nil nil) (nil nil nil (find-children-aux) nil nil nil) ((par x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::gather-topic-names (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (cdr recursive-call) nil nil nil nil) (nil nil (cdr) (assoc) nil nil nil) ((:name x) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::topics-fal (nil nil (make-fast-alist) nil nil nil nil) (nil nil nil (pairlis$) nil nil nil) ((nil) nil (gather-topic-names) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::find-orphaned-topics-1 (nil nil nil nil (cond) nil nil) (nil nil ((atom parents) (hons-get (car parents) topics-fal) t) nil nil nil nil) ((acc) nil nil nil nil (recursive-call recursive-call) nil) ((child topics-fal acc child topics-fal) nil (cdr cdr) (cons) nil nil nil) ((parents parents acc) nil nil (cons) nil nil nil) ((child) nil (car) nil nil nil nil) ((parents) nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::find-orphaned-topics (nil nil nil (b*) nil nil nil) (nil nil nil nil (((when (atom x)) acc) recursive-call) nil nil) ((topics-fal acc) nil (child parents acc cdr) nil nil nil nil) ((x) nil (cdr cdr) nil nil (find-orphaned-topics-1) nil) ((child parents topics-fal acc) nil nil (assoc assoc) nil nil nil) ((:name :parents) nil (car car) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::index-add-topics (nil nil nil nil (if) nil nil) (nil nil (atom) (mv b*) nil nil nil) ((x acc state ((mv acc state) (index-add-topic (car x) dir topics-fal index-pkg state acc))) nil nil nil nil nil nil) ((dir topics-fal index-pkg state acc) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::gather-topics (nil nil nil nil (cond) nil nil) (nil nil ((atom all-topics) (member (cdr (assoc :name (car all-topics))) names) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((names) nil (car cdr) (recursive-call) nil nil nil) ((all-topics names all-topics) nil (cdr) nil nil nil nil) ((all-topics) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::save-topic (nil nil nil (b*) nil nil nil) ((state) nil nil nil nil nil nil) (nil nil (- (mv text state) filename fullpath (mv channel state) state state) nil nil nil nil) (nil nil nil (close-output-channel) (cw concatenate acl2::extend-pathname open-output-channel princ$) nil (preprocess-topic)) ((Saving ~s0::~s1.~% x all-topics dir topics-fal state .xml dir filename state fullpath :character state text channel state channel state) nil (symbol-package-name symbol-name quote reverse) nil nil nil nil) ((name name string) nil nil (coerce) nil nil nil) (nil nil (quote) (file-name-mangle) nil nil nil)) (/xdoc-impl/save.lisp::save-topics-aux (nil nil nil nil (if) nil nil) ((state) nil (atom) (let) nil nil nil) ((x (state (save-topic (car x) all-topics dir topics-fal state))) nil nil nil nil nil (recursive-call)) ((all-topics dir topics-fal state) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::prepare-dir (nil nil nil (b*) nil nil nil) ((state) nil nil nil nil nil nil) (nil nil (- dir/xml state state xdoc/support Makefile-trans Makefile-out state state state) nil nil nil nil) (nil nil nil (cw mkdir mkdir) (acl2::extend-pathname acl2::extend-pathname acl2::extend-pathname acl2::extend-pathname stupid-copy-file) (stupid-copy-files stupid-copy-files) nil) ((; Preparing directory ~s0.~% dir dir xml state dir state dir/xml state *xdoc-dir* support state xdoc/support Makefile-trans state dir Makefile state Makefile-trans Makefile-out state xdoc/support dir/xml state xdoc/support dir state) nil nil nil (list) nil nil) ((xdoc.css xdoc.js plus.png minus.png leaf.png text-topic.xsl html-core.xsl html-topic.xsl html-full-index.xsl html-brief-index.xsl html-topic-index.xsl xml-topic.xsl xml-topic-index.xsl xml-full-index.xsl frames2.html frames3.html preview.html) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/save.lisp::save-topics (nil nil nil nil (b*) nil nil) ((state) nil nil (or) nil nil nil) (nil nil (dir x - x topics-fal state state state orphans - state not) (cw) nil nil nil) ((orphans ~|~%WARNING: found topics with non-existent parents:~%~x0~%These ~
             topics may only show up in the index pages.~%~% orphans) nil (clean-topics fast-alist-free) (cw) (acl2::extend-pathname time$ find-orphaned-topics save-success-file) nil (time$ time$ time$ time$)) ((dir xml state x ; Processing ~x0 topics.~% :msg ; Normalizing parents: ~st sec, ~sa bytes~% :mintime 1/2 :msg ; Generating topics fal: ~st sec, ~sa bytes~% :mintime 1/2 :msg ; Saving topics: ~st sec, ~sa bytes~% :mintime 1/2 :msg ; Saving flat index: ~st sec, ~sa bytes~% :mintime 1/2 :msg ; Saving hierarchical index: ~st sec, ~sa bytes~% x topics-fal nil topics-fal dir state) nil (len normalize-parents-list topics-fal len) nil nil nil (save-topics-aux save-index)) ((x x x x x dir topics-fal state x dir topics-fal index-pkg state x dir topics-fal index-pkg expand-level state x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))