(nil (/coi/generalize/generalize.lisp::pattern-match-rec (nil nil nil nil (if) nil nil) (nil nil nil (and met) (if) nil nil) (nil nil (consp consp (hit alist)) (and mv mv) (if) nil nil) ((args terms hit t alist nil nil) nil (null null) (let mv) (recursive-call) nil nil) ((alist nil nil args terms) nil ((pattern (car args)) cdr cdr) nil (cond) nil nil) ((args terms) nil (term (symbolp pattern) (consp pattern) t) nil nil nil nil) (nil nil (car) (let cond mv) nil nil nil)) (/coi/generalize/generalize.lisp::clause-keys (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((clauses (clause (car clauses))) nil nil nil nil nil (cond)) (nil nil ((symbolp clause) (atom clause) (eq (car clause) (quote quote)) (consp (car clause)) t) nil nil nil nil) (nil nil (recursive-call recursive-call) (cons append append) nil nil nil) ((clause) nil (recursive-call cdr cdr recursive-call recursive-call recursive-call recursive-call) nil nil nil nil) ((clauses clauses) nil (cdr cdr cdr cdr cdr) nil nil nil nil)) (/coi/generalize/generalize.lisp::term-keys (nil nil nil nil nil nil (cond)) (nil nil ((symbolp term) (atom term) (eq (car term) (quote quote)) (consp (car term)) t) nil nil nil nil) ((nil nil) nil (list clause-keys clause-keys) nil nil nil nil) ((term) nil (cdr cdr) nil nil nil nil) ((term term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/generalize/generalize.lisp::pattern-match-list (nil nil nil nil (if) nil nil) (nil nil nil (and let mv) nil nil nil) ((nil nil) nil (consp consp (pattern (caar list))) nil (met) nil nil) ((list) nil (car type-p (hit alist) declare) nil (if) nil nil) ((list hit) nil (cdar ignore) (mv recursive-call) (pattern-match-rec) nil nil) ((list pattern terms nil alist terms type-p terms) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/coi/generalize/generalize.lisp::pattern-match-args (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((terms (term (car terms))) nil nil nil nil (cond) nil) (nil nil ((atom term) (eq (car term) (quote quote)) (consp (car term)) t) nil nil nil nil) (nil nil nil (or) (recursive-call recursive-call or) nil nil) ((fn args fn args) nil (cdr cdr) (and) (recursive-call recursive-call recursive-call recursive-call) nil nil) ((terms terms fn args fn args fn args fn args) nil (cdr cdr cdr cdr) (equal met) nil nil nil)) (/coi/generalize/generalize.lisp::replace-common-subterm (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((terms (term (car terms))) nil nil nil (if) nil nil) (nil nil nil (equal cons) nil (cond) nil) ((term subterm var) nil ((atom term) (eq (car term) (quote quote)) (consp (car term)) t) nil (recursive-call) nil nil) ((subterm var) nil (cdr) (cons cons cons cons) nil nil nil) ((terms term term) nil nil (cons cons) (recursive-call recursive-call recursive-call recursive-call) nil nil)) (/coi/generalize/generalize.lisp::generalization-symbol-base (nil nil nil nil (if) nil nil) (nil nil (`) (let) (and) nil nil) (((symbol (caadr subterm)) gensym::||) nil (consp consp consp) nil (if) nil nil) ((subterm symbol) nil (cdr cadr symbolp `) nil nil nil nil) ((subterm subterm symbol gensym::||) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/generalize/generalize.lisp::generalize-clause-processor (nil nil nil nil (if) nil nil) (nil nil (consp) (let mv) nil nil nil) ((subterm (fn (generalization-symbol-base subterm)) nil nil) nil nil (let) nil nil nil) (((avoid (append (term-keys subterm) (clause-keys clause)))) nil nil (let) nil nil nil) (((var (gensym::gensym fn avoid))) nil nil nil (if) nil nil) (nil nil (not) (mv mv) nil nil nil) ((var nil nil var) nil nil nil (replace-common-subterm) nil nil)) (/coi/generalize/generalize.lisp::generalize-clause-alist (nil nil nil nil (if) nil nil) ((a) nil (consp) (let) nil nil nil) ((subterm (fn (generalization-symbol-base subterm))) nil nil (let) nil nil nil) (((avoid (append (term-keys subterm) (clause-keys clause)))) nil nil (let) nil nil nil) (((var (gensym::gensym fn avoid))) nil nil nil (if) nil nil) ((a) nil (not) (cons) nil nil nil) ((var a) nil nil (cons) nil nil nil)) (/coi/generalize/generalize.lisp::generalize-termp (nil nil nil nil nil nil (and)) (nil nil (pseudo-termp consp consp null) (equal) nil nil nil) ((term term) nil (cdr cddr car quote) nil nil nil nil) ((term term term gensym::generalize) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/generalize/generalize.lisp::generalize-clause-processor-wrapper (nil nil nil nil (if) nil nil) (nil nil (consp list) (let) nil nil nil) ((hint clause) nil ((subterm (car hint))) (met) nil nil nil) (nil nil (type-p (var new)) nil (if) nil nil) (nil nil (cdr list) (generalize-clause-processor) (if) (and) nil) ((hint clause subterm var type-p clause) nil (generalize-termp symbolp not list) (list) nil nil nil) ((subterm type-p new) nil nil (equal cons cons) nil nil nil)) (/coi/generalize/generalize.lisp::generalize-clause-alist-wrapper (nil nil nil nil (if) nil nil) ((a) nil (consp) (let) nil nil nil) ((hint) nil ((subterm (car hint))) nil (met) nil nil) (nil nil (type-p (var new) declare) nil (if) nil nil) ((a) nil (cdr ignore) (generalize-clause-processor) (generalize-clause-alist) (and) nil) ((hint clause subterm new var clause a subterm) nil (generalize-termp symbolp not) nil nil nil nil) ((subterm type-p) nil nil (equal) nil nil nil)) (/coi/generalize/generalize.lisp::get-generalization-patterns (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-eq) nil nil nil) ((:patterns) nil nil (table-alist) nil nil nil) ((world) nil (quote) nil nil nil nil) ((generalization) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/generalize/generalize.lisp::generalize-pattern-hint (nil nil nil (let) nil nil nil) (((hint (pattern-match-args (quote gensym::generalize) patterns clause))) nil nil (and) nil nil nil) ((hint) nil nil (let) nil nil nil) (((hints (` (:clause-processor (generalize-clause-processor-wrapper clause (quote (, hint))))))) nil (`) nil nil nil nil) (nil nil nil (:computed-hint-replacement) nil nil nil) (((generalize-clause-hint id clause world)) nil (,@) nil nil nil nil) ((hints) nil nil nil nil nil nil)) (/coi/generalize/generalize.lisp::generalize-clause-hint (nil nil nil (or) nil nil nil) ((nil) nil nil (generalize-pattern-hint) nil nil nil) ((clause) nil (get-generalization-patterns) nil nil nil nil) ((world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))