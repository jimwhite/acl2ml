((/countereg-gen/switchnat.lisp::weighted-switch-nat-find (nil nil nil nil (if) nil nil) (nil nil nil (mv) nil (mbe recursive-call) nil) ((:logic :exec weights-idx quotient-x) nil (cdr 1+) (< + -) (or) nil nil) ((rem-wchoice rem-wchoice rem-weights weights-idx rem-wchoice) nil (endp endp car car) (< *) nil nil nil) ((rem-weights rem-wchoice rem-weights quotient-x rem-weights) nil (cdr car car) nil nil nil nil) ((rem-weights rem-weights rem-weights) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/switchnat.lisp::weighted-switch-nat (nil nil nil (let*) nil nil nil) (nil nil nil nil ((weights (mbe :logic (pos-list-fix weights) :exec weights))) (weighted-switch-nat-find) nil) ((weights wchoice) (0) (x wtot wchoice) (floor) nil nil nil) ((x wtot) nil (sum-list) (rem) nil (mbe) nil) ((:logic :exec x weights x wtot) nil (nfix) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/switchnat.lisp::switch-nat (nil nil nil (weighted-switch-nat) nil nil nil) ((x) nil nil nil (make-list) nil nil) ((nchoices :initial-element) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/switchnat.lisp::multiple-switch-nat (nil nil nil nil (mv-let) nil nil) (nil nil (choice) (switch-nat) (if) nil nil) ((x x) nil (car endp) (mv) (mv-let) nil nil) ((nchoices-lst x) nil (cdr list choice-lst) (recursive-call mv) nil nil nil) ((nchoices-lst choice x x) nil (cdr nfix) (cons) nil nil nil) ((nchoices-lst x choice choice-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/switchnat.lisp::nfixg (nil nil nil nil nil (mbe) nil) ((:logic :exec x) nil nil nil (if) nil nil) ((x) (0) (natp) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/switchnat.lisp::nth-foo (nil nil nil nil (mv-let) nil nil) (nil nil (sw) (switch-nat) (if) nil nil) ((v v) (2) (nfixg) (= cons) nil nil nil) ((x sw) (0) (quote recursive-call) nil nil nil nil) ((x v) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))