((/cutil/defmvtypes.lisp::defmvtypes-element-to-thm (nil nil nil nil (if) nil nil) ((nil) nil (not) (let*) nil nil nil) ((spec) nil (`) nil ((thmname (intern-in-package-of-symbol (str::cat (symbol-name fn) -MVTYPES- (coerce (explode-atom place 10) (quote string))) fn))) nil nil) (((defthm (, thmname) (, (if hyp (` (implies (, hyp) (, concl))) concl)) :rule-classes :type-prescription :hints ((and stable-under-simplificationp (quote (:in-theory (enable (:executable-counterpart force)))))))) nil (x rval concl) nil nil nil nil) (nil nil (`) (intern-in-package-of-symbol) (cond) nil nil) ((X fn) nil ((symbolp spec) (atom spec) t) (mv-nth) nil nil nil) (nil nil (,) ((, fn) list let) nil (er) nil)) (/cutil/defmvtypes.lisp::defmvtypes-elements-to-thms (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((specs) nil nil nil nil nil (defmvtypes-element-to-thm recursive-call)) ((hyp fn args place hyp fn args) nil (car cdr) (+) nil nil nil) ((specs specs place) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/cutil/defmvtypes.lisp::defmvtypes-fn (nil nil nil (let) nil nil nil) (((args (getprop fn (quote acl2::formals) :bad (quote acl2::current-acl2-world) world))) nil nil nil (if) nil nil) (nil nil (`) (eq) nil (er) nil) ((args :bad hard? Failed to find formals for ~x0.~% fn) nil (quote) nil (encapsulate) nil nil) ((recursive-call nil) nil (local ,@) nil nil nil nil) (nil nil (in-theory) nil nil nil (defmvtypes-elements-to-thms)) ((specs hyp fn args) (0) nil (e/d) nil nil nil)))