((/misc/computed-hint-rewrite.lisp::simplify-clause-rcnst (nil nil nil (let) nil nil nil) (((rcnst (access prove-spec-var pspv :rewrite-constant))) nil nil (cond) nil nil nil) (nil nil ((assoc-eq (quote settled-down-clause) hist) t) nil nil nil nil) (nil nil nil (let*) nil (change) nil) ((rewrite-constant rcnst :force-info) nil nil (cond) (if (new-force-info (if (ffnnamep-lst (quote if) cl) (quote weak) t))) nil nil) ((t) nil (quote induction-concl-terms hist-entry-hit hit-rewrite2 hit-rewrite2 t) (ffnnamep-lst) nil nil nil) ((cl weak) nil (quote found-hit-rewrite-hist-entry) (or) (access) (change) nil)) (/misc/computed-hint-rewrite.lisp::computed-hint-rewrite (nil nil nil (let*) nil nil nil) (nil nil nil ((rcnst (simplify-clause-rcnst cl hist pspv wrld))) (mv-let) nil nil) (nil nil (ens gstack) (flg cond) nil (hyps-type-alist) nil) ((nil hyps-type-alist ttree hyps ens wrld state) nil (flg t) nil (access) nil nil) ((rewrite-constant rcnst :current-enabled-structure) nil nil nil nil (er sl-let) nil) ((hard ctx ~x0 found a contradiction in the hypotheses.) nil (quote new-term declare) (cons) nil nil nil) ((recursive-call new-ttree :rdepth :type-alist hyps-type-alist :obj provep :geneqv :fnstack nil :ancestors nil :backchain-limit :step-limit :simplify-clause-pot-lst nil :rcnst rcnst :gstack gstack :ttree ttree new-term new-ttree) nil (rewrite-stack-limit ignorable) (backchain-limit initial-step-limit) (rewrite if) nil nil)) (/misc/computed-hint-rewrite.lisp::my-computed-hint (nil nil nil (cond) nil nil nil) (nil nil ((null (cdr clause)) t) nil nil nil nil) (nil nil (value) (let) nil nil nil) ((nil) nil ((hyps (dumb-negate-lit-lst (butlast clause 1)))) nil (mv-let) nil nil) (nil nil (conc) (erp cond) nil nil nil) ((term-ttree state conc hyps t clause hist pspv wrld ctx state) nil (car (and (not erp) term-ttree) t) nil nil nil nil) (nil nil (last value) (prog2$) nil nil nil)))