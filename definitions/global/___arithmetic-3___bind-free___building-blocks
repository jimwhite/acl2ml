((/arithmetic-3/bind-free/building-blocks.lisp::numeric-constant-p (nil nil nil nil (and) nil nil) (nil nil (nvariablep fquotep acl2-numberp) nil nil nil nil) ((x x) nil (unquote) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::rational-constant-p (nil nil nil nil (and) nil nil) (nil nil (nvariablep fquotep rationalp) nil nil nil nil) ((x x) nil (unquote) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::negative-addends-p (nil nil nil nil nil nil nil) (nil nil ((variablep x) (fquotep x) (eq (ffn-symb x) (quote UNARY--)) (eq (ffn-symb x) (quote BINARY-*)) (eq (fn-symb x) (quote BINARY-+)) t) nil nil nil nil) ((nil nil) nil nil (and or and and) nil nil nil) (nil nil (rational-constant-p variablep not rational-constant-p recursive-call recursive-call) (< <) nil nil nil) ((x) (0 0) (unquote arg1 arg1 unquote arg1 arg2) (eq) nil nil nil) ((x x x x x) nil (ffn-symb quote arg1) nil nil nil nil) ((UNARY-- x) nil (arg1) nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::weak-negative-addends-p (nil nil nil nil nil nil nil) (nil nil ((variablep x) (fquotep x) (eq (ffn-symb x) (quote UNARY--)) (eq (ffn-symb x) (quote BINARY-*)) (eq (fn-symb x) (quote BINARY-+)) t) nil nil nil nil) ((nil nil) nil (rational-constant-p) (or and and) nil nil nil) ((x) nil (variablep not rational-constant-p recursive-call recursive-call) (<) nil nil nil) (nil (0) (arg1 arg1 unquote arg1 arg2) (eq) nil nil nil) ((x x x x) nil (ffn-symb quote arg1) nil nil nil nil) ((UNARY-- x) nil (arg1) nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::rewriting-goal-literal (nil nil (declare) nil nil nil nil) (nil nil nil (ignore) nil nil nil) ((x state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::proveably-integer (nil nil nil (equal) nil nil nil) ((*t*) nil nil nil nil nil (mfc-rw)) ((t t mfc state) nil (`) nil nil nil nil) (nil nil (INTEGERP) nil nil nil nil) (nil nil (,) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::proveably-rational (nil nil nil (equal) nil nil nil) ((*t*) nil nil nil nil nil (mfc-rw)) ((t t mfc state) nil (`) nil nil nil nil) (nil nil (RATIONALP) nil nil nil nil) (nil nil (,) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::proveably-non-zero1 (nil nil nil (equal) nil nil nil) ((*t*) nil nil nil nil nil (mfc-rw)) ((t t mfc state) nil (`) nil nil nil nil) (nil nil (NOT) nil nil nil nil) (nil nil nil (EQUAL) nil nil nil) (nil nil (FIX quote) nil nil nil nil) (nil (0) (,) nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::proveably-non-zero (nil nil nil nil nil (cond) nil) (nil nil ((variablep x) (fquotep x) (eq (ffn-symb x) (quote IF)) t) nil nil nil nil) ((nil) nil nil (and) (proveably-non-zero1 proveably-non-zero1) nil nil) ((x mfc state x mfc state) nil (numeric-constant-p not) nil nil nil nil) ((x) nil nil (equal) nil nil nil) ((x) nil (quote) nil nil nil nil) (nil nil (quote) nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::proveably-non-zero-rational1 (nil nil nil (equal) nil nil nil) ((*t*) nil nil nil nil nil (mfc-rw)) ((t t mfc state) nil (`) nil nil nil nil) (nil nil (NOT) nil nil nil nil) (nil nil nil (EQUAL) nil nil nil) (nil nil (FIX quote) nil nil nil nil) (nil (0) (,) nil nil nil nil)) (/arithmetic-3/bind-free/building-blocks.lisp::proveably-non-zero-rational (nil nil nil nil nil (cond) nil) (nil nil ((variablep x) (fquotep x) (eq (ffn-symb x) (quote IF)) t) nil nil nil nil) ((nil) nil nil (and) (proveably-non-zero1 proveably-non-zero1) nil nil) ((x mfc state x mfc state) nil (rational-constant-p not) nil nil nil nil) ((x) nil nil (equal) nil nil nil) ((x) nil (quote) nil nil nil nil) (nil nil (quote) nil nil nil nil)))