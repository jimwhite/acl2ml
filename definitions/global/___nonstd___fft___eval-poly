((/nonstd/fft/eval-poly.lisp::eval-poly-at-point (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fix) (+) nil nil nil) ((p p) nil nil (recursive-call *) nil nil nil) ((x) nil (p-unzip-l) (* recursive-call) nil nil nil) ((p x x) nil (p-unzip-r) (*) nil nil nil) ((p x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/fft/eval-poly.lisp::eval-poly (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-tie eval-poly-at-point) nil nil nil) ((x p x) nil nil (recursive-call recursive-call) nil nil nil) ((p p) nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/fft/eval-poly.lisp::p-unary-- (nil nil nil nil (if) nil nil) (nil nil (powerlist-p -) (p-tie) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/fft/eval-poly.lisp::p-* (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-tie *) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/fft/eval-poly.lisp::p-+ (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-tie +) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/fft/eval-poly.lisp::p-- (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (p-tie -) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))