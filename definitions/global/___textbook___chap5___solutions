((/textbook/chap5/solutions.lisp::cadn-fn (nil nil nil nil (if) nil nil) (nil nil (zp `) (recursive-call) nil nil nil) ((n) nil (car `) (-) nil nil nil) ((n) (1) (, cdr) nil nil nil nil) ((x) nil (,) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap5/solutions.lisp::type-case-keyword-alistp (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (endp (cdr x)) t) nil nil nil nil) ((t nil) nil nil (and) nil nil nil) (nil nil (recursive-call) (member) nil nil nil) (nil nil (car quote cddr) nil nil nil nil) ((x x) nil nil nil nil nil nil) ((:rational :string :symbol :cons :boolean :other) nil nil nil nil nil nil)) (/textbook/chap5/solutions.lisp::type-case-type (nil nil nil (cond) nil nil nil) (nil nil ((endp args) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (recursive-call) nil nil nil nil) (nil nil (car :integer :rational :string :symbol :cons :boolean :other otherwise cddr) nil nil nil nil) ((args nil args) nil (quote quote quote quote quote quote quote) nil nil nil nil) (nil nil ((integerp x) (rationalp x) (stringp x) (symbolp x) (consp x) (consp x) t) nil nil nil nil)) (/textbook/chap5/solutions.lisp::type-case-clauses (nil nil nil (cond) nil nil nil) (nil nil ((endp args) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (recursive-call) (list) nil nil nil) (nil nil (car cadr cddr) nil nil nil nil) ((args args args) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))