((/taspi/proofs/fringes-taspi.lisp::ofringe (nil nil nil nil (if) nil nil) ((flg) nil nil (cond cond) nil nil nil) (nil nil ((atom x) t (atom x) t) nil nil nil nil) ((nil) nil nil nil (if recursive-call omerge) nil nil) ((x nil x order order) nil (null list) nil (recursive-call recursive-call) nil nil) ((x x t order nil order) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/taspi/proofs/fringes-taspi.lisp::fringes (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) ((nil nil) nil (consp consp) (cons append) nil nil nil) ((x x) nil nil (append) (ofringe recursive-call recursive-call) nil nil) ((t x order t order nil order) nil (car cdr) nil (recursive-call recursive-call) nil nil) ((t order nil order x x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/taspi/proofs/fringes-taspi.lisp::first-taxon (nil nil nil nil (if) nil nil) ((term) nil (atom recursive-call) nil nil nil nil) ((term) nil (car) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/fringes-taspi.lisp::taspip (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) (nil nil (atom atom null) (or recursive-call and) nil nil nil) ((x nil x x x) nil (integerp) (and recursive-call recursive-call) nil nil nil) ((x t nil) nil (symbolp not car cdr) nil nil nil nil) ((x x x) nil nil (equal) nil nil nil) ((x nil) nil nil nil nil nil nil)) (/taspi/proofs/fringes-taspi.lisp::orderly-cons (nil nil nil nil (if) nil nil) ((l) nil nil (assoc-equal) (if) nil nil) ((order-alist) nil (first-taxon atom) (cons) (if) nil nil) ((x l x nil) nil nil (< cons cons) nil nil nil) ((x l) nil (cdr cdr car) nil (recursive-call) nil nil) ((l x order-alist) nil (cdr) (assoc-equal assoc-equal) nil nil nil) ((order-alist order-alist l) nil (first-taxon first-taxon) nil nil nil nil)) (/taspi/proofs/fringes-taspi.lisp::partstotaspi (nil nil nil nil (if) nil nil) ((top) nil (consp) nil (orderly-cons) nil nil) ((under order) nil nil nil (recursive-call recursive-call) nil nil) ((order order) nil (car) (get-subsets difference get-non-subsets) nil nil nil) ((under top) nil (car cdr car car cdr) nil nil nil nil) ((under under under under under) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/fringes-taspi.lisp::ordered-taspi (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((x) nil (consp) (recursive-call) (and) nil nil) ((order) nil (cdr car) (< recursive-call recursive-call) nil nil nil) ((x order order x) nil (cdr cdr car cdr) nil nil nil nil) ((x x) nil nil (assoc-equal assoc-equal) nil nil nil) ((order order) nil (first-taxon first-taxon) nil nil nil nil)) (/taspi/proofs/fringes-taspi.lisp::good-fringes-list (nil nil nil nil (if) nil nil) (nil nil (consp) (equal) (and) nil nil) ((x x nil) nil (consp true-listp recursive-call) nil nil nil nil) (nil nil (car car cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))