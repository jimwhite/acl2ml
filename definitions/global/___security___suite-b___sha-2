((/security/suite-b/sha-2.lisp::append-one-and-k-zeros-and-len (nil nil nil (let*) nil nil nil) (nil nil nil (append) nil nil nil) ((message-bytes-appended) nil (bitlen k num-to-append bytes-to-append message-bytes-appended len-bytes zero-padding) (append) nil nil nil) ((zero-padding len-bytes) nil (reverse reverse) (+ - expt append make-list-n) nil nil nil) ((bitlen k message-bytes bytes-to-append) (64 2 0) (make-bytes make-bytes) (+ * -) nil nil nil) ((num-to-append) (1 512 8) (len) (* ceiling *) nil nil nil) ((len bitlen len len-bytes) (8 512 8) nil nil nil nil nil)) (/security/suite-b/sha-2.lisp::sha-expand-loop (nil nil nil nil (if) nil nil) ((nil) nil nil (let*) nil (or) nil) (nil nil (not not atom) (> (s0 (xor-number (xor-number (rightrotate (Nth (- index 15) message-blocks) 7) (rightrotate (Nth (- index 15) message-blocks) 18)) (ash (Nth (- index 15) message-blocks) -3)))) (if) nil nil) ((index end message-blocks new-message-blocks) nil (natp natp s1 new-message-blocks) (equal) (recursive-call) nil nil) ((end index index end new-message-blocks end) nil nil (xor-number append +) nil nil nil) ((message-blocks index) (1) nil (xor-number ash cons) nil nil nil) ((nil) (-10) nil (rightrotate rightrotate Nth add-32bit) nil nil nil)) (/security/suite-b/sha-2.lisp::sha-main-loop1 (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((message-blocks-32) nil nil (let*) nil nil ((S0 (xor-number (xor-number (rightrotate a 2) (rightrotate a 13)) (rightrotate a 22))))) (nil nil (maj t2 S1 ch t1) nil (if) nil nil) (nil nil (new_g new_f new_e new_d new_c new_b new_a null) (xor-number add-32bit xor-number xor-number add-32bit let*) nil nil nil) ((S0 maj f e c b a new_h_arr new_a new_b new_c new_d new_e new_f new_g new_h h_arr) nil (cdr cdr) (xor-number and-number xor-number rightrotate and-number and-number add-32bit add-32bit add-32bit add-32bit +) nil nil nil) ((b c e e f g h S1 ch d t1 t1 t2 message-blocks-32 message-blocks-32 index) (25 1) (not-number new_h_arr new_h_arr new_h_arr new_h_arr new_h_arr new_h_arr new_h_arr) (and-number and-number rightrotate rightrotate add-32bit) nil nil nil)) (/security/suite-b/sha-2.lisp::sha-main-loop (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((message-blocks-32) nil nil nil nil nil nil) ((message-blocks-32 a b c d e f g h h_arr) (0) (b c d e f g h) nil nil nil nil) (nil nil nil (Nth Nth Nth Nth Nth Nth Nth) nil nil nil) ((h_arr h_arr h_arr h_arr h_arr h_arr h_arr) (1 2 3 4 5 6 7) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/suite-b/sha-2.lisp::sha-loop (nil nil nil (sha-main-loop) nil nil nil) ((h_arr) nil nil nil (sha-expand-loop) nil nil) (nil (16 63) (bytes-to-32bit-blocks) nil nil nil nil) ((message-bytes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/suite-b/sha-2.lisp::sha-encrypt1 (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((multiple-64-byte-blocks) nil (null) (sha-loop let) nil nil nil) ((h_arr (new_h_arr (sha-loop (car multiple-64-byte-blocks) h_arr))) nil (cdr car) (recursive-call) nil nil nil) ((multiple-64-byte-blocks multiple-64-byte-blocks new_h_arr) nil (cdr) nil nil nil nil) ((multiple-64-byte-blocks) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/suite-b/sha-2.lisp::sha-encrypt (nil nil nil (let) nil nil nil) (((h_arr *h*)) nil nil (sha-encrypt1) nil nil nil) ((multiple-64-byte-blocks h_arr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/suite-b/sha-2.lisp::sha-2 (nil nil nil nil (if) nil nil) ((nil) nil (not) (let*) nil nil nil) (nil nil (stringp sha-encrypt) ((message-bytes (string-to-bytes S))) nil nil nil) ((S multiple-64-byte-blocks) nil (appended-bytes multiple-64-byte-blocks) nil nil nil nil) (nil nil (append-one-and-k-zeros-and-len bytes-to-multiple-64-byte-blocks) nil nil nil nil) ((message-bytes appended-bytes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))