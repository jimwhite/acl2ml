((/data-structures/memories/memtree.lisp::_memtree-p (nil nil nil nil (if) nil nil) ((t) nil (zp) nil (if) nil nil) ((depth) nil (atom null) nil (and) nil nil) ((mtree mtree) nil (not) (recursive-call recursive-call) nil nil nil) (nil nil (car 1- cdr 1-) (and) nil nil nil) ((mtree depth mtree depth) nil (null null) nil nil nil nil) (nil nil (car cdr) nil nil nil nil)) (/data-structures/memories/memtree.lisp::_memtree-fix (nil nil nil nil (if) nil nil) ((mtree nil) nil (mbt) nil nil nil nil) (nil nil nil (_memtree-p) nil nil nil) ((mtree depth) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/memories/memtree.lisp::_address-p (nil nil nil (and) nil nil nil) (nil nil (natp) (<) nil nil nil) ((addr addr) nil nil (expt) nil nil nil) (nil (2) (nfix) nil nil nil nil) ((depth) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/memories/memtree.lisp::_address-fix (nil nil nil nil (if) nil nil) ((addr) (0) (mbt) nil nil nil nil) (nil nil nil (_address-p) nil nil nil) ((addr depth) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/memories/memtree.lisp::_memtree-load (nil nil nil (let) nil nil nil) (nil nil ((addr (_address-fix addr depth))) nil (if) nil nil) ((mtree) nil (mtree zp) nil (recursive-call) nil nil) ((depth) nil (1-) (_memtree-fix floor) (if) nil nil) ((mtree depth addr depth) (2) (car cdr) (=) nil nil nil) ((mtree mtree) (0) nil (mod) nil nil nil) ((addr) (2) nil nil nil nil nil)) (/data-structures/memories/memtree.lisp::_fix-addr/depth-memtree-load (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (_memtree-load if) nil nil) ((addr mtree depth mtree) nil nil (=) (recursive-call) nil nil) ((depth) (0) (the-fixnum the-fixnum) nil (if) nil nil) (nil nil (car cdr 1-) (ash =) nil nil nil) ((addr mtree mtree depth) (-1 0) (the-fixnum) nil nil nil nil) (nil nil nil (logand) nil nil nil)) (/data-structures/memories/memtree.lisp::_fixnum-memtree-load (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (_memtree-load if) nil nil) ((addr mtree depth) nil nil (<=) (_fix-addr/depth-memtree-load recursive-call) nil nil) ((depth addr mtree depth) (29) (the-fixnum) (ash) (if) nil nil) ((addr) (-1) (car cdr 1-) (=) nil nil nil) ((mtree mtree depth) (0) (the-fixnum) nil nil nil nil) (nil nil nil (logand) nil nil nil)) (/data-structures/memories/memtree.lisp::_memtree-store (nil nil nil (let) nil nil nil) (nil nil ((addr (_address-fix addr depth))) nil (if) nil nil) ((elem) nil (mtree zp) (let) nil nil nil) ((depth (quotient (floor addr 2))) nil nil (_memtree-fix) (if) nil nil) ((mtree depth) nil nil (= cons cons) nil nil nil) (nil (0) (cdr car) (mod) nil (recursive-call recursive-call) nil) ((addr quotient elem mtree mtree quotient elem) (2) (car 1- cdr 1-) nil nil nil nil)) (/data-structures/memories/memtree.lisp::_fix-addr/depth-memtree-store (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (_memtree-store) nil) ((addr elem mtree depth elem) nil nil (= let) nil nil nil) ((depth (quotient (the-fixnum (ash addr -1)))) (0) nil nil (if) nil nil) (nil nil nil (= cons cons) nil nil nil) (nil (0) (the-fixnum cdr car) nil nil (recursive-call recursive-call) nil) ((quotient elem mtree mtree quotient elem) nil (car the-fixnum cdr the-fixnum) (logand) nil nil nil)) (/data-structures/memories/memtree.lisp::_fixnum-memtree-store (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) (_memtree-store) nil) ((addr elem mtree depth) nil nil (<= let) nil (_fix-addr/depth-memtree-store) nil) ((depth addr elem mtree depth (quotient (ash addr -1))) (29) nil nil (if) nil nil) (nil nil nil (= cons cons) nil nil nil) (nil (0) (the-fixnum cdr car) nil nil (recursive-call recursive-call) nil) ((quotient elem mtree mtree quotient elem) nil (car the-fixnum cdr the-fixnum) (logand) nil nil nil)) (/data-structures/memories/memtree.lisp::_memtree-store-nil (nil nil nil (let) nil nil nil) (nil nil ((addr (_address-fix addr depth))) nil (if) nil nil) ((nil) nil (mtree zp) nil (if) nil nil) ((depth nil) nil (atom) (_memtree-fix let) nil nil nil) ((mtree depth mtree (quotient (floor addr 2))) nil nil nil (if) nil nil) (nil nil nil (= let let) nil nil nil) (nil (0) ((left (_memtree-store-nil quotient (car mtree) (1- depth))) (left (car mtree))) (mod) (if if) nil nil)) (/data-structures/memories/memtree.lisp::_fix-addr/depth-memtree-store-nil (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (_memtree-store-nil if) nil nil) ((addr mtree depth nil) nil nil (=) (if) nil nil) ((depth nil) (0) (null) (let) nil nil nil) ((mtree (quotient (the-fixnum (ash addr -1)))) nil nil nil (if) nil nil) (nil nil nil (= let let) nil nil nil) (nil (0) (the-fixnum (left (_fix-addr/depth-memtree-store-nil quotient (car mtree) (the-fixnum (1- depth)))) (left (car mtree))) nil (if if) nil nil)) (/data-structures/memories/memtree.lisp::_fixnum-memtree-store-nil (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (_memtree-store-nil if) nil nil) ((addr mtree depth) nil nil (<=) (_fix-addr/depth-memtree-store-nil if) nil nil) ((depth addr mtree depth nil) (29) (null) (let) nil nil nil) ((mtree (quotient (ash addr -1))) nil nil nil (if) nil nil) (nil nil nil (= let let) nil nil nil) (nil (0) (the-fixnum (left (_fixnum-memtree-store-nil quotient (car mtree) (the-fixnum (1- depth)))) (left (car mtree))) nil (if if) nil nil)))