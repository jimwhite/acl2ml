((/bdd/pg-theory.lisp::v-propagate (nil nil nil nil (if) nil nil) ((t) nil (endp) (and) nil nil nil) ((a) nil nil (or recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((a b a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/pg-theory.lisp::v-generate (nil nil nil nil (if) nil nil) ((nil) nil (endp) (or) nil nil nil) ((a) nil nil (recursive-call) (and) nil nil) (nil nil (cdr cdr car car) (v-propagate) nil nil nil) ((a b a b) nil (cdr cdr) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/pg-theory.lisp::tv-adder (nil nil nil nil (if) nil nil) (nil nil (atom) (let) (list) nil nil) ((tree (lhs (tv-adder c (tfirstn a tree) (tfirstn b tree) (car tree)))) nil nil (or and b-xor let) nil nil nil) (nil nil (car car car car car) (b-xor (lhs-p (car lhs)) let) nil nil nil) ((a b a b a c (rhs-c (t-carry c lhs-p lhs-g))) nil (car lhs-g lhs-sum) (let) nil nil nil) ((b (rhs (tv-adder rhs-c (trestn a tree) (trestn b tree) (cdr tree)))) nil (cadr cddr) (let) nil nil nil) ((lhs lhs) nil nil ((rhs-p (car rhs)) let) nil nil nil)) (/bdd/pg-theory.lisp::v-sum (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((a) nil nil (b-xor) (recursive-call) nil nil) ((c) nil (cdr cdr) (b-xor) (or) nil nil) ((a b) nil (car car) (and and and) nil nil nil) ((a b c c) nil (car car car car) nil nil nil nil) ((a b a b) nil nil nil nil nil nil)))