((/symbolic/generic/tiny-fib-correct.lisp::fib-spec (nil nil nil nil (cond) nil nil) (nil nil ((zp n) (equal n 1) t) nil nil nil nil) (nil (1 1) nil (plus<32>) nil nil nil) (nil nil (recursive-call recursive-call) nil nil nil nil) (nil nil nil (- -) nil nil nil) ((n n) (1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/tiny-fib-correct.lisp::tiny-fib-cutpoint (nil nil nil (member) nil nil nil) ((*fib-cutpoints*) nil (progc) nil nil nil nil) ((tiny-state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/tiny-fib-correct.lisp::tiny-fib-assertion (nil nil nil nil nil nil nil) (nil nil (tiny-statep) (signed-byte-p <= equal) (program-loaded) nil (cond)) ((tiny-state *fib-prog* *prog-start-address* tiny-state *word-size* n n *init-dtos*) (0) (dtos (equal (progc tiny-state) *prog-start-address*) (equal (progc tiny-state) *loop-label*) (equal (progc tiny-state) *done-label*) (equal (progc tiny-state) *prog-halt-address*) t) nil nil nil nil) ((tiny-state t) nil nil (and and equal) nil (and) nil) (nil nil (fib-spec) (<= equal <= equal equal = equal dtos-val) (if) nil nil) ((n tiny-state n) (0 0 0 0) (fib-spec fib-spec fib-spec) (dtos-val dtos-val dtos-val < < <= memi memi dtos-val memi) nil nil nil) ((tiny-state tiny-state tiny-state n n n *fib-1-adr* tiny-state *fib-adr* tiny-state tiny-state *fib-adr* tiny-state n) (0 0 0 0 0) (1-) (dtos-val dtos-val -) nil nil nil)) (/symbolic/generic/tiny-fib-correct.lisp::tiny-fib-exitpoint (nil nil nil (equal) nil nil nil) ((*prog-halt-address*) nil (progc) nil nil nil nil) ((tiny-state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/tiny-fib-correct.lisp::tiny-fib-precondition (nil nil nil nil nil nil nil) (nil nil (tiny-statep) (equal equal <= equal) (program-loaded) nil nil) ((tiny-state *fib-prog* *prog-start-address* tiny-state *init-dtos* *prog-start-address* n) (0) (dtos progc) (dtos-val dtos-val) nil nil nil) ((tiny-state tiny-state tiny-state tiny-state) (0 0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/tiny-fib-correct.lisp::tiny-fib-postcondition (nil nil nil (equal) nil nil nil) (nil nil (fib-spec) (dtos-val) nil nil nil) ((tiny-state n) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/tiny-fib-correct.lisp::tiny-fib-measure (nil nil nil nil (if) nil nil) (nil (0) nil (tiny-fib-exitpoint o+) nil nil nil) ((n tiny-state) nil (nfix) (o*) nil nil nil) ((omega) nil (nfix) (-) nil nil nil) ((*max-prog-address*) nil (progc) (dtos-val) nil nil nil) ((tiny-state tiny-state) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/tiny-fib-correct.lisp::tiny-fib-run (nil nil nil nil (if) nil nil) ((tiny-state) nil (zp) (let*) nil nil nil) ((n (tiny-state (next tiny-state))) nil nil (recursive-call) nil nil nil) ((tiny-state) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))