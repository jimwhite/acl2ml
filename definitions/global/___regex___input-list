((/regex/input-list.lisp::string-index-measure (nil nil nil nil (if) nil nil) (nil (0) (nfix) (and) nil nil nil) (nil nil (stringp natp) nil (+) nil nil) ((str idx) (1) (length -) nil nil nil nil) ((str idx) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::string-index-end (nil nil nil nil (or) nil nil) (nil nil (not not) (>=) nil nil nil) ((idx) nil (mbt mbt length) nil nil nil nil) ((str) nil (natp stringp) nil nil nil nil) ((idx str) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::string-index-past-end (nil nil nil nil (or) nil nil) (nil nil (not not) (>) nil nil nil) ((idx) nil (mbt mbt length) nil nil nil nil) ((str) nil (natp stringp) nil nil nil nil) ((idx str) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::length-equiv (nil nil nil (=) nil nil nil) (nil nil (length length) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::indexp (nil nil nil (and) nil nil nil) (nil nil (natp) (<=) nil nil nil) ((n n) nil (length) nil nil nil nil) ((str) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::backrefp (nil nil nil nil nil (and) nil) (nil nil (consp) (indexp indexp <=) nil nil nil) ((x str str) nil (car cdr car cdr) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::pseudo-backrefp (nil nil nil nil (and) nil nil) (nil nil (consp natp natp) nil nil nil nil) ((x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::get-backref-string (nil nil nil nil (subseq) nil nil) ((str) nil (car cdr) nil nil nil nil) ((br br) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::backref-listp (nil nil nil nil (if) nil nil) (nil nil (atom) (equal and) nil nil nil) ((l l nil) nil nil (or recursive-call) nil nil nil) ((str) nil (not cdr) (backrefp) nil nil nil) ((str l) nil (car car) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::pseudo-backref-listp (nil nil nil nil (if) nil nil) (nil nil (atom null) (and) nil nil nil) ((l l) nil (recursive-call) (or) nil nil nil) (nil nil (not pseudo-backrefp cdr) nil nil nil nil) ((l) nil (car car) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::input-list-eltp (nil nil nil nil (and) nil nil) (nil nil (consp) (indexp backref-listp) nil nil nil) ((x str str) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::pseudo-input-list-eltp (nil nil nil nil (and) nil nil) (nil nil (consp natp pseudo-backref-listp) nil nil nil nil) ((x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::min-idx-il (nil nil nil nil (if) nil nil) (nil nil (atom length) (min) nil nil nil) ((il str) nil (caar) (recursive-call) nil nil nil) ((il str) nil (cdr) nil nil nil nil) ((il) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::longest-il (nil nil nil nil (if) nil nil) (nil nil (atom car) (let) nil nil nil) ((il (l-rest (longest-il (cdr il)))) nil (cdr) nil (if) nil nil) ((il l-rest) nil (car) (>=) nil nil nil) ((il) nil (caar car) nil nil nil nil) ((il l-rest) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::remove-all-longer-equal-fn (nil nil nil nil (if) nil nil) ((nil) nil (list) (>) nil nil nil) ((minidx x) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/input-list.lisp::remove-all-longer-equal-il (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((s) nil nil (remove-all-longer-equal-fn recursive-call) nil nil nil) ((minidx minidx) nil (car cdr) nil nil nil nil) ((s s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))