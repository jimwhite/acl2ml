((/unicode/read-file-characters.lisp::tr-read-char$-all (nil nil nil nil (if) nil nil) (nil nil (mbt) (mv) (mv-let) nil nil) ((nil state) nil (state-p char) (read-char$) (if) nil nil) ((state state channel state) nil nil (eq mv) (recursive-call) nil nil) ((char nil acc state channel state) nil nil (cons) nil nil nil) ((char acc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/unicode/read-file-characters.lisp::read-char$-all (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if mv-let) nil nil) (nil nil (state-p data) (mv mv) (mv-let tr-read-char$-all) nil nil) ((state nil state state channel state nil state) nil (char reverse) (read-char$) (if) nil nil) ((state channel state data) nil (null) (mv) (mv-let) nil nil) ((char nil state) nil (rest) (recursive-call mv) nil nil nil) ((state channel state state) nil nil (cons) nil nil nil)) (/unicode/read-file-characters.lisp::read-file-characters (nil nil nil nil (mv-let) nil nil) (nil nil (channel) nil (open-input-channel if) nil nil) ((state filename :character state channel) nil nil (mv) (mv-let) nil nil) ((Error opening file. state) nil (data) (read-char$-all let) nil nil nil) ((state channel state (state (close-input-channel channel state))) nil nil (mv) nil nil nil) ((data state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/unicode/read-file-characters.lisp::read-file-characters-rev (nil nil nil nil (mv-let) nil nil) (nil nil (channel) nil (open-input-channel if) nil nil) ((state filename :character state channel) nil nil (mv) (mv-let) nil nil) ((Error opening file. state) nil (data) (let) (tr-read-char$-all) nil nil) ((state channel state nil (state (close-input-channel channel state))) nil nil (mv) nil nil nil) ((data state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))