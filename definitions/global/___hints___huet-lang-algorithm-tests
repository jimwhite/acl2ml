((/hints/huet-lang-algorithm-tests.lisp::generic-run (nil nil nil nil (if) nil nil) ((s) nil (zp) (recursive-call) nil nil nil) ((n) nil (h) (-) nil nil nil) ((s n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::m5-run (nil nil nil nil (if) nil nil) ((s) nil (zp) (recursive-call) nil nil nil) ((n) nil nil (cons -) nil nil nil) ((s n) (3 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::hld-test-fn (nil nil nil nil (if) nil nil) (nil nil (value) (equal) nil nil (er)) ((ans t soft HLD Test failed ~x0 versus ~x1 generic concrete) nil (quote) nil nil nil nil) ((generic concrete nil nil hld-test) (1) (quote w) nil nil nil nil) ((state) (-1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::map-h (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((x) nil (h recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::bumper1 (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((u) nil nil (+) (recursive-call) nil nil) ((v v w) nil (cdr) (*) nil nil nil) ((w u) nil (car) nil nil nil nil) ((u) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::bumper2 (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((u) nil nil (+) (recursive-call) nil nil) ((v v w) nil (cdr) (*) nil nil nil) ((w u) nil (car) nil nil nil nil) ((u) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::bumper3 (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((u) nil (zp) (cons cons) nil nil nil) (nil (0) (car) (+) (recursive-call recursive-call) nil nil) ((u v w v v w) nil (cdr cdr) (*) nil nil nil) ((u w u) nil (car) nil nil nil nil) ((u) nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::generic-exists (nil nil nil nil (if) nil nil) ((nil) nil (endp) (or) nil nil nil) ((x) nil (h recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::generic-list-iterator (nil nil nil (cond) nil nil nil) (nil nil ((endp x) t) nil nil nil nil) ((ans) nil nil (recursive-call) nil nil nil) (nil nil (cdr) (g) nil nil nil) ((x ans) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hints/huet-lang-algorithm-tests.lisp::get-integers (nil nil nil (cond) nil nil nil) (nil nil ((consp x) t) nil nil nil nil) ((a) nil nil (cond) nil nil nil) (nil nil ((integerp (car x)) t) nil nil nil nil) (nil nil nil (recursive-call recursive-call) nil nil nil) ((a) nil (cdr cdr) (cons) nil nil nil) ((x a x) nil (car) nil nil nil nil)))