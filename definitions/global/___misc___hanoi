((/misc/hanoi.lisp::mem (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((x x) nil nil (equal recursive-call) nil nil nil) ((e e) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::app (nil nil nil nil (if) nil nil) ((y) nil (consp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::del (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((x) nil (cdr) (equal cons) nil nil nil) ((e x) nil (car car) (recursive-call) nil nil nil) ((x x e) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::perm (nil nil nil nil (if) nil nil) (nil nil (consp not) (and) nil nil nil) ((x) nil (consp) (mem recursive-call) nil nil nil) ((y y) nil (car cdr) (del) nil nil nil) ((x x y) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::get (nil nil nil nil (if) nil nil) (nil nil (zp car) (recursive-call) nil nil nil) ((n x) nil (cdr) (-) nil nil nil) ((n x) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::put (nil nil nil nil (if) nil nil) (nil nil (zp) (cons cons) nil nil nil) ((n v) nil (cdr car) nil (recursive-call) nil nil) ((x x v) nil (cdr) (-) nil nil nil) ((n x) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::push (nil nil nil (cons) nil nil nil) ((e x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::pop (nil nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::top (nil nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::h (nil nil nil nil (if) nil nil) ((nil) nil (zp) (app) nil nil nil) ((n) nil nil (cons) nil (recursive-call) nil) ((i k j) nil nil (-) (list) (recursive-call) nil) ((n i k j i k) (1) (quote) (-) nil nil nil) ((MOVE n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::Hanoi (nil nil nil nil nil (h) nil) ((n) (0 1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::a (nil nil nil (get) nil nil nil) ((m) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::b (nil nil nil (get) nil nil nil) ((m) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::legal-syntaxp (nil nil nil nil nil nil nil) (nil nil (true-listp not) (equal equal mem mem) nil nil nil) ((m) (3) (car quote len a quote b quote) (equal) nil nil nil) ((m MOVE m m m) nil (a b) (0 0) nil nil nil) ((m m) (1 2 1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::legal-movep (nil nil nil nil (and) nil nil) (nil nil (legal-syntaxp consp) nil (if) nil nil) ((m t) nil (consp) (get <) nil nil nil) ((s) nil (a car car) (get) nil nil nil) ((m s) nil (b) (get get) nil nil nil) ((m s s) nil (a b) nil nil nil nil) ((m m) nil nil nil nil nil nil)) (/misc/hanoi.lisp::do-move (nil nil nil (let) nil nil nil) (nil nil ((stacka (get (a m) s))) nil (put) nil nil) (nil nil (stackb pop a) nil (put) nil nil) ((stacka m s) nil (b) (get push) nil nil nil) ((s stackb m) nil (b top) nil nil nil nil) ((m stacka) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::play (nil nil nil nil (if) nil nil) ((s) nil (consp) nil (if) nil nil) ((moves nil) nil nil (legal-movep recursive-call) nil nil nil) ((s) nil (car cdr) (do-move) nil nil nil) ((moves moves s) nil (car) nil nil nil nil) ((moves) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::tower (nil nil nil nil (if) nil nil) ((nil) nil (zp) (app) nil nil nil) ((n) nil (recursive-call list) nil nil nil nil) ((n) nil nil (-) nil nil nil) ((n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::big-tops (nil nil nil nil (and) nil nil) (nil nil nil (or or or) nil nil nil) (nil nil (endp endp endp) (< < <) nil nil nil) ((n n n) nil (car car car) (get get get) nil nil nil) ((a s b s c s) nil nil (get get get) nil nil nil) ((a s b s c s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/hanoi.lisp::induction-hint (nil nil nil nil (if) nil nil) (nil nil (zp) (list) nil nil (list)) ((n a b c n s) nil nil nil nil nil (recursive-call recursive-call)) ((a c b b a c) nil nil (- -) (put put) nil nil) ((n a s n c s) (1 1) nil (push push) nil nil nil) ((n n) nil nil (get get) nil nil nil) ((a s c s) nil nil nil nil nil nil)))