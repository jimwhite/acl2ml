((/models/y86/y86-two-level-abs/common/x86-state.lisp::read-over-write-thms-array (nil nil nil nil (cond) nil nil) (nil nil ((endp x86-32-model) (equal (mk-name (subseq (symbol-name (car (car x86-32-model))) 0 (search $C (symbol-name (car (car x86-32-model)))))) this-name) t) nil nil nil nil) (nil nil (quote) (recursive-call let*) nil nil nil) ((nil this-name) nil (cdr) (cond) nil ((x86-32-model-field (car x86-32-model))) nil) ((x86-32-model) nil (that-name end that-name that-type (and (consp that-type) (equal (car that-type) (quote array))) t) nil nil nil nil) (nil nil (car caddr) (search let let) (subseq) nil nil) ((x86-32-model-field $C end x86-32-model-field) (0) (symbol-name symbol-name (this-getter (mk-name this-name I)) (this-getter (mk-name this-name I))) (cons cons) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::write-over-write-thms-array-1 (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote) (let*) nil nil nil) ((nil) nil nil (cond) nil ((x86-32-model-field (car x86-32-model))) nil) (nil nil (that-name end that-name that-type (and (consp that-type) (equal (car that-type) (quote array))) t) nil nil nil nil) (nil nil (car caddr) (search let let) (subseq) nil nil) ((x86-32-model-field $C end x86-32-model-field) (0) (symbol-name symbol-name (this-setter (mk-name ! this-name I)) (this-setter (mk-name ! this-name I))) (cons cons) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::write-over-write-thms-array (nil nil nil nil (cond) nil nil) (nil nil ((endp x86-32-model) (equal (car (car x86-32-model)) this-name) t) nil nil nil nil) (nil nil (quote) (write-over-write-thms-array-1 recursive-call) nil nil nil) ((nil this-name this-name) nil (cdr cdr) nil nil nil nil) ((x86-32-model x86-32-model) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::read-over-write-thms-simple (nil nil nil nil (cond) nil nil) (nil nil ((endp x86-32-model) (equal (mk-name (subseq (symbol-name (car (car x86-32-model))) 0 (search $C (symbol-name (car (car x86-32-model)))))) this-name) t) nil nil nil nil) (nil nil (quote) (recursive-call let*) nil nil nil) ((nil this-name) nil (cdr) (cond) nil ((x86-32-model-field (car x86-32-model))) nil) ((x86-32-model) nil (that-name end that-name that-type (and (consp that-type) (equal (car that-type) (quote array))) t) nil nil nil nil) (nil nil (car caddr) (search let let) (subseq) nil nil) ((x86-32-model-field $C end x86-32-model-field) (0) (symbol-name symbol-name (this-getter (mk-name this-name)) (this-getter (mk-name this-name))) (cons cons) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::write-over-write-thms-simple-1 (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote) (let*) nil nil nil) ((nil) nil nil (cond) nil ((x86-32-model-field (car x86-32-model))) nil) (nil nil (that-name end that-name that-type (and (consp that-type) (equal (car that-type) (quote array))) t) nil nil nil nil) (nil nil (car caddr) (search let let) (subseq) nil nil) ((x86-32-model-field $C end x86-32-model-field) (0) (symbol-name symbol-name (this-setter (mk-name ! this-name)) (this-setter (mk-name ! this-name))) (cons cons) nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::write-over-write-thms-simple (nil nil nil nil (cond) nil nil) (nil nil ((endp x86-32-model) (equal (car (car x86-32-model)) this-name) t) nil nil nil nil) (nil nil (quote) (write-over-write-thms-simple-1 recursive-call) nil nil nil) ((nil this-name this-name) nil (cdr cdr) nil nil nil nil) ((x86-32-model x86-32-model) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::x86-32-stobj-field-thms-fn-1 (nil nil nil (let*) nil nil nil) (nil nil nil nil ((name (car x86-32-model-field))) nil nil) (nil nil (end name type (and (consp type) (equal (car type) (quote array)) (consp (cadr type)) (equal (car (cadr type)) (quote unsigned-byte))) (and (consp type) (equal (car type) (quote array)) (consp (cadr type)) (equal (car (cadr type)) (quote signed-byte))) (and (consp type) (equal (car type) (quote unsigned-byte))) (and (consp type) (equal (car type) (quote signed-byte))) (and (consp type) (equal (car type) (quote integer))) t) nil nil nil nil) (nil nil (mk-name caddr) (search let* let* let* let* let* let*) nil nil nil) (($C x86-32-model-field) nil (symbol-name ` ` ` ` ` (getter name) `) nil (subseq (predicate (mk-name name P)) (predicate (mk-name name P)) (predicate (mk-name name P))) nil ((predicate (mk-name name P)) (predicate (mk-name name P)))) ((name end) (0) (symbol-name namei getter setter size length namei getter setter size length getter setter size getter setter size getter setter size setter) nil nil ((DEFTHM (, (mk-name getter - setter)) (EQUAL ((, getter) ((, setter) V x86-32)) V))) nil) ((name namei namei) nil (cadr ,@ ,@ 1- ,@ ,@ mk-name cadr ,@ ,@ mk-name 1- ,@ ,@ mk-name caddr ,@ ,@ ,@ ,@) (mk-name mk-name DEFTHM DEFTHM DEFTHM DEFTHM mk-name mk-name DEFTHM DEFTHM DEFTHM DEFTHM mk-name DEFTHM DEFTHM DEFTHM mk-name DEFTHM DEFTHM DEFTHM mk-name DEFTHM DEFTHM DEFTHM mk-name DEFTHM DEFTHM) (if ENCAPSULATE if) (DEFTHM DEFTHM DEFTHM DEFTHM DEFTHM DEFTHM) (ENCAPSULATE))) (/models/y86/y86-two-level-abs/common/x86-state.lisp::x86-32-stobj-x86-32p-setter-thms-fn-1 (nil nil nil (let*) nil nil nil) (nil nil nil nil nil ((name (car x86-32-model-field))) nil) (nil nil (type end name predicate (and (consp type) (equal (car type) (quote array)) (consp (cadr type)) (equal (car (cadr type)) (quote unsigned-byte))) (and (consp type) (equal (car type) (quote array)) (consp (cadr type)) (equal (car (cadr type)) (quote signed-byte))) (and (consp type) (equal (car type) (quote unsigned-byte))) (and (consp type) (equal (car type) (quote signed-byte))) (and (consp type) (equal (car type) (quote integer))) t) nil nil nil nil) (nil nil (caddr mk-name) (search mk-name let* let* let* let* let* let*) nil nil nil) ((x86-32-model-field $C name P (setter (mk-name ! name))) nil (symbol-name ` ` (setter (mk-name ! name)) ` (setter (mk-name ! name)) ` (setter (mk-name ! name)) ` `) nil (subseq (namei (mk-name name I)) (namei (mk-name name I))) nil nil) ((name end (DEFTHM (, (mk-name X86-32P- setter)) (IMPLIES (FORCED-AND (x86-32P x86-32) (INTEGERP I) (<= 0 I) (< I (, length)) (INTEGERP V) (<= 0 V) (< V (, (expt 2 size)))) (, (if (or (equal name (quote mem-table)) (equal name (quote mem-array))) (` (x86-32P-PRE ((, setter) I V x86-32))) (` (x86-32P ((, setter) I V x86-32)))))) :HINTS ((GOAL :IN-THEORY (ENABLE (, predicate))))) (DEFTHM (, (mk-name X86-32P- setter)) (IMPLIES (FORCED-AND (x86-32P x86-32) (INTEGERP I) (<= 0 I) (< I (, length)) (INTEGERP V) (<= (, (- (expt 2 size))) V) (< V (, (expt 2 size)))) (, (if (or (equal name (quote mem-table)) (equal name (quote mem-array))) (` (x86-32P-PRE ((, setter) I V x86-32))) (` (x86-32P ((, setter) I V x86-32)))))) :HINTS ((GOAL :IN-THEORY (ENABLE (, predicate))))) (DEFTHM (, (mk-name X86-32P- setter)) (IMPLIES (FORCED-AND (x86-32P x86-32) (INTEGERP V) (<= 0 V) (< V (, (expt 2 size)))) (, (if (equal name (quote mem-array-next-addr)) (` (x86-32P-PRE ((, setter) V x86-32))) (` (x86-32P ((, setter) V x86-32)))))) :HINTS ((GOAL :IN-THEORY (ENABLE (, predicate))))) (DEFTHM (, (mk-name X86-32P- setter)) (IMPLIES (FORCED-AND (x86-32P x86-32) (INTEGERP V) (<= (, (- (expt 2 size))) V) (< V (, (expt 2 size)))) (, (if (equal name (quote mem-array-next-addr)) (` (x86-32P-PRE ((, setter) V x86-32))) (` (x86-32P ((, setter) V x86-32)))))) :HINTS ((GOAL :IN-THEORY (ENABLE (, predicate))))) (DEFTHM (, (mk-name X86-32P- setter)) (IMPLIES (FORCED-AND (x86-32P x86-32) (INTEGERP V) (<= 0 V) (<= V (, size))) (, (if (equal name (quote mem-array-next-addr)) (` (x86-32P-PRE ((, setter) V x86-32))) (` (x86-32P ((, setter) V x86-32)))))) :HINTS ((GOAL :IN-THEORY (ENABLE (, predicate))))) (DEFTHM (, (mk-name X86-32P- setter)) (IMPLIES (FORCE (x86-32P x86-32)) (x86-32P ((, setter) V x86-32))) :HINTS ((GOAL :IN-THEORY (ENABLE (, predicate)))))) (0) (symbol-name setter size length setter size length size size size) nil nil nil nil) ((name) nil (cadr 1- cadr 1- caddr) (mk-name mk-name) (if if) nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::x86-32-stobj-x86-32p-setter-thms-fn (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote `) nil nil nil nil) ((nil) nil ((,@ (x86-32-stobj-x86-32p-setter-thms-fn-1 (car x86-32-model)))) nil nil nil nil) (nil nil (,@) nil nil nil nil) (nil nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::x86-32-stobj-field-thms-fn (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote `) nil nil nil nil) ((nil) nil ((,@ (x86-32-stobj-field-thms-fn-1 (car x86-32-model) full-x86-32-model))) nil nil nil nil) (nil nil (,@) nil nil nil nil) (nil nil nil (recursive-call) nil nil nil) ((full-x86-32-model) nil (cdr) nil nil nil nil)) (/models/y86/y86-two-level-abs/common/x86-state.lisp::disable-abs-stobj-fns-fn-1 (nil nil nil (cond) nil nil nil) (nil nil ((endp x86-32-model) t) nil nil nil nil) (nil nil (quote) (let*) nil nil nil) ((nil) nil nil ((name (car (car x86-32-model))) cond) nil nil nil) (nil nil (name type (and (consp type) (equal (car type) (quote array))) t) nil nil nil nil) (nil nil (mk-name caddr) (let* let*) nil nil nil) (nil nil (car) (append (getter name) append) (subseq (namei (mk-name name I))) nil nil)))