((/symbolic/generic/factorial-jvm-correct.lisp::fact (nil nil nil nil (if) nil nil) (nil (1) (zp) (*) nil nil nil) ((n n) nil (recursive-call) nil nil nil nil) (nil nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::mono-step (nil nil nil (step) nil nil nil) ((th s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::mono-run (nil nil nil nil (if) nil nil) ((s) nil (zp) (recursive-call) nil nil nil) ((n) nil (mono-step 1-) nil nil nil nil) ((s n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::sdepth (nil nil nil nil (if) nil nil) (nil (0) (endp) (+) nil nil nil) ((stk) (1) (recursive-call) nil nil nil nil) (nil nil (pop) nil nil nil nil) ((stk) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::fact-caller-framesp (nil nil nil nil (cond) nil nil) (nil nil ((zp k) (and (equal (pc (top cs)) 11) (equal (program (top cs)) (cdddr *fact-def*)) (equal (sync-flg (top cs)) (quote UNLOCKED)) (intp (nth 0 (locals (top cs)))) (equal (+ n0 (- k)) (- (nth 0 (locals (top cs))) 1)) (equal (nth 0 (locals (top cs))) (top (stack (top cs))))) t) nil nil nil nil) ((t nil) nil nil nil (recursive-call) nil nil) ((n0) nil (pop) (-) nil nil nil) ((cs k) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::fact-assertion (nil nil nil nil nil (and) nil) (nil nil (integerp) (< equal cond) nil nil nil) ((d0 d0) (1) (quote (< (sdepth (call-stack (th) s)) d0) t) (status) nil nil nil) ((th s scheduled) nil nil (equal let) nil nil nil) (((n (nth 0 (locals (top-frame (th) s))))) nil (top int-fix) nil nil nil nil) (nil nil (stack fact intp intp) (equal equal equal <= <= equal) (fact-caller-framesp) (case) nil) ((n0 *fact-def* n0 n n n n0 n0) (0) (program cdddr sync-flg quote sdepth pop pc 0 (12 14) t) (top-frame + -) (lookup-method) nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::fact-cutpoint (nil nil nil (and) nil nil nil) (nil nil nil (>) nil (or) nil) (nil (0) (sdepth) (< equal equal equal) nil nil nil) ((d0) (0 12 14) (sdepth pc pc pc) (call-stack) nil nil nil) ((th s) nil nil (call-stack top-frame top-frame top-frame) nil nil nil) ((th s th s th s th s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::fact-exitpoint (nil nil nil (and) nil nil nil) (nil nil nil (< >) nil nil nil) ((d0) (0) (sdepth sdepth) nil nil nil nil) (nil nil nil (call-stack call-stack) nil nil nil) ((th s th s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::fact-precondition (nil nil nil nil nil nil nil) (nil nil (intp integerp) (<= < equal equal equal equal equal equal equal) nil nil nil) ((n0 n0 d0 d0 *fact-def* d0) (0 1 0) (pc locals list program cdddr quote sync-flg quote sdepth) (status) (lookup-method) nil nil) ((n0 *fact-def* th s scheduled unlocked fact Demo) nil (class-table) (top-frame top-frame top-frame top-frame call-stack) nil nil nil) ((th s th s th s th s s th s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::fact-postcondition (nil nil nil (equal) nil nil nil) (nil nil (top int-fix) nil nil nil nil) (nil nil (stack fact) nil nil nil nil) ((n0) nil nil (top-frame) nil nil nil) ((th s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::dummy-state ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/generic/factorial-jvm-correct.lisp::factorial-rank (nil nil nil nil (if) nil nil) (nil (0) nil (acl2::o+) (fact-exitpoint) nil nil) ((n0 d0 s) nil (sdepth) (acl2::o*) nil nil nil) ((acl2::omega) nil nil (call-stack) (if) nil nil) ((th s) (1) (nfix) (and) nil nil nil) (nil nil nil (equal >= +) nil nil nil) ((d0) (0 2) (pc sdepth) (nth) nil nil nil)))