((/centaur/misc/vecs-ints.lisp::int-to-v (nil nil nil nil (if) nil nil) ((nil) nil (zp) (let) nil nil nil) ((n (rest (int-to-v (ash x -1) (1- n)))) nil nil (cons) nil nil nil) ((rest) nil nil (logbitp) nil nil nil) ((x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/vecs-ints.lisp::v-to-nat (nil nil nil nil (if) nil nil) (nil (0) (atom) (let) nil nil nil) ((a (rst (* 2 (v-to-nat (cdr a))))) nil nil (+) nil nil nil) ((rst) nil nil nil (if) nil nil) (nil (1 0) (car) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/misc/vecs-ints.lisp::v-to-int (nil nil nil nil (if) nil nil) (nil (0) (atom) nil (if) nil nil) ((a) nil (atom) (let) (if) nil nil) (((rest (* 2 (v-to-int (cdr a))))) (-1 0) (cdr car) (+) nil nil nil) ((a a rest) nil nil nil (if) nil nil) (nil (1 0) (car) nil nil nil nil) ((a) nil nil nil nil nil nil)) nil (/centaur/misc/vecs-ints.lisp::fv-to-nat (nil nil nil nil (if) nil nil) (nil (0) (atom) (let) nil nil nil) ((a (rest (fv-to-nat (cdr a)))) nil nil nil (if) nil nil) ((rest) nil (integerp) nil (cond) nil nil) ((rest) nil ((equal (car a) (quote (t))) (equal (car a) (quote (nil . t))) t) nil nil nil nil) (nil nil (quote) (+ *) nil nil nil) ((rest x) (1 2) nil (*) nil nil nil)) (/centaur/misc/vecs-ints.lisp::fv-to-int (nil nil nil nil (if) nil nil) (nil (0) (atom) nil (if) nil nil) ((a) nil (atom) (let) (cond) nil nil) (((rest (fv-to-int (cdr a)))) nil (cdr (equal (car a) (quote (t))) (equal (car a) (quote (nil . t))) t) nil (if) nil nil) ((a rest) (-1 0) (quote integerp) nil (cond) nil nil) ((x rest) nil ((equal (car a) (quote (t))) (equal (car a) (quote (nil . t))) t) nil nil nil nil) (nil nil (quote) (+ *) nil nil nil)) nil)