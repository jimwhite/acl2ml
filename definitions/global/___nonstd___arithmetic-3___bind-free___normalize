((/nonstd/arithmetic-3/bind-free/normalize.lisp::distribute-* (nil nil nil (*) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::factors (nil nil nil nil (if) nil nil) (nil nil (list) (eq cons) nil nil nil) ((product) nil (fn-symb quote recursive-call) (fargn) nil nil nil) ((product BINARY-* product) (1) nil (fargn) nil nil nil) ((product) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::factors-other-than-denominator (nil nil nil nil (if) nil nil) (nil nil nil (eq) (if if) nil nil) ((nil) nil (fn-symb quote list) (and recursive-call cons and) nil nil nil) ((addend BINARY-* denominator addend) nil nil (eq equal fargn fargn recursive-call eq equal) nil nil nil) ((denominator addend addend denominator denominator) (2 1) (fn-symb quote fn-symb quote) (fargn fargn fargn) nil nil nil) ((UNARY-/ addend addend UNARY-/ addend) (1 2 1) nil (fargn fargn) nil nil nil) ((addend addend) (1 1) nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::make-product (nil nil nil nil nil (cond) nil) (nil nil ((null factors) (null (cdr factors)) (null (cddr factors)) t) nil nil nil nil) (nil nil (quote car) nil (list list) nil nil) ((factors) nil (quote quote car cadr quote car recursive-call) nil nil nil nil) ((BINARY-* factors factors BINARY-* factors) (1) (cdr) nil nil nil nil) ((factors) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::number-of-addends (nil nil nil nil (if) nil nil) (nil (1) nil (eq +) nil nil nil) (nil (1) (fn-symb quote recursive-call) nil nil nil nil) ((sum BINARY-+) nil nil (fargn) nil nil nil) ((sum) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-denominators-with-sums (nil nil nil nil nil (cond) nil) (nil nil ((or (variablep addend) (fquotep addend)) (eq (fn-symb addend) (quote BINARY-*)) (and (eq (fn-symb addend) (quote UNARY-/)) (eq (fn-symb (fargn addend 1)) (quote BINARY-+)) (consp (cdr (fargn addend 1))) (<= (number-of-addends (fargn addend 1)) number-of-addends-in-sum)) t) nil nil nil nil) ((denominator-list denominator-list) nil nil (cons) (if) nil nil) ((denominator-list) nil nil (fargn) (recursive-call recursive-call) (and) nil) ((number-of-addends-in-sum denominator-list number-of-addends-in-sum addend) (1) (consp) (eq eq <= fargn cons fargn) nil nil nil) ((number-of-addends-in-sum addend denominator-list addend) (2 2) (fn-symb quote fn-symb quote cdr number-of-addends) (fargn) nil nil nil) ((UNARY-/ BINARY-+) (1) nil (fargn fargn fargn fargn fargn) nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::to-be-found (nil nil nil nil (if) nil nil) (nil nil nil (eq let let) nil nil nil) (((factors-2 (factors (fargn denominator 1))) (factors-2 (factors denominator))) nil (fn-symb quote) nil (if if) nil nil) ((denominator BINARY-+ nil nil) nil (reverse) (intersectp-equal intersectp-equal) nil (recursive-call) nil) ((factors factors-2 saved-denominator factors factors factors-2) nil nil (fargn cons cons) nil nil nil) ((denominator recursive-call recursive-call) (2) nil (cons cons) nil nil nil) ((saved-denominator saved-denominator) nil nil (append append) nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::set-equal (nil nil nil (and) nil nil nil) (nil nil nil (subsetp-equal subsetp-equal) nil nil nil) ((a b b a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::remainder-aaa (nil nil nil nil nil nil (cond)) (nil nil ((endp to-be-found) (null rest) (eq (fn-symb rest) (quote BINARY-+)) (null (cdr to-be-found)) t) nil nil nil nil) ((remainder nil nil) nil nil nil (if if) nil nil) ((nil) nil nil (set-equal set-equal) (recursive-call recursive-call if) nil nil) ((remainder to-be-found remainder remainder) nil (factors car cdr factors car quote) (fargn fargn) (if) nil nil) ((to-be-found to-be-found rest rest rest to-be-found) (2 2) (null quote) (fargn fargn) (list) nil nil) ((rest remainder rest remainder) (1 1 0) (quote) (fargn) nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::denominatorp (nil nil nil nil nil (and) nil) (nil nil (pseudo-termp not not consp) nil nil nil nil) ((denominator) nil (variablep cdr) (equal) nil nil nil) ((denominator denominator) nil (car quote) nil nil nil nil) ((denominator QUOTE) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::normalize-terms-such-as-a/a+b-+-b/a+b-fn-2 (nil nil nil (let) nil nil nil) (nil nil ((factors1 (factors-other-than-denominator addend denominator))) nil (if) nil nil) ((nil) nil (factors2) (intersectp-equal let*) nil nil nil) ((factors1 factors2) nil (factors) ((factors (set-difference-equal factors1 factors2))) (if) nil nil) ((remainder nil) nil (to-be-found remainder) (fargn) nil (list) nil) ((denominator) (1) nil (cons cons cons cons) (remainder-aaa) (to-be-found) nil) ((factors nil to-be-found rest nil denominator remainder) nil (quote make-product quote quote quote) (fargn list fargn) nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::denominator-list-p (nil nil nil nil (if) nil nil) (nil nil (atom) (equal and) nil nil nil) ((denominator-list denominator-list nil) nil (denominatorp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((denominator-list denominator-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::normalize-terms-such-as-a/a+b-+-b/a+b-fn-1 (nil nil nil nil (if) nil nil) ((nil) nil (endp) (let) nil nil nil) ((denominator-list (binding-alist (normalize-terms-such-as-a/a+b-+-b/a+b-fn-2 (car denominator-list) addend rest))) nil nil nil (if) nil nil) ((binding-alist binding-alist) nil nil nil (recursive-call) nil nil) ((addend rest) nil (cdr) nil nil nil nil) ((denominator-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::normalize-terms-such-as-a/a+b-+-b/a+b-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq) (normalize-terms-such-as-a/a+b-+-b/a+b-fn-1) nil nil) ((x y) nil (fn-symb quote) nil (find-denominators-with-sums) nil nil) ((x BINARY-* x nil) nil nil (+) nil nil nil) (nil (1) (number-of-addends) nil nil nil nil) ((y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::remainder-bbb (nil nil nil nil (if) nil nil) (nil nil (make-product) (eq let) nil nil nil) (((first (make-product (set-difference-equal (factors (fargn sum 1)) common-factors)))) nil (fn-symb quote) (set-difference-equal) (list) nil nil) ((sum BINARY-+ first common-factors) nil (quote factors) (recursive-call) nil nil nil) ((BINARY-+ common-factors sum) nil nil (fargn) nil nil nil) ((sum) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::common-factors (nil nil nil nil (cond) nil nil) (nil nil ((null factors) (eq (fn-symb sum) (quote BINARY-+)) t) nil nil nil nil) ((nil) nil nil (recursive-call intersection-equal) nil nil nil) ((factors) nil (factors) (intersection-equal fargn) nil nil nil) ((factors sum sum) (2) (factors) nil nil nil nil) (nil nil nil (fargn) nil nil nil) ((sum) (1) nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::normalize-terms-such-as-1/ax+bx-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (and let) nil nil nil) (((common-factors (common-factors (factors (fargn sum 1)) (fargn sum 2)))) nil nil (eq eq) (if) nil nil) ((common-factors nil) nil (fn-symb quote fn-symb quote) (let) nil nil nil) ((sum BINARY-+ BINARY-*) nil ((common (make-product common-factors))) (fargn list) nil nil nil) ((sum) (1) (remainder) (cons cons) nil nil nil) ((common remainder) nil (quote quote) (remainder-bbb) nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-matching-addend (nil nil nil nil (cond) nil nil) (nil nil ((eq (fn-symb x) (quote BINARY-+)) (matching-addend-p to-match x) t) nil nil nil nil) ((nil) nil (list) nil nil (cond) nil) (nil nil ((matching-addend-p to-match (arg1 x)) (eq (fn-symb (arg2 x)) (quote BINARY-+)) (matching-addend-p to-match (arg2 x)) t) (cons) nil nil nil) ((nil x) nil (list list quote) (recursive-call) nil nil nil) ((to-match match) nil (arg2) (cons cons) nil nil nil) ((x) nil (quote arg1 quote arg2) nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-matching-factor-gather-exponents (nil nil nil nil (cond) nil nil) (nil nil ((eq (fn-symb x) (quote BINARY-*)) (matching-factor-gather-exponents-p to-match x) t) nil nil nil nil) ((nil) nil (list) nil nil (cond) nil) (nil nil ((matching-factor-gather-exponents-p to-match (arg1 x)) (eq (fn-symb (arg2 x)) (quote BINARY-*)) (matching-factor-gather-exponents-p to-match (arg2 x)) t) (cons) nil nil nil) ((nil x) nil (list list quote) (recursive-call) nil nil nil) ((to-match match) nil (arg2) (cons cons) nil nil nil) ((x) nil (quote arg1 quote arg2) nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-matching-factor-scatter-exponents (nil nil nil nil (cond) nil nil) (nil nil ((eq (fn-symb x) (quote BINARY-*)) (matching-factor-scatter-exponents-p to-match x) t) nil nil nil nil) ((nil) nil (list) nil nil (cond) nil) (nil nil ((matching-factor-scatter-exponents-p to-match (arg1 x)) (eq (fn-symb (arg2 x)) (quote BINARY-*)) (matching-factor-scatter-exponents-p to-match (arg2 x)) t) (cons) nil nil nil) ((nil x) nil (list list quote) (recursive-call) nil nil nil) ((to-match match) nil (arg2) (cons cons) nil nil nil) ((x) nil (quote arg1 quote arg2) nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::denominator-matches (nil nil nil nil nil (cond) nil) (nil nil ((or (variablep z) (fquotep z)) (eq (ffn-symb z) (quote UNARY-/)) (eq (ffn-symb z) (quote BINARY-*)) t) nil nil nil nil) ((nil nil) nil nil (equal or) nil nil nil) ((denominator) nil nil (fargn recursive-call recursive-call) nil nil nil) ((z denominator denominator) (1) nil (fargn fargn) nil nil nil) ((z z) (1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::binary-star-leaves (nil nil nil (cond) nil nil nil) (nil nil ((eq (fn-symb x) (quote BINARY-*)) t) nil nil nil nil) (nil nil (list) (cons) nil nil nil) ((x) nil (recursive-call) (fargn) nil nil nil) ((x) (1) nil (fargn) nil nil nil) ((x) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::binary-star-tree (nil nil nil nil nil (cond) nil) (nil nil ((null leaves) (null (cdr leaves)) (null (cddr leaves)) t) nil nil nil nil) (nil nil (quote car) nil (list list) nil nil) ((leaves) nil (quote quote car cadr quote car recursive-call) nil nil nil nil) ((BINARY-* leaves leaves BINARY leaves) (1) (cdr) nil nil nil nil) ((leaves) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::bail-out-1 (nil nil nil nil nil (cond) nil) (nil nil ((equal number 1) (or (variablep z) (fquotep z)) (eq (ffn-symb z) (quote BINARY-+)) t) nil nil nil nil) ((nil t) nil nil (or) (if) nil nil) (nil nil (not) (denominator-matches <) (recursive-call recursive-call) nil nil) ((denominator denominator denominator number number) (2) nil (fargn fargn - fargn denominator-matches) nil nil nil) ((z z number z denominator z) (1 2 1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::bail-out-2 (nil nil nil (cond) nil nil nil) (nil nil ((eq (fn-symb denominator) (quote BINARY-+)) t) nil nil nil nil) (nil nil nil (or subsetp-equal) nil nil nil) ((leaves2---leaves1) nil (binary-star-leaves) (recursive-call recursive-call) nil nil nil) ((leaves2---leaves1 leaves2---leaves1 denominator) nil nil (fargn fargn) nil nil nil) ((denominator denominator) (1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::number-of-addends (nil nil nil nil (cond) nil nil) (nil nil ((or (variablep denominator) (fquotep denominator)) (eq (ffn-symb denominator) (quote BINARY-+)) t) nil nil nil nil) (nil (1 1) nil (+) nil nil nil) (nil (1) (recursive-call) nil nil nil nil) (nil nil nil (fargn) nil nil nil) ((denominator) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-rest-of-ratio-helper1 (nil nil nil (cond) nil nil nil) (nil nil ((eq (fn-symb denominator) (quote BINARY-+)) t) nil nil nil nil) (nil nil (list) (cons) nil nil nil) (nil nil nil (union-equal) (recursive-call recursive-call) nil nil) ((leaves1---leaves2 leaves2---leaves1 leaves1---leaves2 leaves2---leaves1 leaves1---leaves2) nil nil (fargn fargn set-difference-equal) nil nil nil) ((denominator denominator leaves2---leaves1) (1 2) (binary-star-leaves) nil nil nil nil) ((denominator) nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-rest-of-ratio-helper (nil nil nil nil (cond) nil nil) (nil nil ((not (eq (fn-symb denominator) (quote BINARY-+))) (bail-out-1 denominator z (number-of-addends denominator)) t) nil nil nil nil) (nil nil nil (mv mv let) nil nil nil) ((nil nil nil nil) nil ((leaves1 (binary-star-leaves numerator))) nil (if) nil nil) (nil nil (leaves2) (intersectp-equal let mv) nil nil nil) ((leaves1 leaves2 nil nil) nil (binary-star-leaves (leaves1---leaves2 (set-difference-equal leaves1 leaves2))) nil (if) nil nil) (nil nil (leaves2---leaves1) (fargn bail-out-2 mv let) nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-rest-of-ratio2 (nil nil nil nil (if) nil nil) ((nil) nil nil (denominator-matches let) nil nil nil) ((denominator z (d (if d (list (quote BINARY-+) z d) z))) nil nil (mv) nil nil nil) ((to-be-found d) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/arithmetic-3/bind-free/normalize.lisp::find-rest-of-ratio1 (nil nil nil nil nil (cond) nil) (nil nil ((null to-be-found) (or (fquotep z) (variablep z)) (eq (ffn-symb z) (quote BINARY-+)) t) nil nil nil nil) ((nil) nil nil (list) (mv-let if) nil nil) ((nil) nil (to-be-found) (cons cons <) (mv-let) (find-rest-of-ratio2) (recursive-call)) ((factor d d to-be-found denominator d to-be-found denominator factor d) (1) (quote quote length to-be-found) (fargn fargn) (if) (find-rest-of-ratio2) nil) ((c d z z to-be-found d to-be-found denominator z d nil) (1 2) (null) (list) nil nil nil) ((to-be-found) nil nil (cons cons) nil nil nil)))