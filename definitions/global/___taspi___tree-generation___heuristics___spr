((/taspi/tree-generation/heuristics/spr.lisp::orderly-spr-helper (nil nil nil nil (if) nil nil) (nil nil nil (equal) (if if) nil nil) ((flg Error: Must start with unrooted tree in orderly-spr-helper) nil (quote consp) nil (and hppend if if) nil nil) ((topnode rest Error: Rest must be binary in orderly-spr-helper Error: Need pieces to match tia in second branch of orderly-spr-helper) nil (consp consp consp consp hist) nil (if and) (orderly-splice orderly-splice orderly-splice) nil) ((rest nil tia nil tia nil tia Error: Need pieces to match tia in orderly-spr-helper) nil (cdr cddr cdr cdr) (hist hist taspip subset member-gen) (and hppend orderly-cons) (recursive-call recursive-call recursive-call) nil) ((rest rest rest piece tia piece tia piece tia rest nil piece tia) nil (quote car car caddr quote cadr car cadr quote caddr hist list mytips get-taxa-from-taxon-index first-taxon get-taxa-from-taxon-index hist) (taspip subset member-gen) nil (orderly-splice orderly-splice) nil) ((not-top rest rest rest not-top rest rest rest not-top rest nil nil tia nil tia rest tia piece tia rest) nil (list mytips get-taxa-from-taxon-index first-taxon get-taxa-from-taxon-index car cadr list) nil (orderly-cons) (recursive-call recursive-call) nil)) (/taspi/tree-generation/heuristics/spr.lisp::go-on?-helper (nil nil nil nil (if) nil nil) (nil nil nil (> mv) (if) nil nil) ((n t n) (2) (consp) (mv) (mv-let) nil nil) ((x nil) (0) (yes1) (recursive-call) (if) nil nil) ((val1 yes1) nil (car 1+) (mv) (mv-let) nil nil) ((x n t val1) nil (yes2) (recursive-call) (if) nil nil) ((val2 yes2) nil (cdr 1+) (mv let) nil nil nil)) (/taspi/tree-generation/heuristics/spr.lisp::go-on? (nil nil nil nil nil (mv-let) nil) ((var) nil (var declare) (go-on?-helper) nil nil nil) ((val x) (0) (ignore) nil nil nil nil) ((val) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/heuristics/spr.lisp::orderly-get-pieces (nil nil nil nil (if) nil nil) (nil nil nil nil (and if) nil (hppend)) (nil nil (consp consp consp consp) (let) (if if if) (recursive-call recursive-call recursive-call) nil) ((x nil tia nil tia nil tia nil nil x ans (newRest (branch-to-node rest tia))) nil (cdr cddr car cdr cadr caddr go-on? go-on?) (hons hist let let or) (hppend if) nil nil) ((x x x x x x (newRest (branch-to-node (caddr x) tia)) (newRest (branch-to-node (cadr x) tia)) Error: Need good newRest in last branch of orderly-get-pieces) nil (car cddr car cadr caddr cadr atom atom) (and hons) (if if if if if) nil nil) ((x x x x x Error: Need good newRest in orderly-get-pieces x Error: Need good newRest in second branch of orderly-get-pieces rest ans nil Error: need binary trees in get-pieces ans) nil (cdr go-on? consp) (and hons and hons and let let taspip subset hons) (if) nil nil) ((nil nil rest (newRest (branch-to-node rest tia)) x (newRest (branch-to-node x tia)) Error: Need properties for orderly-cons in orderly-get-pieces t newRest x) nil (atom atom cdr mytips get-taxa-from-taxon-index) (taspip subset hons taspip subset hons hppend order-by-insertion-one-level) (if if) (and) nil)) (/taspi/tree-generation/heuristics/spr.lisp::mv-root-and-remove-dups (nil nil nil nil (if) nil nil) ((hash) nil (consp) (let) nil nil nil) ((list (normed (mv-root (car list) tia))) nil nil nil (if) nil nil) (nil nil nil (het) (recursive-call recursive-call) nil nil) ((normed hash tia hash tia) nil (cdr cdr) nil (hut) nil nil) ((list list normed t hash) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/heuristics/spr.lisp::orderly-do-spr (nil nil nil nil (if) nil nil) (nil nil (consp strip-cars-gen) (let) nil nil nil) ((pieces (newHash (mv-root-and-remove-dups (orderly-spr-helper (quote topnode) (caar pieces) (cdar pieces) tia) tia hash)) hash) nil nil nil (if) nil nil) ((Error: Need good hash table returned in orderly-do-spr) nil (alistp-gen) nil (recursive-call) nil nil) ((newHash tia newHash) nil (cdr) nil nil nil nil) ((pieces) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/heuristics/spr.lisp::orderly-spr (nil nil nil nil (if) nil nil) ((Error: Need unrooted tree in orderly-spr) nil nil nil (if) (and) nil) ((x) nil (consp consp consp atom) (let) (and) nil nil) ((x (pieces (orderly-get-pieces x nil nil tia))) nil (cdr cddr cdddr atom atom atom) nil (if) nil nil) ((x x x Error: Need good pieces from orderly-get-pieces in orderly-spr) nil (car cadr caddr alistp-gen) nil (orderly-do-spr) nil nil) ((x x x pieces tia nil) nil nil nil nil (orderly-get-pieces) nil) ((x nil nil tia) nil nil nil nil nil nil)))