((/bdd/alu.lisp::p-cell (nil nil nil nil (b-nand3) nil nil) (nil nil nil (b-nand b-nand b-nand) nil nil nil) ((a pa an pan b pb) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::g-cell (nil nil nil nil (b-and3) nil nil) (nil nil nil (b-nand b-nand b-nand) nil nil nil) ((a ga an gan bn gbn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::alu-cell (nil nil nil (let) nil nil nil) (nil nil nil (let) nil nil nil) (nil nil (gan ga pb pan pa m (an (b-not a))) (let) nil nil nil) (nil nil (cadr caddr cadddr caddddr cadddddr caddddddr bn) ((p (p-cell a an b pa pan pb)) let) nil nil nil) ((mpg mpg mpg mpg mpg mpg (z (b-equv3 mc p g))) nil (b-not g mc) nil (list) nil nil) ((b p g z) nil nil (b-nand) nil nil nil) ((a an bn ga gan gbn c m) nil nil nil nil nil nil)) (/bdd/alu.lisp::tv-alu-help (nil nil nil nil (if) nil nil) (nil nil (nlistp) (let) nil (alu-cell) nil) ((tree c mpg) nil (car car) (let) ((a-car (tfirstn a tree))) nil nil) ((a b (lhs (tv-alu-help c a-car b-car mpg (car tree)))) nil (b-car a-cdr b-cdr) (let) nil nil nil) (nil nil nil (tfirstn trestn trestn (p-car (car lhs)) let) nil nil nil) ((b tree a tree b tree (c-car (t-carry c p-car g-car))) nil (g-car sum-car) (let) nil nil nil) (((rhs (tv-alu-help c-car a-cdr b-cdr mpg (cdr tree)))) nil (cadr cddr) (let) nil nil nil)) (/bdd/alu.lisp::shift-or-buf-cntl (nil nil nil (let) nil nil nil) (nil nil nil ((op0- (b-not op0)) let) nil nil nil) (nil nil (op1- op2- (decode-ror (b-and op0- op1-))) (let) nil nil nil) (nil nil (b-not b-not decode-asr (ror-si (b-and decode-ror c))) (let) nil nil nil) ((op1 op2 op0) nil (asr-si) ((si (b-or asr-si ror-si)) list) nil nil nil) ((si) nil (t1 t2) (b-and) (b-or3) nil nil) ((decode-asr an t2 t1 zero) nil nil (b-nand b-and) nil nil nil)) (/bdd/alu.lisp::shift-or-buf (nil nil nil (let) nil nil nil) (nil nil ((pass (car (shift-or-buf-cntl c an zero op0 op1 op2 op3)))) nil (v-if) nil nil) ((pass a) nil (si) (v-shift-right) nil nil nil) ((a si) nil (cadr) nil nil nil nil) (nil nil nil nil nil nil nil) ((c an zero op0 op1 op2 op3) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::carry-out-help (nil nil nil (let) nil nil nil) (nil nil nil (let) nil nil ((result- (b-not result)))) (nil nil (zero- op0- op1- op2- op3-) (b-and) ((op0 (b-not op0-))) nil nil) ((zero-) nil (b-not b-not b-not b-not b-not op1 op2 op3) nil (b-nand3) nil nil) ((zero op0 op1 op2 op3) nil (b-not b-not b-not) nil (b-nand3) (b-nand4 b-nand4) nil) ((op1- op2- op3- op3- op2- result op3- op2 result- op3 op2- a0) nil nil (b-nand b-nand) nil nil nil) ((op0- op1- op0 op1) nil nil nil nil nil nil)) (/bdd/alu.lisp::overflow-help (nil nil nil (let) nil nil nil) (nil nil nil (let) nil ((an- (b-not an))) nil) (nil nil (zero- op1- op2- op3- (an (b-not an-))) nil (b-if) nil nil) ((rn) nil (b-not b-not b-not b-not op2) (b-nor b-nor) nil nil nil) ((zero op1 op2 op3) nil (b-not b-not) (b-nand b-nand) (b-nand3) nil nil) ((op2- zero- zero-) nil nil (b-nor b-nand b-nand b-nor) (b-nand3 b-nand3) nil nil) ((op2 an- op0 op1- an op2- an) nil nil (b-nand b-nand b-nand b-nand) (b-nand3 b-nand3 b-nand3) nil nil)) (/bdd/alu.lisp::core-alu (nil nil nil (let) nil nil nil) (nil nil nil (let) ((op0 (car op))) nil nil) (((last-bit (sub1 (len a)))) nil (op1 op2 op3) (let) nil nil nil) (((alu-help (tv-alu-help c a b mpg tree))) nil (cadr caddr cadddr) (let) nil nil nil) ((op op op) nil nil ((alu-p (car alu-help)) let) nil nil nil) (nil nil (alu-g alu-sum (alu-carry (t-carry c alu-p alu-g))) (cons) nil nil nil) (nil nil (cadr cddr out) (cons) nil nil nil)) (/bdd/alu.lisp::cvzbv (nil nil nil (cons) nil nil nil) ((carry) nil nil (cons) nil nil nil) ((overflow) nil nil (cons) nil nil nil) ((vector) nil (v-zerop) nil nil nil nil) ((vector) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-adder (nil nil nil nil (if) nil nil) (nil nil (nlistp) (cons cons) nil nil nil) ((a nil) nil (boolfix) nil (b-xor3 recursive-call) nil nil) ((c c) nil (car car cdr cdr) (b-or) nil nil nil) ((a b a b) nil nil (b-and b-or) nil nil nil) (nil nil (car car) (b-and b-and) nil nil nil) ((a b c c) nil (car car) nil nil nil nil)) (/bdd/alu.lisp::v-adder-carry-out (nil nil nil (nth) nil nil nil) (nil nil (len) nil (v-adder) nil nil) ((a c a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-adder-output (nil nil nil (firstn) nil nil nil) (nil nil (len) nil (v-adder) nil nil) ((a c a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-adder-overflowp (nil nil nil (b-and) nil nil nil) (nil nil nil (b-equv b-xor) nil nil nil) (nil nil nil (nth nth nth nth) nil nil nil) ((a b a) nil (sub1 sub1 sub1 sub1) nil (v-adder-output) nil nil) ((c a b) nil (len len len len) nil nil nil nil) ((a b a a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-v-adder (nil nil nil nil (cvzbv) nil nil) (nil nil nil nil (v-adder-carry-out v-adder-overflowp v-adder-output) nil nil) ((c a b c a b c a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-inc (nil nil nil nil (cvzbv-v-adder) nil nil) ((t a) nil nil (nat-to-v) nil nil nil) (nil (0) (len) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-subtracter-carry-out (nil nil (b-not) nil nil nil nil) (nil nil nil nil (v-adder-carry-out) nil nil) ((b) nil (b-not v-not) nil nil nil nil) ((c a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-subtracter-overflowp (nil nil nil nil (v-adder-overflowp) nil nil) ((b) nil (b-not v-not) nil nil nil nil) ((c a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-subtracter-output (nil nil nil nil (v-adder-output) nil nil) ((b) nil (b-not v-not) nil nil nil nil) ((c a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-v-subtracter (nil nil nil nil (cvzbv) nil nil) (nil nil nil nil (v-subtracter-carry-out v-subtracter-overflowp v-subtracter-output) nil nil) ((c a b c a b c a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-neg (nil nil nil nil (cvzbv-v-subtracter) nil nil) ((nil a) nil nil (nat-to-v) nil nil nil) (nil (0) (len) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-dec (nil nil nil nil (cvzbv-v-subtracter) nil nil) ((t a) nil nil (nat-to-v) nil nil nil) (nil (0) (len) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-ror (nil nil nil (v-shift-right) nil nil nil) ((a si) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-v-ror (nil nil nil nil (cvzbv) nil nil) ((nil) nil nil (v-ror) (if) nil nil) ((c a c) nil (nlistp) (nth) nil nil nil) ((a a) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-asr (nil nil nil (v-shift-right) nil nil nil) ((a) nil nil (nth) nil nil nil) ((a) nil (sub1) nil nil nil nil) (nil nil (len) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-v-asr (nil nil nil nil (cvzbv) nil nil) ((nil) nil (v-asr) nil (if) nil nil) ((nil a) nil (listp) (nth) nil nil nil) ((a a) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-lsr (nil nil nil (v-shift-right) nil nil nil) ((a nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-v-lsr (nil nil nil nil (cvzbv) nil nil) ((nil) nil (v-lsr) nil (if) nil nil) ((nil a) nil (listp) (nth) nil nil nil) ((a a) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::cvzbv-v-not (nil nil nil nil (cvzbv) nil nil) ((nil nil) nil (v-not) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::v-alu (nil nil nil nil nil nil nil) (nil nil ((equal op (quote (nil nil nil nil))) (equal op (quote (t nil nil nil))) (equal op (quote (nil t nil nil))) (equal op (quote (t t nil nil))) (equal op (quote (nil nil t nil))) (equal op (quote (t nil t nil))) (equal op (quote (nil t t nil))) (equal op (quote (t t t nil))) (equal op (quote (nil nil nil t))) (equal op (quote (t nil nil t))) (equal op (quote (nil t nil t))) (equal op (quote (t t nil t))) (equal op (quote (nil nil t t))) (equal op (quote (t nil t t))) (equal op (quote (nil t t t))) t) nil nil nil nil) (nil nil (cvzbv-inc cvzbv-neg cvzbv-dec cvzbv-v-asr cvzbv-v-lsr cvzbv-v-not) (cvzbv-v-ror) (cvzbv cvzbv-v-adder cvzbv-v-adder cvzbv-v-subtracter cvzbv-v-subtracter cvzbv cvzbv cvzbv cvzbv) nil nil) ((nil nil a c a b nil a b a a c a b nil a b c a a a nil nil nil nil nil nil a nil nil) nil (v-buf v-buf) (v-xor v-or v-and) nil nil nil) ((a a b a b a b a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::carry-in-help (nil nil nil nil (let) nil nil) (nil nil (declare) (let) nil nil ((c (car czop)))) (nil nil (z op0 op1 op2 op3 ignore) (let) nil ((c- (b-not c))) nil) ((z) nil (cadr caddr cadddr caddddr cadddddr op0- op1- op2- op3-) (b-or) nil ((c (b-not c-))) nil) ((czop czop czop czop czop) nil (b-not b-not b-not b-not op0 op1 op2 op3) nil (b-nand3 b-nand3) nil nil) ((op0 op1 op2 op3) nil (b-not b-not b-not b-not) (b-nand) (b-nand3 b-nand3 b-nand3 b-nand3 b-nand3) nil nil) ((op0- op1- op2- op3- op1- op2- op3- op0- op1- op2 op0 op1 op2 op3 c op0- op2- c op0- op2 c-) nil nil nil nil nil nil)) (/bdd/alu.lisp::decode-gen (nil nil nil (let) nil nil nil) (nil nil nil nil (let) nil ((zero- (b-not zero)))) (nil nil (swap- op0- op1- op2- op3- declare) nil (list) nil ((zero (b-not zero-)))) (nil nil (b-not b-not b-not b-not b-not swap op0 op1 op2 op3 ignore) (b-nor b-nor) (b-nand3) nil nil) ((swap op0 op1 op2 op3 swap zero zero) nil (b-not b-not b-not b-not b-not) (b-nand) (b-nand3 b-nand3 b-nand3 b-nand3) nil nil) ((swap- op0- op1- op2- op3- op0 op3 op2 op3- op1 op2- op3-) nil nil (b-xor b-nand) (b-nand3 b-nand3 b-nand3 b-nand3) (b-nand4) nil) ((op1 op2 op1- swap- op0 op1 op2- op3 op2 op3- op0 op3 op0 op1- op2 op1 op2- op3-) nil nil (b-nand b-xor) nil nil nil)) (/bdd/alu.lisp::decode-prop (nil nil nil (let) nil nil nil) (nil nil nil nil (let) nil ((zero- (b-not zero)))) (nil nil (swap- op0- op1- op2- op3- declare) nil (list) nil ((zerop (b-not zero-)))) (nil nil (b-not b-not b-not b-not b-not swap op0 op1 op2 op3 ignore) (b-nor b-and) (b-nand3) nil nil) ((swap op0 op1 op2 op3 zerop op2- zero-) nil (b-not b-not b-not b-not b-not) (b-nand b-nor) (b-nand3 b-nand3) (b-nand4) nil) ((swap- op0- op1- op2- op3- op0- op1- op2 op3 op1 op3- op2- op3- swap op3-) nil nil (b-nor b-nand b-nand) nil (b-nand4) nil) ((op0 op1- op3 op2- op0 op1- op2 op3-) nil nil (b-equv b-nand) nil nil nil)) (/bdd/alu.lisp::decode-mode (nil nil nil (b-nor) nil nil nil) ((op3) nil nil nil (b-nor3) nil nil) ((op0 op1 op2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/bdd/alu.lisp::mpg (nil nil nil (let) nil nil nil) (nil nil nil (append) nil nil ((zero (car zsop)))) (nil nil (swap op0 op1 op2 op3) (append) nil nil nil) ((zero swap op0 op1 op2 op3) nil (cadr caddr cadddr caddddr cadddddr list) nil nil nil nil) ((zsop zsop zsop zsop zsop zero swap op0 op1 op2 op3) nil nil nil nil (decode-mode) nil) ((op0 op1 op2 op3) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))