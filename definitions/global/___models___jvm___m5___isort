((/models/jvm/m5/isort.lisp::cons-sched (nil nil nil (repeat) nil nil nil) ((th) (17) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::hcar (nil nil nil nil (field-value) nil nil) ((Cons car) nil nil (deref) nil nil nil) ((ref heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::hcdr (nil nil nil nil (field-value) nil nil) ((Cons cdr) nil nil (deref) nil nil nil) ((ref heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/models/jvm/m5/isort.lisp::ref-to-cons-obj (nil nil nil (list) nil nil nil) (nil nil (quote len) nil nil nil nil) ((REF heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::== (nil nil nil (equal) nil nil nil) (nil nil (cadr cadr) nil nil nil nil) ((addr1 addr2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::all-smallp (nil nil nil (cond) nil nil nil) (nil nil ((endp heap) t) nil nil nil nil) ((t) nil nil nil nil (and) nil) (nil nil (integerp) (<= < recursive-call) nil nil nil) ((max max) (0) (caar caar caar cdr) nil nil nil nil) ((heap heap heap heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::all-bound? (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (bound? recursive-call) nil nil nil) ((heap heap) nil nil (- -) nil nil nil) ((n n) (1 1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::refp (nil nil nil nil nil nil (and)) (nil nil (consp consp integerp) (equal equal) nil nil nil) ((x nil) nil (car quote cdr cadr cddr) nil nil nil nil) ((x ref x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::all-refs-smallp (nil nil nil nil (cond) nil nil) (nil nil ((endp heap) (not (bound? Cons (cdar heap))) t) nil nil nil nil) ((t) nil (recursive-call) (let) nil nil nil) (((d (field-value Cons cdr (cdar heap)))) nil (cdr) (and) nil nil nil) ((heap) nil (recursive-call) (or) nil nil nil) (nil nil (nullrefp cdr) nil (and) nil nil) ((d heap) nil (refp) (<= <) nil nil nil)) (/models/jvm/m5/isort.lisp::ok-refp (nil nil nil (or) nil nil nil) (nil nil (nullrefp) nil nil (and) nil) ((x) nil (refp) (<= < bound?) nil nil nil) ((x Cons) (0) (cadr cadr len) (deref) nil nil nil) ((x x heap x heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::cdr-type-correctnessp (nil nil nil nil (cond) nil nil) (nil nil ((endp alist) (bound? Cons (cdar alist)) t) nil nil nil nil) ((t) nil nil (and recursive-call) nil nil nil) ((heap) nil (cdr) (ok-refp recursive-call) nil nil nil) ((heap heap alist) nil (cdr) nil (field-value) nil nil) ((Cons cdr alist) nil (cdar) nil nil nil nil) ((alist) nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::heap-extensionp (nil nil nil nil (cond) nil nil) (nil nil ((endp heap1) (endp heap2) t) nil nil nil nil) ((t nil) nil nil (and) nil nil nil) (nil nil nil (equal recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((heap1 heap2 heap1 heap2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::heap-invariantp (nil nil nil nil nil nil (and)) (nil nil (alistp all-refs-smallp) (all-smallp all-bound? cdr-type-correctnessp) nil nil nil) ((heap heap heap heap heap heap) nil (len len) nil nil nil nil) ((heap heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::ref-measure (nil nil nil (cond) nil nil nil) (nil nil ((nullrefp x) t) nil nil nil nil) (nil (0) nil (+) nil nil nil) (nil (1) (acl2-count) nil nil nil nil) (nil nil (cadr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::insert-sched (nil nil nil nil nil (cond) nil) (nil nil ((nullrefp xref) (not (and (heap-invariantp heap) (ok-refp xref heap))) (< (hcar xref heap) e) t) nil nil nil nil) ((nil) nil nil nil (append append) (append) nil) (nil nil (cons-sched cons-sched cons-sched) (repeat repeat repeat repeat repeat repeat) nil (recursive-call) nil) ((th th th th th e heap th th th th th) (5 1 12 1 9 1) nil (hcdr) nil nil nil) ((xref heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::insert-heap (nil nil nil nil nil (cond) nil) (nil nil ((nullrefp xref) (not (and (heap-invariantp heap) (ok-refp xref heap))) (< (hcar xref heap) e) t) nil nil nil nil) ((heap) nil nil (let) (cons-heap cons-heap) nil nil) ((e xref heap (new-heap (insert-heap e (hcdr xref heap) heap)) e xref heap) nil nil nil (cons-heap) nil nil) ((new-heap) nil nil (hcar list) nil nil nil) ((xref heap) nil (quote) (-) nil nil nil) ((ref) (1) (len) nil nil nil nil)) (/models/jvm/m5/isort.lisp::ref-to-insert-obj (nil nil nil (list) nil nil nil) (nil nil (quote) (-) nil nil nil) ((REF) (1) (len) nil nil nil nil) (nil nil nil nil (insert-heap) nil nil) ((e x heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::isort-heap (nil nil nil nil (cond) nil nil) (nil nil ((nullrefp xref) (not (and (heap-invariantp heap) (ok-refp xref heap))) t) nil nil nil nil) ((heap heap) nil nil nil (insert-heap) nil nil) (nil nil nil (hcar recursive-call) (if) nil nil) ((xref heap heap) nil (nullrefp quote) (list hcdr) nil nil nil) ((xref heap) nil (ref quote) (hcdr -) nil nil nil) ((xref heap ref) (-1 1) (len) nil nil nil nil)) (/models/jvm/m5/isort.lisp::ref-to-isort-obj (nil nil nil nil (if) nil nil) ((xref) nil (nullrefp) (list) nil nil nil) ((xref) nil (quote) (-) nil nil nil) ((REF) (1) (len) nil nil nil nil) (nil nil nil (isort-heap) nil nil nil) ((xref heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::isort-sched (nil nil nil nil (cond) nil nil) (nil nil ((nullrefp xref) (not (and (heap-invariantp heap) (ok-refp xref heap))) t) nil nil nil nil) ((nil) nil nil (repeat) nil (append) nil) ((th) (5) nil (repeat repeat) (recursive-call) (insert-sched) nil) ((th th heap th th) (7 1) nil (hcdr hcar isort-heap) (if) nil nil) ((xref heap xref heap heap) nil (nullrefp quote) (list hcdr) nil nil nil) ((xref heap) nil (ref quote) (hcdr -) nil nil nil)) (/models/jvm/m5/isort.lisp::deref* (nil nil nil nil (cond) nil nil) (nil nil ((nullrefp xref) (not (and (heap-invariantp heap) (ok-refp xref heap))) t) nil nil nil nil) ((nil nil) nil nil (cons) nil nil nil) (nil nil nil (hcar recursive-call) nil nil nil) ((xref heap heap) nil nil (hcdr) nil nil nil) ((xref heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::standard-hyps (nil nil nil nil nil nil (and)) (nil nil (heap-invariantp) (equal equal equal equal) nil nil nil) ((*Object-class* *Cons-class* *ListProc-class*) nil (quote heap) (status assoc-equal assoc-equal assoc-equal) nil nil nil) ((th s SCHEDULED java.lang.Object Cons ListProc s) nil (class-table class-table class-table) nil nil nil nil) ((s s s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::poised-to-invoke-cons (nil nil nil (and) nil nil nil) (nil nil nil (standard-hyps equal) nil nil nil) ((th s) nil (quote) (next-inst) nil nil nil) ((th s) nil nil nil (INVOKESTATIC) nil nil) ((Cons cons) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::insert-heap-hint (nil nil nil nil nil (cond) nil) (nil nil ((nullrefp x) (not (and (heap-invariantp (heap s)) (ok-refp x (heap s)))) (< (hcar x (heap s)) e) t) nil nil nil nil) (nil nil nil nil nil (list list recursive-call list) nil) ((th s e x th s e x th e th s e x) nil nil (hcdr) (make-state) nil nil) ((x) nil (heap class-table heap) nil (bind) nil nil) ((th s s s) nil (thread-table) nil (make-thread) nil nil) ((s) nil (quote) (push rref) nil nil nil)) (/models/jvm/m5/isort.lisp::poised-to-invoke-insert (nil nil nil nil nil nil nil) (nil nil nil (standard-hyps equal equal equal equal ok-refp) nil nil nil) ((th s heap e x x) nil (heap quote top top heap) (next-inst) nil nil nil) ((s th s s) nil (pop stack) nil (INVOKESTATIC) nil nil) ((ListProc insert) (2) (stack) (top-frame) nil nil nil) ((th s) nil nil (top-frame) nil nil nil) ((th s) nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::ref-to-insert-obj (nil nil nil (list) nil nil nil) (nil nil (quote) (-) nil nil nil) ((REF) (1) (len) nil nil nil nil) (nil nil nil nil (insert-heap) nil nil) ((e x heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::insert (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (<= e (car x)) t) nil nil nil nil) (nil nil nil (cons cons cons) nil nil nil) ((e x e x) nil (car) (recursive-call) nil nil nil) ((x e) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::isort-heap-hint (nil nil nil nil (cond) nil nil) (nil nil ((nullrefp x) (not (and (heap-invariantp (heap s)) (ok-refp x (heap s)))) t) nil nil nil nil) (nil nil nil nil (list list recursive-call) nil nil) ((th s x th s x th) nil nil (hcdr) (make-state) nil nil) ((x) nil (heap class-table heap) nil (bind) nil nil) ((th s s s) nil (thread-table) nil (make-thread) nil nil) ((s) nil (quote) (push rref) nil nil nil)) (/models/jvm/m5/isort.lisp::poised-to-invoke-isort (nil nil nil nil nil nil (and)) (nil nil nil (standard-hyps equal equal equal ok-refp) nil nil nil) ((th s heap x x) nil (heap quote top heap) (next-inst) nil nil nil) ((s th s s) nil (stack) nil (INVOKESTATIC) nil nil) ((ListProc isort) (1) nil (top-frame) nil nil nil) ((th s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::isort (nil nil nil nil (if) nil nil) ((nil) nil (endp) (insert) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::ordered (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (endp (cdr x)) t) nil nil nil nil) ((t t) nil nil (and) nil nil nil) (nil nil (recursive-call) (<=) nil nil nil) (nil nil (car car cdr) nil nil nil nil) ((x x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/models/jvm/m5/isort.lisp::perm (nil nil nil (acl2::perm) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))