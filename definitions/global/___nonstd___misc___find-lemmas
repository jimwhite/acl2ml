((/nonstd/misc/find-lemmas.lisp::deref-macro-name-list (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((fns) nil nil (deref-macro-name recursive-call) nil nil nil) ((macro-aliases macro-aliases) nil (car cdr) nil nil nil nil) ((fns fns) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/find-lemmas.lisp::find-lemmas-fn (nil nil nil (let) nil nil nil) (((fns (deref-macro-name-list fns (macro-aliases wrld)))) nil nil nil (if) nil nil) ((acc) nil nil (or let*) nil nil nil) (nil nil (endp) (and) (if) ((trip (car wrld-tail))) nil) ((wrld-tail omit-boot-strap) nil (ev-tuple type namex formula) (and) (and) nil (recursive-call recursive-call)) ((formula fns omit-boot-strap wrld fns omit-boot-strap acc wrld) nil (cdr cdr) (eq eq equal and and subsetp-eq cons) nil (and and) nil) ((ev-tuple type namex fns acc wrld-tail wrld-tail) nil (caar quote cadar quote access-command-tuple-form quote consp cddr access-event-tuple-type access-event-tuple-namex symbolp all-fnnames access-event-tuple-form) (eq eq member-eq) (formula) nil nil)))