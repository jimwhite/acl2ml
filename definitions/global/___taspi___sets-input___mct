((/taspi/sets-input/mct.lisp::get-all-fringes (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((trees) nil (quote) (app) nil (and) nil) ((bad-input-to-get-all-fringes) nil (treep consp int-symlist) (<= term-to-bfringes recursive-call) nil nil nil) ((taxa-list taxa-list taxa-list) (2) (car car len car cdr) nil nil nil nil) ((trees trees taxa-list trees trees) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mct.lisp::project-each (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((trees) nil nil (recursive-call) (project) nil nil) ((t taxa-list taxa-list) nil (car cdr) nil nil nil nil) ((trees trees) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mct.lisp::project-each-check-compat (nil nil nil (let) nil nil nil) (((new-trees (project-each list-of-trees taxa-list))) nil nil nil (if) nil nil) ((t nil) nil (q-no-conflicts-list-gen) nil nil nil nil) (nil nil nil (get-all-fringes) nil nil nil) ((new-trees taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mct.lisp::build-tree-taxa-list-trees-to-project (nil nil nil (let*) nil nil nil) (nil nil nil ((new-trees (project-each trees taxa-list)) build-term-top-guard-t) nil nil nil) ((no-dup-fringes taxa-list) nil (fringes no-dup-fringes) nil nil nil nil) (nil nil (remove-dups) (get-all-fringes) nil nil nil) ((new-trees taxa-list fringes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mct.lisp::find-mct (nil nil nil nil (if) nil nil) ((nil) nil nil (and) (if) nil nil) (nil nil (consp consp) (project-each-check-compat build-tree-taxa-list-trees-to-project recursive-call) nil nil nil) ((list-of-taxa-lists list-of-trees list-of-trees list-of-trees list-of-trees) nil (car car cdr) nil nil nil nil) ((list-of-taxa-lists list-of-taxa-lists list-of-taxa-lists) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mct.lisp::mct (nil nil nil (find-mct) nil nil nil) ((list-of-trees) nil (possible-taxa-lists) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/mct.lisp::mct-brlens (nil nil nil (let) nil nil nil) (((trees-no-brlens (remove-brlens-list list-of-trees))) nil nil (find-mct) nil nil nil) ((trees-no-brlens) nil (possible-taxa-lists) nil nil nil nil) ((taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))