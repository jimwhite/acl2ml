((/coi/lists/basic.lisp::len-len-induction (nil nil nil nil (if) nil nil) ((nil) nil nil (and recursive-call) nil nil nil) (nil nil (consp consp cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/basic.lisp::list::list-fix (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil (list::fix recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/basic.lisp::list::list-equiv (nil nil nil (equal) nil nil nil) (nil nil (list::list-fix list::list-fix) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/basic.lisp::binary-appendx (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (append) (if) nil nil) ((x y y) nil (consp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/lists/basic.lisp::locations (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((args) nil nil (equal cons) (recursive-call) nil nil) ((key key) nil (car nfix 1+ cdr) nil (recursive-call) nil nil) ((args n key n args) nil (1+ cdr) nil nil nil nil) ((n args) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))