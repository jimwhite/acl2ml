((/deduction/passmore/general.lisp::varp (nil nil (not) nil nil nil nil) (nil nil (consp) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::remove-elements (nil nil nil nil (cond) nil nil) (nil nil ((endp lst) (member-equal (car lst) elements) t) nil nil nil nil) ((nil) nil nil (recursive-call cons) nil nil nil) ((elements) nil (cdr car) (recursive-call) nil nil nil) ((lst lst elements) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::remove-elements-once-each (nil nil nil nil (cond) nil nil) (nil nil ((endp lst) (member-equal (car lst) elements) t) nil nil nil nil) ((nil) nil nil (recursive-call cons) nil nil nil) (nil nil (cdr car) (remove-elements recursive-call) nil nil nil) ((lst elements lst elements) nil (list cdr) nil nil nil nil) ((lst) nil (car) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::all-symbols* (nil nil nil nil (cond) nil nil) (nil nil ((equal lst nil) (symbolp lst) (consp lst)) nil nil nil nil) ((nil) nil (list) (append) nil nil nil) ((lst) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::get-setting (nil nil nil nil (cond) nil nil) (nil nil ((endp prover-settings) (equal (caar prover-settings) select) t) nil nil nil nil) ((nil) nil (cadar) (recursive-call) nil nil nil) ((prover-settings select) nil (cdr) nil nil nil nil) ((prover-settings) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::extract-clause (nil nil (caddr) nil nil nil nil) ((proof-move) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::clause-move-member (nil nil nil (cond) nil nil nil) (nil nil ((endp moves) t) nil nil nil nil) ((nil) nil nil (or) nil nil nil) (nil nil nil (equal recursive-call) nil nil nil) ((clause clause) nil (extract-clause cdr) nil nil nil nil) ((moves) nil (car) nil nil nil nil) ((moves) nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::filter-duplicates (nil nil nil nil (cond) nil nil) (nil nil ((endp new-moves) (or (clause-move-member (extract-clause (car new-moves)) sos-moves) (clause-move-member (extract-clause (car new-moves)) usable-moves)) t) nil nil nil nil) ((nil) nil nil (cons) (recursive-call) nil nil) ((sos-moves usable-moves) nil (cdr car) nil (recursive-call) nil nil) ((new-moves new-moves sos-moves usable-moves) nil (cdr) nil nil nil nil) ((new-moves) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::quad-filter-internal-dups (nil nil nil nil (cond) nil nil) (nil nil ((endp moves) (clause-move-member (extract-clause (car moves)) (cdr moves)) t) nil nil nil nil) ((nil) nil (recursive-call) (cons) nil nil nil) (nil nil (cdr car recursive-call) nil nil nil nil) ((moves moves) nil (cdr) nil nil nil nil) ((moves) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::ctr-cons (nil nil nil (cond) nil nil nil) (nil nil ((clause-move-member (extract-clause (car a)) b) t) nil nil nil nil) ((b) nil nil (cons) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::ctr-cons (nil nil nil (cons) nil nil nil) ((b) nil nil nil (filter-duplicates) nil nil) ((a b nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::ctr-append (nil nil nil (cond) nil nil nil) (nil nil ((clause-move-member (extract-clause (car a)) b) t) nil nil nil nil) ((b) nil nil (append) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/general.lisp::collect-all-terms (nil nil nil nil (cond) nil nil) (nil nil ((endp lit) (equal (car lit) (quote not)) t) nil nil nil nil) ((nil) nil (recursive-call cdr) nil nil nil nil) ((lit) nil (cadr) nil nil nil nil) ((lit) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))