((/coi/nary/nth-rules.lisp::lastatom (nil nil nil nil (if) nil nil) ((x) nil (consp recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::nfix-equiv (nil nil nil (equal) nil nil nil) (nil nil (nfix nfix) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::nmx-induction (nil nil nil nil (if) nil nil) ((x) nil (zp) nil (if) nil nil) ((n n) nil (zp) nil (recursive-call) nil nil) ((m) nil (1- 1- cdr) nil nil nil nil) ((n m x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::equal-nth-conclusion (nil nil nil nil nil (and) nil) (nil nil nil (equal equal equal equal) nil nil nil) (nil nil (lastatom lastatom len len) (nth nth clr-nth clr-nth) nil nil nil) ((x y x y a x a y a x a y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::equal-nth-conclusion-fn (nil nil nil nil (if) nil nil) (nil nil (zp) nil (if if) nil nil) ((n) nil nil (and and equal and and equal) nil nil nil) ((x y x y) nil (consp consp consp consp) (equal equal equal) (recursive-call) nil nil) ((x y x y) nil (car car cdr cdr car car 1- cdr cdr) nil nil nil nil) ((x y x y x y n x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::nil-list (nil nil nil nil (if) nil nil) (nil nil (zp list) (cons) nil nil nil) ((n v nil) nil nil (recursive-call) nil nil nil) ((v) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::equal-append-append-case (nil nil nil nil (and) nil nil) (nil nil nil (list::equiv list::equiv equal) nil nil nil) ((x b) nil nil (firstn firstn nthcdr nthcdr) nil nil nil) ((a y a y) nil (len len) (- -) nil nil nil) ((x x) nil (len len len len) nil nil nil nil) ((a x a x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::nfix-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil (nfix recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::nfix-list-equiv (nil nil nil (equal) nil nil nil) (nil nil (nfix-list nfix-list) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::nth* (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil nil (nth recursive-call) nil nil nil) ((st st) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::clr-nth* (nil nil nil nil (if) nil nil) ((st) nil (consp) (clr-nth) nil nil nil) ((list) nil (car) (recursive-call) nil nil nil) ((list st) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::equal-nth*-conclusion (nil nil nil nil nil (and) nil) (nil nil nil (equal equal equal) (nth*-equiv) nil nil) ((list x y) nil (lastatom lastatom len len) (clr-nth* clr-nth*) nil nil nil) ((x y x y list x list y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::equal-nth*-induction (nil nil nil nil (if) nil nil) (nil nil (consp) (list) (recursive-call) nil nil) ((list x y) nil (cdr) (clr-nth clr-nth) nil nil nil) ((list x y) nil (car car) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::copy-nth* (nil nil nil nil (if) nil nil) ((st2) nil (consp) nil (update-nth) nil nil) ((list) nil (car) (nth) (recursive-call) nil nil) ((list st1 st1 st2) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::use (nil nil nil nil (copy-nth*) nil nil) ((list st nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/nary/nth-rules.lisp::subset (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil nil (member recursive-call) nil nil nil) ((y y) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))