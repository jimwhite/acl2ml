((/coi/osets/sort.lisp::in-list (nil nil nil nil (if) nil nil) ((nil) nil (endp) (or) nil nil nil) ((x) nil nil (equal recursive-call) nil nil nil) ((a a) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/osets/sort.lisp::split-list (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (endp (cdr x)) t) nil nil nil nil) (nil nil nil (mv mv) (mv-let) nil nil) ((nil nil nil) nil (list part1 recursive-call) (mv) nil nil nil) ((part2) nil (car cddr) (cons cons) nil nil nil) ((x x part1 part2) nil (car cadr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/coi/osets/sort.lisp::mergesort-exec (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (endp (cdr x)) t) nil nil nil nil) ((nil) nil nil (insert) (mv-let) nil nil) ((nil) nil (car part1 split-list) (union) nil nil nil) ((x part2 x) nil (recursive-call recursive-call) nil nil nil nil) ((part1 part2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/osets/sort.lisp::mergesort (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil (mergesort-exec) nil (if) nil nil) ((nil x) nil (endp) (insert) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))