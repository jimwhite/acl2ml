((/powerlists/simple.lisp::p-reverse (nil nil nil nil (if) nil nil) ((p) nil (powerlist-p) (p-tie) nil nil nil) ((p) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-r p-untie-l) nil nil nil nil) ((p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::p-reverse-zip (nil nil nil nil (if) nil nil) ((p) nil (powerlist-p) (p-zip) nil nil nil) ((p) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-unzip-r p-unzip-l) nil nil nil nil) ((p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::p-rotate-right (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) (p-zip) nil nil nil) ((x) nil (recursive-call p-unzip-l) nil nil nil nil) ((x) nil (p-unzip-r) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::p-rotate-left (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) (p-zip) nil nil nil) ((x) nil (p-unzip-r recursive-call) nil nil nil nil) ((x) nil (p-unzip-l) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::p-rotate-right-k (nil nil nil nil (if) nil nil) ((x) nil (zp p-rotate-right) nil nil nil nil) ((k) nil nil (recursive-call) nil nil nil) ((x) nil (1-) nil nil nil nil) ((k) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::natural-induction (nil nil nil nil (if) nil nil) ((x) nil (recursive-call) (or) nil nil nil) (nil nil (zp 1-) (equal) nil nil nil) ((x x x) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::p-rotate-right-k-fast (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) nil (if) nil nil) ((x) nil (integerp) (p-zip p-zip) nil nil nil) (nil nil nil (/ recursive-call recursive-call recursive-call recursive-call) nil nil nil) ((k) (2) (p-unzip-l p-unzip-r p-unzip-r 1+ p-unzip-l) (/ / /) nil nil nil) ((x k x k x x) (2 2 2) (1-) (/) nil nil nil) ((k) (2) (1-) nil nil nil nil)) (/powerlists/simple.lisp::p-right-shuffle (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) (p-tie) nil nil nil) ((x) nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::p-left-shuffle (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) (p-zip) nil nil nil) ((x) nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/powerlists/simple.lisp::p-invert (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) (p-zip) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))