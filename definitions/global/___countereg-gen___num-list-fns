((/countereg-gen/num-list-fns.lisp::2+-listp (nil nil nil nil (if) nil nil) (nil nil (atom null) nil (and) nil nil) ((x x) nil (integerp recursive-call) (<=) nil nil nil) (nil (2) (car car cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::POS-LISTP (nil nil nil (COND) nil nil nil) (nil nil ((ATOM acl2::L) T) nil nil nil nil) (nil nil nil (EQ AND) nil nil nil) ((acl2::L NIL) nil (POSP recursive-call) nil nil nil nil) (nil nil (CAR CDR) nil nil nil nil) ((acl2::L acl2::L) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::naturals-listp (nil nil nil nil (if) nil nil) (nil nil (atom null) (and) nil nil nil) ((x x) nil (natp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::sum-list (nil nil nil nil (if) nil nil) (nil (0) (endp) (+) nil nil nil) ((l) nil (car recursive-call) nil nil nil nil) ((l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::product-list (nil nil nil nil (if) nil nil) (nil (1) (endp) (*) nil nil nil) ((l) nil (car recursive-call) nil nil nil nil) ((l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::max-nat-list (nil nil nil nil (if) nil nil) (nil (0) (endp) (max) nil nil nil) ((l) nil (car recursive-call) nil nil nil nil) ((l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::scale (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((l) nil nil (* recursive-call) nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::shift (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((l) nil nil (+ recursive-call) nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::pow (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((l) nil nil (expt recursive-call) nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::list-expt (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((l) nil nil (expt recursive-call) nil nil nil) ((base base) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::<=-lists (nil nil nil nil (if) nil nil) (nil nil nil (and) nil (mbe mbe) nil) ((:logic :exec :logic :exec t) nil (endp) (or and <= recursive-call) nil nil nil) ((l1) nil (endp endp endp endp car car cdr cdr) nil nil nil nil) ((l1 l2 l1 l2 l1 l2 l1 l2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::all-<= (nil nil nil nil (if) nil nil) ((t) nil (endp) (and) nil nil nil) ((l) nil nil (<= recursive-call) nil nil nil) ((v v) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::*-lists (nil nil nil nil (if) nil nil) ((nil) nil nil (cons) nil (mbe) nil) ((:logic :exec) nil (endp) (or * recursive-call) nil nil nil) ((l1) nil (endp endp car car cdr cdr) nil nil nil nil) ((l1 l2 l1 l2 l1 l2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::+-lists (nil nil nil nil (if) nil nil) ((nil) nil nil (cons) nil (mbe) nil) ((:logic :exec) nil (endp) (or + recursive-call) nil nil nil) ((l1) nil (endp endp car car cdr cdr) nil nil nil nil) ((l1 l2 l1 l2 l1 l2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::make-list-logic (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((size e) nil nil (recursive-call) nil nil nil) ((e) nil nil (-) nil nil nil) ((size) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::pfix (nil nil nil nil (if) nil nil) ((x) (1) (posp) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/num-list-fns.lisp::pos-list-fix (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (pfix recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))