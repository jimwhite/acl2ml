((/deduction/passmore/prover.lisp::contains-refutation (nil nil nil nil (if) nil nil) ((nil) nil (endp) (let) nil nil nil) ((proof-moves (cur-move (car proof-moves))) nil nil (let) nil nil nil) (nil nil ((cur-move-id (car cur-move))) nil (if) nil nil) ((cur-move-id) nil (cur-move-clause recursive-call) (equal) nil nil nil) ((cur-move-clause nil) nil (caddr cdr) nil nil nil nil) ((cur-move proof-moves) nil nil nil nil nil nil)) (/deduction/passmore/prover.lisp::filter-duplicates (nil nil nil nil (cond) nil nil) (nil nil ((endp new-moves) (or (clause-move-member (extract-clause (car new-moves)) sos-moves) (clause-move-member (extract-clause (car new-moves)) usable-moves)) t) nil nil nil nil) ((nil) nil nil (cons) (recursive-call) nil nil) ((sos-moves usable-moves) nil (cdr car) nil (recursive-call) nil nil) ((new-moves new-moves sos-moves usable-moves) nil (cdr) nil nil nil nil) ((new-moves) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/deduction/passmore/prover.lisp::prover-loop (nil nil nil (cond) nil nil nil) (nil nil ((or (not (posp search-limit)) (contains-refutation sos-moves)) t) nil nil nil nil) (nil nil nil (mv let) nil nil nil) ((usable-moves (pick-given-ratio (or (get-setting prover-settings (quote PICK-GIVEN-RATIO)) 2))) nil (quad-filter-internal-dups) (let) nil nil nil) ((sos-moves (new-sos-resolvents (if (zp (mod search-limit pick-given-ratio)) (linear-resolution sos-moves usable-moves last-cycle-top-clause prover-settings) (linear-resolution sos-moves sos-moves last-cycle-top-clause prover-settings)))) nil nil (let) nil nil nil) (((new-sos-mergers (if (get-setting prover-settings (quote NO-MERGING)) nil (linear-merging (append new-sos-resolvents sos-moves) (+ top-clause-id (len new-sos-resolvents)) last-cycle-top-clause 0)))) nil nil (let) nil nil nil) (((new-sos-factors (if (get-setting prover-settings (quote NO-FACTORING)) nil (linear-factoring (append sos-moves new-sos-resolvents new-sos-mergers) (+ top-clause-id (len new-sos-resolvents) (len new-sos-mergers)) last-cycle-top-clause 0)))) nil nil (let) nil nil nil)) (/deduction/passmore/prover.lisp::utepthm (nil nil nil nil (mv-let) nil nil) (nil nil (sos-move-tree) (let) nil nil nil) ((usable-move-tree prover-settings (refutation-move-id (contains-refutation sos-move-tree))) (0) (1+) (or cond) (raw-clauses-to-axiom-moves* raw-clauses-to-axiom-moves*) nil nil) ((sos-clauses usable-clauses) (0 5) (quote 1+ quote len (not (equal refutation-move-id nil)) t) (get-setting) nil nil nil) ((S U sos-clauses prover-settings) nil (len quote) (let) nil nil (list)) ((sos-clauses SEARCH-DEPTH (pruned-linear-move-proof-tree (prune-proof-tree* (crop-proof-end-at-line-id (append usable-move-tree sos-move-tree) refutation-move-id)))) nil nil nil (list if list list list) nil (list)) (nil nil (quote quote quote quote quote quote quote quote quote quote nfix quote quote) (list get-setting list or -) (if) (list) nil)))