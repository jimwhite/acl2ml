((/leftist-trees/leftist-tree-defuns.lisp::rank-lt (nil nil nil nil (if) nil nil) (nil (0) (atom car) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::root-lt (nil nil (cadr) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::left-lt (nil nil (caddr) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::right-lt (nil nil (cadddr) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::is-empty-lt (nil nil (atom) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::proper-lt (nil nil nil nil (if) nil nil) (nil nil (is-empty-lt) (and) nil nil nil) ((tree) nil (null recursive-call recursive-call) (equal equal <= implies implies) nil nil nil) ((tree) (0) (rank-lt left-lt right-lt rank-lt rank-lt rank-lt consp consp) (+ lexorder lexorder) nil nil nil) ((tree tree tree tree) (1) (rank-lt right-lt left-lt left-lt root-lt root-lt right-lt root-lt root-lt) nil nil nil nil) ((tree tree tree tree tree tree) nil (right-lt left-lt right-lt) nil nil nil nil) ((tree tree tree) nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::make-lt (nil nil nil nil (if) nil nil) (nil nil nil (<=) nil (list list) nil) ((x a b x b a) nil (rank-lt rank-lt) (+ +) nil nil nil) ((b a) (1 1) (rank-lt rank-lt) nil nil nil nil) ((b a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::merge-lt (nil nil nil nil (cond) nil nil) (nil nil ((is-empty-lt tree2) (is-empty-lt tree1) t) nil nil nil nil) ((tree1 tree2) nil nil nil (if) nil nil) (nil nil nil (lexorder) (make-lt make-lt) nil nil) (nil nil (root-lt root-lt root-lt left-lt root-lt left-lt) (recursive-call recursive-call) nil nil nil) ((tree1 tree2 tree1 tree1 tree2 tree2 tree2 tree1) nil (right-lt right-lt) nil nil nil nil) ((tree1 tree2) nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::insert-lt (nil nil nil (merge-lt) nil nil nil) ((tree) nil nil nil nil (list) nil) ((x NIL NIL) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::find-min-lt (nil nil nil (cond) nil nil nil) (nil nil ((is-empty-lt tree) t) nil nil nil nil) ((nil) nil (root-lt) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::delete-min-lt (nil nil nil (cond) nil nil nil) (nil nil ((is-empty-lt tree) t) nil nil nil nil) ((nil) nil nil (merge-lt) nil nil nil) (nil nil (left-lt right-lt) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::build-lt (nil nil nil nil (if) nil nil) ((*empty-lt*) nil (atom) (insert-lt) nil nil nil) ((l) nil (car recursive-call) nil nil nil nil) ((l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::size-lt (nil nil nil (cond) nil nil nil) (nil nil ((is-empty-lt tree) t) nil nil nil nil) (nil (0) nil nil (+) nil nil) (nil (1) (recursive-call recursive-call) nil nil nil nil) (nil nil (left-lt right-lt) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::member-lt (nil nil nil nil nil (cond) nil) (nil nil ((is-empty-lt tree) (equal x (root-lt tree)) (lexorder x (root-lt tree)) t) nil nil nil nil) ((nil t nil) nil nil (or) nil nil nil) (nil nil nil (recursive-call recursive-call) nil nil nil) ((x x) nil (left-lt right-lt) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::length-right-spine-lt (nil nil nil nil (if) nil nil) (nil (0) (is-empty-lt) (+) nil nil nil) ((tree) (1) (recursive-call) nil nil nil nil) (nil nil (right-lt) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-defuns.lisp::length-to-nil-lt (nil nil nil (cond) nil nil nil) (nil nil ((is-empty-lt tree) t) nil nil nil nil) (nil (0) nil (+) nil nil nil) (nil (1) nil (min) nil nil nil) (nil nil (recursive-call recursive-call) nil nil nil nil) (nil nil (left-lt right-lt) nil nil nil nil) ((tree tree) nil nil nil nil nil nil)))