((/textbook/chap11/tautology.lisp::ifp (nil nil nil (and) nil nil nil) (nil nil (consp) (equal) nil nil nil) ((x) nil (car quote) nil nil nil nil) ((x if) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::test (nil nil (second) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::tb (nil nil (third) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::fb (nil nil (fourth) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::if-exprp (nil nil nil (cond) nil nil nil) (nil nil ((ifp x) t) nil nil nil nil) (nil nil (atom) nil nil nil (and)) ((x) nil (true-listp recursive-call recursive-call recursive-call) (equal) nil nil nil) ((x) (4) (len test tb fb) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::if-n (nil nil nil nil (if) nil nil) ((x) nil (ifp) (let) nil nil nil) ((x) nil nil ((test (test x))) (if) nil nil) (nil nil (tb fb ifp recursive-call) nil nil (list) nil) ((test test) nil (tb fb quote recursive-call recursive-call) nil nil (list) nil) ((x x if tb fb) nil (quote test) nil nil (list list) nil) ((if test tb fb tb fb) nil (quote tb quote fb) nil nil nil nil)) (/textbook/chap11/tautology.lisp::if-depth (nil nil nil nil (if) nil nil) (nil (0) (ifp) (+) nil nil nil) ((x) (1) (recursive-call) nil nil nil nil) (nil nil (test) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::if-complexity (nil nil nil nil (if) nil nil) (nil (1) (ifp) (*) nil nil nil) ((x) nil (recursive-call) (+) nil nil nil) (nil nil (test recursive-call recursive-call) nil nil nil nil) ((x) nil (tb fb) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::natm (nil nil nil nil (if) nil nil) (nil (1) (ifp) (+) nil nil nil) ((x) nil nil (* *) nil nil nil) (nil (2) (recursive-call recursive-call) (+) nil nil nil) (nil nil (test test recursive-call recursive-call) nil nil nil nil) ((x x) nil (tb fb) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::if-n1 (nil nil nil nil (if) nil nil) ((x) nil (ifp) (let) nil nil nil) ((x) nil nil ((test (test x))) (if) nil nil) (nil nil (tb fb ifp recursive-call) nil nil (list) nil) ((test test) nil (tb fb quote recursive-call recursive-call) nil nil (list) nil) ((x x if tb fb) nil (quote test) nil nil (list list) nil) ((if test tb fb tb fb) nil (quote tb quote fb) nil nil nil nil)) (/textbook/chap11/tautology.lisp::boolean-constantp (nil nil nil (or) nil nil nil) (nil nil nil (equal equal) nil nil nil) ((x t x nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::atomic-val (nil nil nil nil (if) nil nil) ((atm) nil (boolean-constantp cdr) nil nil nil nil) ((atm) nil nil (assoc-equal) nil nil nil) ((atm alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::peval (nil nil nil (cond) nil nil nil) (nil nil ((ifp x) t) nil nil nil nil) (nil nil nil (atomic-val) (if) nil nil) ((x alist) nil nil (recursive-call recursive-call recursive-call) nil nil nil) ((alist alist alist) nil (test tb fb) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::assignedp (nil nil nil (or) nil nil nil) (nil nil (boolean-constantp) (assoc-equal) nil nil nil) ((atm atm alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::assume-true (nil nil nil (cons) nil nil nil) ((alist) nil nil (cons) nil nil nil) ((var t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::assume-false (nil nil nil (cons) nil nil nil) ((alist) nil nil (cons) nil nil nil) ((var nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::tautp (nil nil nil nil (if) nil nil) (nil nil (ifp) (atomic-val) (if) nil nil) ((x x alist) nil nil (assignedp and) (if) nil nil) ((alist) nil (test) (atomic-val recursive-call recursive-call recursive-call recursive-call) nil nil nil) ((x alist alist alist) nil (test tb fb tb fb) (assume-true assume-false) nil nil nil) ((x x x x alist x alist) nil (test test) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::tautology-checker (nil nil nil (tautp) nil nil nil) ((nil) nil (if-n) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::normp (nil nil nil nil (if) nil nil) ((t) nil (ifp) nil (and) nil nil) ((x) nil (not recursive-call recursive-call) nil nil nil nil) (nil nil (ifp tb fb) nil nil nil nil) ((x x) nil (test) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/tautology.lisp::falsify (nil nil nil nil (if) nil nil) (nil nil (ifp) nil (if if) nil nil) ((x) nil nil (assignedp assignedp mv) (if mv-let if) nil nil) ((alist x alist t) nil (test ans) (atomic-val recursive-call recursive-call recursive-call atomic-val mv mv assume-false) (if) nil nil) ((x alist alist alist new-alist ans x alist nil nil t alist x alist) nil (test tb fb tb) (assume-true mv recursive-call) nil nil nil) ((x x x x alist ans new-alist) nil (test fb) (assume-false) nil nil nil) ((x x alist) nil (test) nil nil nil nil)) (/textbook/chap11/tautology.lisp::falsifying-alist (nil nil nil nil nil (mv-let) nil) ((alist) nil (ans declare) (falsify) nil nil nil) ((alist nil) nil (if-n ignore) nil nil nil nil) ((x ans) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))