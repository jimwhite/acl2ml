((/taspi/proofs/omerge-good-order.lisp::good-order-list (nil nil nil nil (if) nil nil) (nil nil (consp) (equal) nil (and) nil) ((x x nil) nil (consp integerp recursive-call) (or) nil nil nil) (nil nil (car cdar integerp cdr) (and) nil nil nil) ((x x x) nil (caar symbolp not) nil nil nil nil) ((x) nil (caar) (equal) nil nil nil) ((x nil) nil (caar) nil nil nil nil)) (/taspi/proofs/omerge-good-order.lisp::get-taxa-from-order (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil (caar recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/omerge-good-order.lisp::olessp (nil nil nil nil (if) nil nil) ((t nil) nil nil (<) nil nil nil) (nil nil (cdr cdr) nil nil nil nil) (nil nil nil (assoc-equal assoc-equal) nil nil nil) ((x order y order) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/omerge-good-order.lisp::omerge (nil nil nil nil nil nil (cond)) (nil nil ((not (consp x)) (not (consp y)) (olessp (car x) (car y) order) (olessp (car y) (car x) order) t) nil nil nil nil) ((y x) nil nil (cons cons cons) nil nil nil) (nil nil (car car car) nil (recursive-call recursive-call recursive-call) nil nil) ((x y order y x order x order) nil (cdr cdr cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/omerge-good-order.lisp::mytips (nil nil nil nil (if) nil nil) (nil nil (consp) (append) (if) nil nil) ((tree nil) nil (recursive-call recursive-call list) (equal) nil nil nil) ((tree nil tree) nil (car cdr) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/omerge-good-order.lisp::smaller-all (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil nil (<) (recursive-call) nil nil) ((x order) nil (cdr cdr cdr) nil nil nil nil) ((list) nil nil (assoc-equal assoc-equal) nil nil nil) ((x order order) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/taspi/proofs/omerge-good-order.lisp::smaller-all-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list1) nil nil nil (smaller-all recursive-call) nil nil) ((list2 order list2 order) nil (car cdr) nil nil nil nil) ((list1 list1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))