((/textbook/chap10/adder.lisp::band (nil nil nil nil (if) nil nil) ((p nil) nil nil nil (if) nil nil) ((q t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/adder.lisp::bor (nil nil nil nil (if) nil nil) ((p t) nil nil nil (if) nil nil) ((q t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/adder.lisp::bxor (nil nil nil nil (if) nil nil) ((p) nil nil nil (if if) nil nil) ((q nil t q t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/adder.lisp::bmaj (nil nil nil (bor) nil nil nil) (nil nil nil (band bor) nil nil nil) ((p q) nil nil (band band) nil nil nil) ((p c q c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/adder.lisp::full-adder (nil nil nil (mv) nil nil nil) (nil nil nil (bxor) (bmaj) nil nil) ((p p q c) nil nil (bxor) nil nil nil) ((q c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/adder.lisp::serial-adder (nil nil nil nil (if) nil nil) (nil nil (list) (and) (mv-let) nil nil) ((c) nil (endp endp sum) (cons) (full-adder) nil nil) ((x y cout c sum) nil (car car) nil (recursive-call) nil nil) ((x y cout) nil (cdr cdr) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/adder.lisp::n (nil nil nil nil (cond) nil nil) (nil nil ((endp v) (car v) t) nil nil nil nil) (nil (0) nil (+ *) nil nil nil) (nil (1 2) (recursive-call) (*) nil nil nil) (nil (2) (recursive-call cdr) nil nil nil nil) ((v) nil (cdr) nil nil nil nil) ((v) nil nil nil nil nil nil)) (/textbook/chap10/adder.lisp::multiplier (nil nil nil nil (if) nil nil) ((p) nil (endp) nil (recursive-call) nil nil) ((x) nil (cdr) (cons) (if) nil nil) ((x nil y p) nil (car) nil (serial-adder) nil nil) ((x y p nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))