((/nonstd/nsa/trig-approx.lisp::taylor-sin-term (nil nil nil nil (*) nil nil) ((sign) nil (/) (expt) nil nil nil) ((x counter) nil (factorial) nil nil nil nil) ((counter) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::abs-taylor-sin-term (nil nil nil nil (if) nil nil) (nil (1) (zp) nil (*) nil nil) ((counter) nil (abs /) (recursive-call) nil nil nil) ((x counter x) nil (1-) nil nil nil nil) ((counter) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::abs-taylor-sin-term-low (nil nil nil nil (if) nil nil) (nil (1) (zp) nil (if) nil nil) ((counter) nil nil (<) (recursive-call *) nil nil) ((m counter m x) nil (1- abs /) nil (recursive-call) nil nil) ((counter x counter m x) nil (1-) nil nil nil nil) ((counter) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::abs-taylor-sin-term-high (nil nil nil nil (if) nil nil) (nil (1) (zp) nil (if) nil nil) ((counter) nil nil (<) (* recursive-call) nil nil) ((m counter m x) nil (abs / 1-) nil (recursive-call) nil nil) ((x counter m x counter) nil (1-) nil nil nil nil) ((counter) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::abs-taylor-sin-term-high-2 (nil nil nil nil (if) nil nil) (nil (1) (zp) nil (if) nil nil) ((counter) nil nil (<) (* recursive-call) nil nil) ((m counter m x) nil (abs / 1-) nil (recursive-call) nil nil) ((x m m x counter) nil (1-) nil nil nil nil) ((counter) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::new-guess-num-iters (nil nil nil (guess-num-iters-aux) nil nil nil) ((m) nil (next-integer) nil nil nil nil) (nil nil (/) nil nil nil nil) ((eps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::n-for-taylor-sin-term (nil nil nil (let*) nil nil nil) (nil nil nil ((m (next-integer (* 2 (abs x))))) (if) nil nil) ((counter) nil (eps1 counter evenp 1+) nil nil nil nil) ((counter counter) nil nil (/ +) nil nil nil) ((eps m) nil (1+) (new-guess-num-iters) nil nil nil) ((eps1 m) nil nil nil (abs-taylor-sin-term-low) nil nil) ((m m x) nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::epsilon-for-sincos (nil nil nil (let*) nil nil nil) ((eps2) nil ((eps1 (/ eps 2))) nil nil nil nil) (nil nil (eps2) nil nil nil nil) (nil nil nil nil (if) nil nil) ((eps1 1/2) nil nil (<) nil nil nil) ((eps1) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::n-for-sincos (nil nil nil (n-for-taylor-sin-term) nil nil nil) ((x) nil (epsilon-for-sincos) nil nil nil nil) ((eps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::sine-approx (nil nil (sumlist) nil nil nil nil) (nil nil nil nil nil (taylor-sincos-list) nil) ((x) (1 1) nil (n-for-sincos) nil nil nil) ((x eps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig-approx.lisp::cosine-approx (nil nil (sumlist) nil nil nil nil) (nil nil nil nil nil (taylor-sincos-list) nil) ((x) (0 1) nil (n-for-sincos) nil nil nil) ((x eps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))