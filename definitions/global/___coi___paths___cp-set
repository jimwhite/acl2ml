((/coi/paths/cp-set.lisp::cp-set (nil nil nil nil (if) nil nil) ((st2) nil (set::empty) (let) nil nil nil) ((set (p (set::head set))) nil nil nil (sp) nil nil) ((p) nil nil (gp) (recursive-call) nil nil) ((p st1 st1 st2) nil (set::tail) nil nil nil nil) ((set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/paths/cp-set.lisp::cp-set-equal (nil nil nil nil (if) nil nil) ((t) nil (set::empty) (and) nil nil nil) ((set) nil nil (equal) (recursive-call) nil nil) ((st1 st2) nil (set::tail) (gp gp) nil nil nil) ((st1 st2 set) nil (set::head set::head) nil nil nil nil) ((set set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/paths/cp-set.lisp::clrp-set (nil nil nil nil (if) nil nil) ((st) nil (set::empty) (recursive-call) nil nil nil) ((set) nil (set::tail) (clrp) nil nil nil) ((set st) nil (set::head) nil nil nil nil) ((set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/paths/cp-set.lisp::clrp-set-induction (nil nil nil nil (if) nil nil) (nil nil (set::empty) (cons) (recursive-call) nil nil) ((set r1 r2) nil (set::tail) (clrp clrp) nil nil nil) ((set r1 r2) nil (set::head set::head) nil nil nil nil) ((set set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/paths/cp-set.lisp::keep-exposed-elements (nil nil nil nil (if) nil nil) ((set::emptyset) nil (set::empty) (let) nil nil nil) ((x (head (set::head x))) nil nil nil (if) nil nil) (nil nil nil (dominates set::insert) (if) nil nil) ((a head) nil (list::fix) (recursive-call dominates set::insert recursive-call) nil nil nil) ((a head a nil a) nil (set::tail set::tail) (nthcdr recursive-call) nil nil nil) ((head x a x) nil (len set::tail) nil nil nil nil)) (/coi/paths/cp-set.lisp::clrp-set-equal (nil nil nil nil (if) nil nil) (nil nil (set::empty) (equal) (recursive-call) nil nil) ((set x y) nil (set::tail) (path::clrp path::clrp) nil nil nil) ((set x y) nil (set::head set::head) nil nil nil nil) ((set set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))