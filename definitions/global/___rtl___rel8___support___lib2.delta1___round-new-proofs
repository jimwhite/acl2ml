((/rtl/rel8/support/lib2.delta1/round-new-proofs.lisp::re (nil nil nil (-) nil nil nil) ((x) nil (fl) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/round-new-proofs.lisp::inf (nil nil nil nil (if) nil nil) (nil nil nil (>= away trunc) nil nil nil) ((x x n x n) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/round-new-proofs.lisp::minf (nil nil nil nil (if) nil nil) (nil nil nil (>= trunc away) nil nil nil) ((x x n x n) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/round-new-proofs.lisp::common-rounding-mode-p (nil nil nil nil (or) nil nil) (nil nil (IEEE-mode-p) (equal equal) nil nil nil) ((mode mode mode) nil (quote quote) nil nil nil nil) ((away near+) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/round-new-proofs.lisp::rnd-const (nil nil nil nil nil (case) nil) ((mode) nil ((near near+) (inf away) otherwise) nil nil nil nil) (nil (0) (1-) (expt) nil nil nil) (nil (2) nil (- expt) nil nil nil) ((e n) (2) (1+) nil nil nil nil) (nil nil nil (-) nil nil nil) ((e n) nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/round-new-proofs.lisp::roundup_alt (nil nil nil nil nil nil (case)) ((mode) nil (near+ near (inf away) otherwise) nil nil nil nil) ((nil) nil (not) (= and) nil nil nil) (nil (1) nil (bitn_alt = or exactp) nil nil nil) ((x x n) (1) (not) (- bitn_alt =) nil nil nil) ((n x) (1) (expo) (- exactp bitn_alt) nil nil nil) ((x n x x) nil (expo 1+) (-) nil nil nil)))