((/taspi/sets-input/tree-compat.lisp::bi-compat (nil nil nil (let*) nil nil nil) (nil nil ((new-set (my-union cur-set (cdr (term-to-bfringes tree taxa-list))))) nil (if) nil nil) (nil nil (o-set q-no-conflicts-list) (mv mv) nil nil nil) ((o-set t o-set nil nil) nil nil nil (sort-bdd-fringes) nil nil) ((new-set) nil (build-taxa-list-tree taxa-list-to-taxon-index) nil nil nil nil) ((taxa-list taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/tree-compat.lisp::tree-compat (nil nil nil nil (if) nil nil) (nil nil (consp) nil (if if) nil nil) ((tree-list nil) nil (consp consp) (build-term-top) (mv-let) (recursive-call) nil) ((cur-set taxa-list tips-seen taxa-list) nil (car flg cdr) (my-union cons) (bi-compat if) nil nil) ((tree-list new-set cur-set taxa-list flg nil tips-seen tree-list cur-set) nil (car mytips) (bfringe) nil (recursive-call) nil) ((tree-list new-set taxa-list tips-seen) nil (cdr car) (my-union build-fast-alist-from-alist) nil nil nil) ((tips-seen tree-list tree-list) nil (mytips taxa-list-to-tree-alist quote) nil nil nil nil)) (/taspi/sets-input/tree-compat.lisp::tree-compatibility (nil nil nil nil nil (tree-compat) nil) ((nil nil list-of-trees taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/tree-compat.lisp::tree-compatibility-brlens (nil nil nil (let) nil nil nil) (((trees-no-brlens (remove-brlens-list list-of-trees))) nil nil nil (if) nil nil) (nil nil (quote) (tree-compatibility) nil (and) nil) ((trees-no-brlens taxa-list bad-input-to-tree-compatibility) nil (tree-listp int-symlist) (subset <=) nil nil nil) ((trees-no-brlens taxa-list taxa-list) (2) (mytips len) nil nil nil nil) ((trees-no-brlens taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))