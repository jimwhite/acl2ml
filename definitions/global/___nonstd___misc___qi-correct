((/nonstd/misc/qi-correct.lisp::get-val (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((vars) nil (car) (eql) (recursive-call) nil nil) ((v vals v) nil (car cdr cdr) nil nil nil nil) ((vars vals vars) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/qi-correct.lisp::delete-val (nil nil nil nil (if) nil nil) ((vals) nil (atom) nil (if) nil nil) ((vars) nil (cdr) (eql cons) nil nil nil) ((v vals) nil (car car) nil (recursive-call) nil nil) ((vars vals v) nil (cdr cdr) nil nil nil nil) ((vals vars) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/qi-correct.lisp::vals-reorder (nil nil nil nil (if) nil nil) ((vals) nil (atom) (cons) nil nil nil) ((nvars) nil nil nil (get-val recursive-call) nil nil) ((vals vars) nil (car cdr) (delete-hql) (delete-val) nil nil) ((nvars vals vars vars nvars) nil (car car) nil nil nil nil) ((nvars nvars) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/qi-correct.lisp::q-restrict-shrink-induct (nil nil nil nil (if) nil nil) (nil nil (atom) nil (if) (list) nil) ((x x vals v vars) nil nil (eql) (if if) nil nil) ((v) nil (car car car) nil nil (recursive-call recursive-call recursive-call recursive-call) nil) ((vars vals v vars v vars vals v v) nil (car cdr cdr cdr car cdr cdr cdr cdr cdr) nil nil nil nil) ((x vals x vals x vals vars x vals vars) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/qi-correct.lisp::q-reorder-induct (nil nil nil nil (if) nil nil) ((nil) nil nil (or) (if) nil nil) (nil nil (atom atom) (eql let) (if) nil nil) ((x nvars (val (get-val (car nvars) vals vars))) nil (car car car) nil (if) (recursive-call recursive-call) nil) ((nvars vars vals val) nil (car cdr cdr cdr cdr cdr cdr cdr) nil nil (recursive-call recursive-call) nil) ((x vals vars nvars x vals vars nvars) nil (cdr cdr) (delete-hql delete-hql) (delete-val delete-val) (q-restrict-shrink q-restrict-shrink) nil) ((x t vars vals vars vars nvars x nil vars vals vars vars nvars) nil (car car car car car car) nil nil nil nil)) (/nonstd/misc/qi-correct.lisp::q-ite-induct (nil nil nil nil (cond) nil nil) (nil nil ((null x) (atom x) t) nil nil nil nil) (nil nil nil (eval-bdd eval-bdd let) nil nil nil) ((z vals y vals) nil ((y (if (equal x y) t y))) nil nil nil nil) (((and (eq y t) (eq z nil) (eval-bdd x vals))) nil (z (equal y z) (and (eq y nil) (eq z t)) (atom vals) (car vals) t) nil nil nil nil) (nil nil nil (eval-bdd eval-bdd) (if) (recursive-call recursive-call recursive-call) nil) ((nil z y vals vals nil) nil (q-not cdr qcdr qcdr car qcar qcar cdr cdr qcdr qcdr cdr) (equal) nil nil nil)) (/nonstd/misc/qi-correct.lisp::sym-val (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((vars) nil (car) (eql) (recursive-call) nil nil) ((term vals term) nil (car cdr cdr) nil nil nil nil) ((vars vars vals) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/qi-correct.lisp::term-eval (nil nil nil nil nil (cond) nil) (nil nil ((eq term t) (eq term nil) (eqlablep term) t) nil nil nil nil) ((t nil) nil nil (let) (sym-val) nil nil) ((term vars vals) nil ((fn (car term))) nil nil (case) nil) ((fn) nil (args if quote t) nil nil nil nil) ((nil) nil (cdr) (eval-bdd) (if) nil nil) ((term vals) nil (car) nil (recursive-call recursive-call recursive-call) nil nil)) (/nonstd/misc/qi-correct.lisp::term-all-p (nil nil nil nil (if) nil nil) (nil nil (atom) (or let) nil nil nil) ((term) nil (booleanp (fn (car term))) (member) (if) nil nil) ((term term vars t) nil (args) (eq) (and) nil nil) ((fn) nil (cdr quote) (recursive-call recursive-call recursive-call) nil nil nil) ((term if vars vars vars) nil (car cadr caddr) nil nil nil nil) ((args args args) nil nil nil nil nil nil)))