((/misc/callers-and-ancestors.lisp::immediate-ancestors-w (nil nil nil (remove1-eq) nil nil nil) ((fn) nil (all-fnnames) nil nil nil nil) (nil nil nil nil nil nil (getprop)) ((fn *t* wrld) nil (quote quote) nil nil nil nil) ((unnormalized-body current-acl2-world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::all-ancestors-w (nil nil nil (let) nil nil nil) (((imm (immediate-ancestors-w fn wrld))) nil nil nil (all-ancestors1-lst) nil nil) ((imm imm wrld) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::immediate-ancestors (nil nil nil (immediate-ancestors-w) nil nil nil) ((fn) nil (w) nil nil nil nil) ((state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::all-ancestors (nil nil nil (all-ancestors-w) nil nil nil) ((fn) nil (w) nil nil nil nil) ((state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::extend-immediate-callers-table1 (nil nil nil (cond) nil nil nil) (nil nil ((endp imm-ancs) t) nil nil nil nil) ((acc) nil nil nil (recursive-call) nil nil) ((fn) nil (cdr) (let*) nil nil nil) ((imm-ancs) nil ((anc (car imm-ancs))) (cond) nil nil nil) (nil nil (old (member-eq fn old) t) nil nil nil nil) ((acc) nil (cdr) nil (hons-acons) nil nil)) (/misc/callers-and-ancestors.lisp::extend-immediate-callers-table (nil nil nil (cond) nil nil nil) (nil nil ((endp fns) t) nil nil nil nil) ((acc) nil nil nil (recursive-call) nil nil) ((wrld) nil (cdr) nil (extend-immediate-callers-table1) nil nil) ((fns acc) nil (car) (immediate-ancestors-w) nil nil nil) ((fns wrld) nil (car) nil nil nil nil) ((fns) nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::all-defined-fns (nil nil nil nil (cond) nil nil) (nil nil ((endp wrld) (and (eq (cadar wrld) (quote formals)) (not (eq (cddar wrld) *acl2-property-unbound*))) t) nil nil nil nil) ((acc) nil nil (recursive-call recursive-call) nil nil nil) ((acc) nil (cdr cdr) (cons) nil nil nil) ((wrld acc wrld) nil (caar) nil nil nil nil) ((wrld) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::build-immediate-callers-table (nil nil nil (let) nil nil nil) (((wrld (w state))) nil nil nil (if) nil nil) ((state) nil nil (boundp-global) (f-put-global) nil nil) ((state state) nil (quote quote) nil (extend-immediate-callers-table) nil nil) ((immediate-callers-table immediate-callers-table wrld) nil (quote) (all-defined-fns) nil nil nil) ((wrld nil immediate-callers-table) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::chk-immediate-callers-table (nil nil nil (or) nil nil nil) (nil nil nil (boundp-global) nil (er) nil) ((state hard Please evaluate ~x0 first.) nil (quote quote quote) nil nil nil nil) ((immediate-callers-table immediate-callers) nil (build-immediate-callers-table) nil nil nil nil) ((state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::immediate-callers (nil nil nil (prog2$) nil nil nil) (nil nil (chk-immediate-callers-table cdr) nil nil nil nil) ((state) nil nil (hons-get) nil nil nil) ((fn) nil nil (f-get-global) nil nil nil) ((state) nil (quote) nil nil nil nil) ((immediate-callers-table) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/callers-and-ancestors.lisp::all-callers (nil nil nil (prog2$) nil nil nil) (nil nil (chk-immediate-callers-table) nil (all-callers1) nil nil) ((state fn nil) nil nil (f-get-global) nil nil nil) ((state) nil (quote) nil nil nil nil) ((immediate-callers-table) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))