((/nonstd/finite-set-theory/total-ordering.lisp::ordinaryp (nil nil nil (cond) nil nil nil) (nil nil ((atom x) t) nil nil nil nil) (nil nil nil nil (and) (or) nil) (nil nil (acl2-numberp characterp stringp symbolp consp recursive-call recursive-call) nil nil nil nil) ((x x x x x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/finite-set-theory/total-ordering.lisp::vcount (nil nil nil (cond) nil nil nil) (nil nil ((atom x) t) nil nil nil nil) (nil nil nil nil (+) nil (cond)) (nil (1) ((acl2-numberp x) (characterp x) (stringp x) (symbolp x) t recursive-call recursive-call) nil nil nil nil) (nil (0 0 0) (car cdr) (+ cond) nil nil nil) ((x x) (1) (length (equal x nil) t) nil nil nil nil) ((x) (0) nil nil (+) nil nil)) (/nonstd/finite-set-theory/total-ordering.lisp::<< (nil nil nil nil (cond) nil nil) (nil nil ((atom x) (atom y) t) nil nil nil nil) ((nil) nil nil (cond or) nil nil nil) (nil nil ((atom y) t) (recursive-call and) nil nil nil) ((t) nil (car car) (equal recursive-call) nil nil (cond)) ((x y) nil ((acl2-numberp x) (characterp x) (stringp x) (symbolp x) t car car cdr cdr) nil nil nil nil) ((nil x y x y) nil nil (cond) (cond) (cond) (cond))))