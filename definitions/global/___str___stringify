((/str/stringify.lisp::stringify-integer (nil nil nil nil (if) nil nil) (nil nil (natstr) (and) (concatenate) nil nil) ((- x) nil (integerp quote natstr) (<) nil nil nil) ((x x string) (0) (-) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/str/stringify.lisp::stringify-rational (nil nil nil nil (if) nil nil) (nil nil (stringify-integer) (or) nil (concatenate) nil) ((x /) nil (integerp quote stringify-integer natstr) nil nil (mbe) nil) ((x :logic :exec nil string) nil (not numerator denominator) nil nil nil nil) ((x x) nil (rationalp) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/str/stringify.lisp::upper-case-or-digit-listp (nil nil nil nil (if) nil nil) ((t) nil (atom) (and) nil nil nil) ((x) nil (recursive-call) (or) nil nil nil) (nil nil (upper-casep digitp cdr) nil nil nil nil) ((x) nil (car car) nil nil nil nil) ((X x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))