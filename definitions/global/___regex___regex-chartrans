((/regex/regex-chartrans.lisp::is-uppercase (nil nil nil (and) nil nil nil) (nil nil (standard-char-p upper-case-p) nil nil nil nil) ((c c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/regex-chartrans.lisp::is-lowercase (nil nil nil (and) nil nil nil) (nil nil (standard-char-p lower-case-p) nil nil nil nil) ((c c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/regex-chartrans.lisp::make-case-insens-translation (nil nil nil nil (if) nil nil) ((nil) nil (zp) (let) nil nil nil) (((char (code-char i))) nil nil (-) (if) nil nil) ((i) (256) (is-lowercase recursive-call) (cons) nil nil nil) ((char) nil (recursive-call 1+) (cons) nil nil nil) ((char i) nil (char-upcase 1+) nil nil nil nil) ((char i) nil nil nil nil nil nil)) (/regex/regex-chartrans.lisp::translation-table-p (nil nil nil nil (if) nil nil) (nil nil (atom) (equal) nil (and) nil) ((x x nil) nil (consp characterp characterp recursive-call) nil nil nil nil) (nil nil (car caar cdar cdr) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/regex-chartrans.lisp::apply-translation1 (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((clist) nil ((ch (car clist))) (cons) nil nil nil) (nil nil (pair) (recursive-call) (if) nil nil) ((pair ch trans) nil (cdr cdr) (assoc) nil nil nil) ((ch trans pair clist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/regex-chartrans.lisp::apply-translation (nil nil nil (coerce) nil nil nil) (nil nil (quote) (apply-translation1) nil nil nil) ((trans string) nil nil (coerce) nil nil nil) ((str) nil (quote) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/regex/regex-chartrans.lisp::case-insens-trans (nil nil nil (apply-translation) nil nil nil) ((str *case-insens-translation*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))