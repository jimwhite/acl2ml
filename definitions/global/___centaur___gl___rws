((/centaur/gl/rws.lisp::dumb-ev-ind (nil nil nil nil (if) nil nil) ((flg) nil nil (cond) nil nil (cond)) (nil nil ((symbolp x) (atom x) (eq (car x) (quote quote)) (consp (car x)) t (endp x) t) nil nil nil nil) ((nil nil) nil (car) (and cons cons) (recursive-call) nil nil) ((x nil a) nil (cdr cdr cdr) nil (recursive-call recursive-call recursive-call recursive-call) nil nil) ((x nil a t x t a nil a) nil (cdr car car cdr) (assoc-eq pairlis$) nil nil nil) ((x a x x x) nil (cdr car) (dumb-ev-lst) nil nil nil)) (/centaur/gl/rws.lisp::term-alistp (nil nil nil nil (if) nil nil) (nil nil (atom) (eq) nil (and) nil) ((al al nil) nil (consp symbolp pseudo-termp recursive-call) nil nil nil nil) (nil nil (car caar cdar cdr) nil nil nil nil) ((al al al al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::dumb-ev-al (nil nil nil (pairlis$) nil nil nil) (nil nil (strip-cars) (dumb-ev-lst) nil nil nil) ((al a) nil (strip-cdrs) nil nil nil nil) ((al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::beta-reduce-cp (nil nil nil (let) nil nil nil) (((ans (list (beta-reduce-list (hons-copy x))))) nil nil (prog2$) nil nil nil) ((ans) nil (clear-memoize-table) nil nil nil nil) (nil nil (quote) nil nil nil nil) ((beta-reduce-term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::reduce-trivial-equality-cp (nil nil nil nil (case-match) nil nil) ((x) nil ((((quote equal) a b) . &) &) nil nil nil nil) (nil nil (list) nil (if) nil nil) ((nil x) nil (list) (hons-equal) nil nil nil) ((a b x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::nonnil-symbol-listp (nil nil nil nil (if) nil nil) (nil nil (atom) (eq) (and) nil nil) ((x x nil) nil (symbolp car recursive-call) nil nil nil nil) ((x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::rewrite-listp (nil nil nil (or) nil nil nil) (nil nil (atom) nil nil nil nil) ((rws) nil (consp consp consp nonnil-symbol-listp no-duplicatesp not pseudo-termp recursive-call) nil nil nil nil) (nil nil (car caar cdar caar cdaar cadar cdr) (member) nil nil nil) ((rws rws rws rws rws rws rws) nil (caaar quote) nil nil nil nil) ((rws) nil (quote) nil nil nil nil) ((if) nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::fncall-rewrite (nil nil nil nil (if) nil nil) (nil nil (atom) (mv) (if) nil nil) ((rws x nil) nil nil (and let recursive-call) nil nil nil) (((newx (term-subst (cadar rws) (pairlis$ (cdaar rws) (cdr x)))) x) nil (cdr) (eq eql prog2$) nil nil nil) ((rws) nil (car caaar length length clear-memoize-table) (mv) nil nil nil) ((x rws newx) nil (cdr cdaar quote `) nil nil nil nil) ((x rws term-subst) nil ((not (use-by-hint (quote (, (cddar rws)))))) nil nil nil nil)) (/centaur/gl/rws.lisp::fncall-rewrite-alist (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((rws) nil nil (and dumb-ev-al) (recursive-call) nil nil) ((a x a) nil (cdr) (eq eql pairlis$) nil nil nil) ((rws) nil (car caaar length length cdaar cdr) nil nil nil nil) ((x rws rws x) nil (cdr cdaar) nil nil nil nil) ((x rws) nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::cdr-both (nil nil nil nil (if) nil nil) ((x) nil nil (and recursive-call) nil nil nil) (nil nil (atom atom cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::term-rw-mem-wfp (nil nil nil (or) nil nil nil) (nil nil (atom) nil (and) nil nil) ((mem) nil (consp pseudo-termp recursive-call) nil nil nil nil) (nil nil (car cdar cdr) nil nil nil nil) ((mem mem mem) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::pseudo-term-list-key-alistp (nil nil nil nil (if) nil nil) (nil nil (atom) (eq) (and) nil nil) ((x x nil) nil (consp pseudo-term-listp recursive-call) nil nil nil nil) (nil nil (car caar cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::used-al-to-used (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((x (rest (used-al-to-used (cdr x)))) nil nil nil (if) nil nil) ((rest) nil nil (and) (hons-acons) nil nil) ((t rest) nil (consp not caar) nil nil nil nil) ((x) nil (car) (hons-get) nil nil nil) ((x rest) nil (caar) nil nil nil nil)) (/centaur/gl/rws.lisp::used-and-used-al-to-alist-lists (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((used) nil (consp) (cons recursive-call) nil nil nil) ((used-al) nil (car cdr cdr) (recursive-call) nil nil nil) ((used used-al used) nil (cdr) (hons-get) nil nil nil) ((used-al used) nil (caar) nil nil nil nil) ((used) nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::alists-apply-alists-dumb-ev (nil nil nil (let) nil nil nil) (((used (used-al-to-used used-al))) nil nil (clauses-apply-alists-dumb-ev) nil nil nil) (nil nil (alist-keys) (used-and-used-al-to-alist-lists) nil nil nil) ((used used used-al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::term-rw-mem-okp (nil nil nil (or) nil nil nil) (nil nil (atom) (and) nil nil nil) ((mem) nil nil (equal recursive-call) nil nil nil) ((a) nil (cdr) (dumb-ev dumb-ev) nil nil nil) ((a a mem) nil (caar cdar) nil nil nil nil) ((mem mem) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::rw-cp (nil nil nil nil (if) nil nil) (nil nil (rewrite-listp list) nil (mv-let) nil nil) ((rws clause) nil nil (newclause prog2$) nil (term-rw-lst) nil) ((mem used rws nil nil) nil (hons-copy flush-hons-get-hash-table-link) (prog2$) nil nil nil) ((clause used) nil (flush-hons-get-hash-table-link) (cons) nil nil nil) ((mem newclause) nil (alist-keys) nil nil nil nil) ((used) nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::rw-cp-alists (nil nil nil nil (if) nil nil) (nil nil (rewrite-listp list) nil nil (mv-let) nil) ((rws) nil (declare list) (newclause cons) nil nil (term-rw-alist-lst)) ((mem used clause rws nil nil a a) nil (list) (ignore used-and-used-al-to-alist-lists) nil nil nil) ((newclause mem a used) nil (used-al-to-used) nil nil nil nil) ((used) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::remove-first-hyp-cp (nil nil nil nil (if) nil nil) (nil nil (consp list list) nil nil nil nil) ((clause clause) nil (cdr) nil nil nil nil) ((clause) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::rw-from-name (nil nil nil (let) nil nil nil) (((eq (if (atom name) (let ((body (fgetprop name (quote unnormalized-body) nil world))) (if body (` (equal ((, name) , (fgetprop name (quote formals) nil world)) (, body))) (fgetprop name (quote theorem) nil world))) (acl2::corollary name world)))) nil nil (and) nil nil nil) (nil nil nil (eq) (list*) nil nil) ((name) nil (car quote cadr caddr) nil nil nil nil) ((eq equal eq eq) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/rws.lisp::rws-from-ruleset-fn (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((runes (rw (rw-from-name (car runes) world))) nil nil nil (if) nil nil) ((rw) nil nil (cons recursive-call) nil nil nil) ((rw world) nil (cdr) (recursive-call) nil nil nil) ((world runes) nil (cdr) nil nil nil nil) ((runes) nil nil nil nil nil nil)))