((/rtl/rel7/arithmetic/induct.lisp::or-dist-induct (nil nil nil nil (if) nil nil) ((nil) nil nil (and) (if) nil nil) ((y) nil (integerp) (>= = recursive-call) nil nil nil) ((n n n) (0 0) (fl 1-) nil nil nil nil) ((n) nil nil (/) nil nil nil) ((y) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/arithmetic/induct.lisp::log-induct (nil nil nil nil (if) nil nil) ((nil) nil nil nil (if) (and) nil) ((nil) nil (integerp integerp) (>= >= or recursive-call) nil nil nil) ((i i j j) (0 0) (fl fl) (= =) nil nil nil) ((i j) (0 0) nil (/ /) nil nil nil) ((i j) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/arithmetic/induct.lisp::logand-three-args-induct (nil nil nil nil (IF) nil nil) ((NIL) nil nil nil (AND IF) nil nil) ((NIL) nil (INTEGERP INTEGERP INTEGERP) nil (recursive-call) nil nil) ((I J K) nil (FL FL FL) (= = = = = =) nil nil nil) ((I J K I J K) (0 0 0 -1 -1 -1) nil (/ / /) nil nil nil) ((I J K) (2 2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/arithmetic/induct.lisp::LOG-INDUCT-allows-negatives (nil nil nil nil (IF) nil nil) ((NIL) nil nil (AND) (IF) nil nil) ((NIL) nil (INTEGERP INTEGERP) (recursive-call) nil (OR) nil) ((i j) nil (FL FL) (= = = =) nil nil nil) ((i j i j) (0 0 -1 -1) nil (/ /) nil nil nil) ((i j) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/arithmetic/induct.lisp::op-dist-induct (nil nil nil nil (if) nil nil) ((nil) nil nil (and) (if) nil nil) (nil nil (integerp) (>= = list) (recursive-call) nil nil) ((n n n i j) (0 0) (fl fl 1-) nil nil nil nil) ((n) nil nil (/ /) nil nil nil) ((i j) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/arithmetic/induct.lisp::op-dist-induct-negative (nil nil nil nil (if) nil nil) ((nil) nil nil (and) (if) nil nil) (nil nil (integerp) (<= = list) (recursive-call) nil nil) ((n n n i j) (0 0) (fl fl 1+) nil nil nil nil) ((n) nil nil (/ /) nil nil nil) ((i j) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/arithmetic/induct.lisp::natp-induct (nil nil nil nil (if) nil nil) ((t) nil (zp recursive-call) nil nil nil nil) ((k) nil (1-) nil nil nil nil) ((k) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))