((/clause-processors/basic-examples.lisp::note-fact-clause-processor (nil nil nil (list) nil nil nil) (nil nil (list) (cons) nil nil nil) ((cl term) nil nil (list) nil nil nil) ((term) nil (quote) nil nil nil nil) ((not) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl (nil nil nil (cond) nil nil nil) (nil nil ((pseudo-termp term) t) nil nil nil nil) (nil nil (value) (prog2$) nil nil nil) (nil nil nil (list cw) (mv) nil nil) ((~%ERROR: Strengthen-cl was supplied an alleged term ~
                      that is not a term in the current ACL2 world.  Consider ~
                      evaluating the following, which will either cause an ~
                      error (with a potentially helpful message) or will ~
                      provide an appropriate term to use:~|~%  ~x0~| t nil state) nil (list `) (cons) nil nil nil) ((cl term) nil nil (list) nil nil nil) ((term t t t state) nil (quote quote quote w) nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl1 (nil nil nil (list) nil nil nil) (nil nil (list) (cons) nil nil nil) ((cl) nil (quote) (list) nil nil nil) (nil nil (quote quote) (equal) nil nil nil) ((not x x) nil nil (equal) nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-program (nil nil nil (let) nil nil nil) (((ctx (quote strengthen-cl-program))) nil nil (er-let*) nil nil nil) (((tterm (translate term t t t ctx (w state) state))) nil (value) nil nil nil nil) (nil nil nil (list) nil nil nil) (nil nil (list) (cons) nil nil nil) ((cl tterm) nil nil (fcons-term*) nil nil nil) ((tterm) nil (quote) nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-program2 (nil nil nil (let) nil nil nil) (((ctx (quote strengthen-cl-program))) nil nil (er-let*) nil nil nil) (((tterm (translate term t t t ctx (w state) state))) nil (value) nil nil nil nil) (nil nil nil (list) nil nil nil) (nil nil (list) (cons) nil nil nil) ((cl tterm) nil nil (fcons-term*) nil nil nil) ((tterm) nil (quote) nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-program3 (nil nil nil (let) nil nil nil) (((ctx (quote strengthen-cl-program))) nil nil (er-let*) nil nil nil) (((tterm (translate term t t t ctx (w state) state))) nil (value) nil nil nil nil) (nil nil nil (list) nil nil nil) (nil nil (list) (cons) nil nil nil) ((cl tterm) nil nil (fcons-term*) nil nil nil) ((tterm) nil (quote) nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-a (nil nil nil (cond) nil nil nil) (nil nil ((pseudo-termp term) t) nil nil nil nil) (nil nil (value) (prog2$) nil nil nil) (nil nil nil (list cw) (mv) nil nil) ((~%ERROR: Strengthen-cl was supplied an alleged term ~
                      that is not a term in the current ACL2 world.  Consider ~
                      evaluating the following, which will either cause an ~
                      error (with a potentially helpful message) or will ~
                      provide an appropriate term to use:~|~%  ~x0~| t nil state) nil (list `) (cons) nil nil nil) ((cl term) nil nil (list) nil nil nil) ((term t t t state) nil (quote quote quote w) nil nil nil nil)) (/clause-processors/basic-examples.lisp::g0 (nil nil (f0) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-b (nil nil nil nil (if) nil nil) (nil nil (g0 value value) nil nil nil nil) ((cl) nil (list) (list) nil nil nil) ((cl) nil (list) (cons) nil nil nil) ((cl term) nil nil (list) nil nil nil) ((term) nil (quote) nil nil nil nil) ((not) nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-c (nil nil (value) nil nil nil nil) (nil nil nil (list) nil nil nil) (nil nil (list) (cons) nil nil nil) ((cl term) nil nil (list) nil nil nil) ((term) nil (quote) nil nil nil nil) ((not) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-d (nil nil (list) nil nil nil nil) ((cl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-e (nil nil (value) nil nil nil nil) (nil nil nil (list) nil nil nil) (nil nil (list) (cons) nil nil nil) ((cl term) nil nil (list) nil nil nil) ((term) nil (quote) nil nil nil nil) ((not) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-f (nil nil nil (list) nil nil nil) ((cl) nil (quote) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::add1 (nil nil (1+) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::strengthen-cl-g (nil nil nil nil (if) nil nil) ((cl) nil nil (evl cons) nil nil nil) ((*t* nil cl) nil (quote) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::gen-cl (nil nil nil nil (case-match) nil nil) ((cl) nil ((((quote f4) &)) &) nil nil nil nil) (nil nil (quote list) nil nil nil nil) ((((f4 y)) cl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::gen-cl-alist (nil nil nil nil (case-match) nil nil) ((cl) nil ((((quote f4) term)) &) nil nil nil nil) ((a) nil (list) nil nil nil nil) (nil nil nil (cons) nil nil nil) (nil nil (quote) (ev3) nil nil nil) ((y term a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::cl-proc-st (nil nil nil nil (mv) nil nil) ((nil st) nil (list) nil nil nil nil) ((cl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::trivial-cl-proc (nil nil (list) nil nil nil nil) ((cl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/basic-examples.lisp::er-clause-processor (nil nil nil nil (mv) nil nil) ((hint state) nil nil nil (if) nil nil) ((hint) nil (list list) nil nil nil nil) ((*true-clause* cl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))