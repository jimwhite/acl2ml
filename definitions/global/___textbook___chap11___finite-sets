((/textbook/chap11/finite-sets.lisp::in-count (nil nil nil (cons) nil nil nil) (nil (0) nil nil (+) nil nil) (nil (1) (acl2-count acl2-count) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/finite-sets.lisp::==-count (nil nil nil (cons) nil nil nil) (nil (1) (car) nil nil nil nil) (nil nil nil (in-count) nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/finite-sets.lisp::induct-hint1 (nil nil nil nil (if) nil nil) ((x) nil (consp) (list) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/finite-sets.lisp::ind-2 (nil nil nil nil (if) nil nil) ((x) nil (consp) nil (if) nil nil) ((x) nil (atom) (list) (if) nil nil) (nil nil (cdr atom) (list) (if recursive-call recursive-call) nil nil) ((x y z y z) nil (cdr atom list cdr) (list list) (recursive-call recursive-call) nil nil) ((y x z x z x) nil (cdr list cdr car) nil (recursive-call recursive-call recursive-call recursive-call) nil nil) ((z x y x y y x) nil (car car car car car car list cdr car) nil nil nil nil)))