((/meta/meta-plus-equal.lisp::cancel_plus-equal$1 (nil nil nil nil (mv-let) nil nil) (nil nil (elt) (cond) (cond) nil nil) ((term) nil ((and (consp (cadr x)) (eq (car (cadr x)) (quote binary-+))) (and (consp (caddr x)) (eq (car (caddr x)) (quote binary-+))) t (and elt (fringe-occur (quote binary-+) elt term)) t) nil nil nil nil) ((x) nil nil (mv mv mv) nil (list) nil) ((nil nil *nil*) nil (caddr cadr cadr caddr quote) (list) (list) nil nil) ((x x x x if elt *0*) nil (quote quote) nil nil (binary-op_tree) nil) ((acl2-numberp equal) (0) (quote quote) (del) nil nil nil)) (/meta/meta-plus-equal.lisp::cancel_plus-equal (nil nil nil nil (if) nil nil) ((x) nil nil (and cond) nil nil nil) (nil nil (consp (and (consp (cadr x)) (eq (car (cadr x)) (quote binary-+)) (consp (caddr x)) (eq (car (caddr x)) (quote binary-+))) t) (eq) nil nil nil) ((x) nil (car quote cancel_plus-equal$1) (let*) nil nil nil) ((x equal x) nil nil ((lt-side (binary-op_fringe (quote binary-+) (cadr x)))) (if) nil nil) ((int x) nil (rt-side int) nil (list) nil nil) (nil nil (quote) (binary-op_fringe bagint) nil (binary-op_tree binary-op_tree) nil)))