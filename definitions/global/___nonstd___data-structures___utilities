((/nonstd/data-structures/utilities.lisp::import-as-macros-fn (nil nil nil (cond) nil nil nil) (nil nil ((atom symbols) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil nil (let recursive-call) nil nil nil) (((sym (car symbols)) package-symbol) nil (` cdr) nil nil nil nil) ((symbols) nil nil nil (DEFMACRO) nil nil) (nil nil (, &REST) (CONS) nil nil nil)) (/nonstd/data-structures/utilities.lisp::string-designator-p (nil nil nil nil (or) nil nil) (nil nil (stringp symbolp) (and) nil nil nil) ((x x) nil (characterp standard-char-p) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::reason-for-not-keyword-option-listp (nil nil nil nil nil (cond) nil) (nil nil ((atom l) (atom (car l)) (and (keywordp (caar l)) (true-listp (car l))) t) nil nil nil nil) (nil nil (recursive-call) (msg) (if if) nil nil) ((the entry ~p0 is not a proper list whose car is a keyword.) nil (null msg msg keywordp recursive-call cdr car) (msg) nil nil nil) ((l BUG! BUG! BUG! it is not a proper list. the entry ~p0 is not a keyword. l l) nil (car cdr car) nil nil nil nil) ((l l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::get-option-check-mutex-mv (nil nil nil nil (cond) nil nil) (nil nil ((atom mutex-options) (and (member (caar mutex-options) options) (member (cdar mutex-options) options)) t) nil nil nil nil) (nil nil nil (mv mv recursive-call) nil nil nil) ((NIL T NIL options) nil (cdr) nil (msg) nil nil) ((it contains the options ~p0 and ~p1 which are mutually ~
              exclusive. mutex-options) nil (caar cdar) nil nil nil nil) ((mutex-options mutex-options) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::get-option-check-syntax (nil nil nil nil nil (mv-let) nil) (nil nil (msg declare) nil (if) (get-option-check-syntax-mv) nil) ((flag option-list valid-options duplicate-options mutex-options msg nil) nil (ignore) nil nil (bomb) nil) ((flag ctx The keyword option list ~p0 is invalid because ~@1 option-list msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::get-option-as-flag-mv (nil nil nil (let) nil nil nil) (((opt (get-option-entry option option-list))) nil nil (cond) nil nil nil) (nil nil (opt t) nil nil nil nil) (nil nil nil (cond mv) nil nil nil) ((NIL NIL) nil ((consp opt) t) nil nil nil nil) (nil nil nil (mv mv) nil nil nil) ((NIL NIL T) nil nil nil (msg) nil nil)) (/nonstd/data-structures/utilities.lisp::get-option-as-flag (nil nil nil nil (mv-let) nil nil) (nil nil (msg) (get-option-as-flag-mv) (if) nil nil) ((flag option option-list msg flag) nil nil nil (bomb) nil nil) ((ctx ~@0 msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::get-option-member-mv (nil nil nil (let) nil nil nil) (((opt (get-option-entry option option-list))) nil nil (cond) nil nil nil) (nil nil (opt t) nil nil nil nil) (nil nil nil (mv) (cond) nil nil) ((NIL default-if-missing) nil ((or (atom opt) (atom (cdr opt))) (or (cddr opt) (not (member (cadr opt) choices))) t) nil nil nil nil) (nil nil nil (mv mv mv) nil nil nil) ((NIL default-if-unspecified NIL NIL) nil (cadr) nil nil (msg) nil)) (/nonstd/data-structures/utilities.lisp::get-option-member (nil nil nil nil (mv-let) nil nil) (nil nil (msg) nil (if) nil (get-option-member-mv)) ((value option option-list choices default-if-missing default-if-unspecified msg value) nil nil nil (bomb) nil nil) ((ctx ~@0 msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::get-option-subset-mv (nil nil nil (let) nil nil nil) (((opt (get-option-entry option option-list))) nil nil (cond) nil nil nil) (nil nil (opt t) nil nil nil nil) (nil nil nil (cond mv) nil nil nil) ((NIL default) nil ((or (atom opt) (not (subsetp (cdr opt) the-set))) t) nil nil nil nil) (nil nil nil (mv mv) nil nil nil) ((NIL NIL) nil (cdr) nil nil (msg) nil)) (/nonstd/data-structures/utilities.lisp::get-option-subset (nil nil nil nil (mv-let) nil nil) (nil nil (msg) nil (if) (get-option-subset-mv) nil) ((value option option-list the-set default msg value) nil nil nil (bomb) nil nil) ((ctx ~@0 msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::get-option-argument-mv (nil nil nil (let) nil nil nil) (((opt (get-option-entry option option-list))) nil nil (cond) nil nil nil) (nil nil (opt t) nil nil nil nil) (nil nil nil (mv) (cond) nil nil) ((NIL default-if-missing) nil ((or (atom opt) (atom (cdr opt))) (or (cddr opt) (case kind (:SYMBOL (not (symbolp (cadr opt)))) (:STRING (not (stringp (cadr opt)))) (:STRING-DESIGNATOR (not (string-designator-p (cadr opt)))) (t nil))) t) nil nil nil nil) (nil nil nil (mv mv mv) nil nil nil) ((NIL default-if-unspecified NIL NIL) nil (cadr) nil nil (msg) nil)) (/nonstd/data-structures/utilities.lisp::get-option-argument (nil nil nil nil (mv-let) nil nil) (nil nil (msg) nil (if) nil (get-option-argument-mv)) ((value option option-list kind default-if-missing default-if-unspecified msg value) nil nil nil (bomb) nil nil) ((ctx ~@0 msg) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::unique-symbols1 (nil nil nil (cond) nil nil nil) (nil nil ((equal n 0) t) nil nil nil nil) ((gen-list) nil nil (let) nil nil nil) (((sym (pack-intern seed seed (coerce (explode-nonnegative-integer counter 10 nil) (quote string))))) nil nil (cond) nil nil nil) (nil nil ((member sym sym-list) t) nil nil nil nil) (nil nil nil nil nil nil (recursive-call recursive-call)) ((n seed gen-list seed sym-list) nil (1+ 1- 1+) (remove cons) nil nil nil)) (/nonstd/data-structures/utilities.lisp::unique-symbols (nil nil (reverse) nil nil nil nil) (nil nil nil nil nil nil (unique-symbols1)) ((n seed sym-list nil) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/data-structures/utilities.lisp::get-guards-from-body (nil nil nil nil (untranslate) nil nil) ((nil nil) nil (conjoin) nil nil nil nil) (nil nil (get-guards-from-body1) nil nil nil nil) ((body) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))