((/leftist-trees/leftist-tree-sort.lisp::ltree-to-list (nil nil nil (cond) nil nil nil) (nil nil ((atom tree) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (find-min-lt recursive-call) nil nil nil nil) ((tree) nil (delete-min-lt) nil nil nil nil) ((tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-sort.lisp::ltree-sort (nil nil (ltree-to-list) nil nil nil nil) (nil nil (build-lt) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/leftist-trees/leftist-tree-sort.lisp::how-many-lt (nil nil nil nil nil (cond) nil) (nil nil ((is-empty-lt tree) (equal e (root-lt tree)) (lexorder (root-lt tree) e) t) nil nil nil nil) (nil (0 0) nil (+) (+) nil nil) (nil (1) nil (recursive-call recursive-call recursive-call recursive-call) nil nil nil) ((e e e e) nil (left-lt right-lt left-lt right-lt) nil nil nil nil) ((tree tree tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))