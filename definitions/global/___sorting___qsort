((/sorting/qsort.lisp::rel (nil nil nil nil nil nil (case)) ((fn) nil (LT LTE GT otherwise) nil nil nil nil) (nil nil nil (and lexorder and lexorder) nil nil nil) ((i j j i) nil (not not) (lexorder lexorder) nil nil nil) ((i j j i) nil nil (equal equal) nil nil nil) ((i j i j) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/sorting/qsort.lisp::filter (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (rel fn (car x) e) t) nil nil nil nil) ((nil) nil nil (cons) (recursive-call) nil nil) ((fn e) nil (car cdr) nil (recursive-call) nil nil) ((x fn e x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/sorting/qsort.lisp::qsort (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (endp (cdr x)) t) nil nil nil nil) ((nil) nil (list) (append) nil nil nil) (nil nil (car recursive-call) (cons) nil nil nil) ((x) nil (car recursive-call) nil (filter) nil nil) ((x) nil (quote cdr car) nil (filter) nil nil) ((LT x x) nil (quote cdr car) nil nil nil nil)) (/sorting/qsort.lisp::all-rel (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (rel fn (car x) e) t) nil nil nil nil) ((t nil) nil nil nil (recursive-call) nil nil) ((fn e) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))