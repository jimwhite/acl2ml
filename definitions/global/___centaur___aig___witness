((/centaur/aig/witness.lisp::aig-termp (nil nil nil (or) nil nil nil) (nil nil nil (member-equal match-term-pattern) nil nil nil) ((x aig-terms x pats) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/witness.lisp::aig-eval-vals (nil nil nil (let) nil nil nil) (((collect (collect-aig-eval-vals-list clause))) nil nil (or) nil nil nil) ((collect) nil (quote) nil nil nil nil) ((arbitrary-vals) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/witness.lisp::instantiate-aig-evals (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((vals) nil (`) nil (recursive-call) nil nil) ((a b) nil (not cdr) nil nil nil nil) ((vals) nil nil (equal) nil nil nil) (nil nil nil (aig-eval aig-eval) nil nil nil) (nil nil (, , , ,) nil nil nil nil)) (/centaur/aig/witness.lisp::instantiate-equals-with-aig-evals (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((clause) nil ((rst-clause (instantiate-equals-with-aig-evals (cdr clause) vals aig-terms patterns))) nil (mv-let) nil nil) (nil nil (lit a) nil (if) (case-match) nil) ((b lit) nil (car ((quote not) ((quote equal) a b)) a &) (and cons cons) nil nil nil) ((clause rst-clause lit rst-clause) nil (disjoin) (mv mv mv) (aig-termp aig-termp) nil nil) ((a b a nil nil a aig-terms patterns b aig-terms patterns) nil (quote) nil (instantiate-aig-evals) nil nil)) (/centaur/aig/witness.lisp::aig-eval-cp (nil nil nil (let*) nil nil nil) (nil nil (list) nil ((aig-terms (car hints))) nil nil) ((clause) nil (patterns vals clause) nil nil nil nil) (nil nil (cadr aig-eval-vals) nil nil (instantiate-equals-with-aig-evals) nil) ((hints clause clause vals aig-terms patterns) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))