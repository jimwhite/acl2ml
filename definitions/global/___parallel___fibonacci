((/parallel/fibonacci.lisp::fib (nil nil nil nil (cond) nil nil) (nil nil ((mbe :logic (or (zp x) (<= x 0)) :exec (<= x 0)) (= x 1) t) nil nil nil nil) (nil (0 1) nil (let) nil nil nil) (nil nil ((a (fib (- x 1)))) (+) nil nil nil) ((a b) nil (b) nil nil nil nil) (nil nil (recursive-call) nil nil nil nil) (nil nil nil (-) nil nil nil)) (/parallel/fibonacci.lisp::pfib (nil nil nil nil (cond) nil nil) (nil nil ((mbe :logic (or (zp x) (<= x 0)) :exec (<= x 0)) (= x 1) t) nil nil nil nil) (nil (0 1) nil nil (plet) nil nil) (nil nil (declare (a (pfib (- x 1)))) (+) nil nil nil) ((a b) nil (granularity b) nil nil nil nil) (nil nil (recursive-call) (>) nil nil nil) ((x) (30) nil (-) nil nil nil)) (/parallel/fibonacci.lisp::pfib-with-pargs (nil nil nil nil (cond) nil nil) (nil nil ((mbe :logic (or (zp x) (<= x 0)) :exec (<= x 0)) (= x 1) t) nil nil nil nil) (nil (0 1) nil (pargs) nil nil nil) (nil nil (declare) (binary-+) nil nil nil) (nil nil (granularity recursive-call recursive-call) nil nil nil nil) (nil nil nil (> - -) nil nil nil) ((x x x) (30 1 2) nil nil nil nil nil)))