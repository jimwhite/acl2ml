((/coi/util/rewrite-equiv.lisp::member? (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((list) nil nil (equal recursive-call) nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rewrite-equiv.lisp::equiv-var-term (nil nil nil nil nil nil (and)) (nil nil (consp consp consp) (equal let) nil nil nil) ((term (term (cadr term))) nil (car quote cdr cadr) nil nil (and) nil) ((term not term term) nil (consp consp) (member? let) nil nil nil) ((equivs) nil (car cdr cddr (lhs (cadr term))) nil (or) nil nil) ((term term term nil) nil (rhs) (and and) nil nil nil) (nil nil (caddr ` `) (good-rewrite-order good-rewrite-order) nil nil nil)) (/coi/util/rewrite-equiv.lisp::find-equiv (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((clause (term (car clause))) nil nil (let) nil nil nil) (((nterm (equiv-var-term equivs term))) nil nil (or) nil nil nil) (nil nil nil (and recursive-call) nil nil nil) ((nterm equivs) nil (cdr) (cons) nil nil nil) ((term nterm clause) nil nil nil nil nil nil)) (/coi/util/rewrite-equiv.lisp::clause-contains (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((clause) nil nil (equal recursive-call) nil nil nil) ((term1 term1) nil (car cdr) nil nil nil nil) ((clause clause) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rewrite-equiv.lisp::replace-1 (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((clause) nil nil (equal cons cons) nil nil nil) ((term1 term2) nil (car cdr car) nil (recursive-call) nil nil) ((clause clause clause term1 term2) nil (cdr) nil nil nil nil) ((clause) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rewrite-equiv.lisp::rewrite-equiv-clause-processor (nil nil nil nil (if) nil nil) (nil nil (consp list) (let) nil nil nil) ((hints clause) nil ((term1 (car hints))) (let) nil nil nil) (((clause (replace-1 term1 term2 clause))) nil (term2) (list) nil nil nil) ((clause) nil (cdr list) nil nil nil nil) ((hints) nil nil (clause-implies) nil nil nil) ((term2 term1) nil nil nil nil nil nil)) (/coi/util/rewrite-equiv.lisp::slow-rewrite-equiv-hint (nil nil nil nil (if) nil nil) ((nil) nil nil (and let) nil nil nil) ((old (default (and old (` (:COMPUTED-HINT-REPLACEMENT ((slow-rewrite-equiv-hint stable-under-simplificationp nil (quote (, equivs)) clause)) :cases (t)))))) nil nil (clause-contains or) nil nil nil) ((old clause default) nil nil (and) nil nil nil) (nil nil nil (or let) nil nil nil) ((old stbl (hint (find-equiv equivs (reverse clause)))) nil nil (or) nil nil nil) ((default) nil nil (and) nil nil nil)) (/coi/util/rewrite-equiv.lisp::slow-rewrite-equiv-hint (nil nil nil nil (if) nil nil) ((nil) nil nil (and let) nil nil nil) ((old (default (and old (` (:COMPUTED-HINT-REPLACEMENT ((slow-rewrite-equiv-hint stable-under-simplificationp nil (quote (, equivs)) clause))))))) nil nil (clause-contains or) nil nil nil) ((old clause default) nil nil (and) nil nil nil) (nil nil nil (or let) nil nil nil) ((stbl old (hint (find-equiv equivs clause))) nil nil (or) nil nil nil) ((default) nil nil (and) nil nil nil)))