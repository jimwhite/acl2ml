((/models/y86/y86-basic/py86/fib.lisp::fib (nil nil nil nil (cond) nil nil) (nil nil ((zp n) (eql n 1) t) nil nil nil nil) (nil (0 1) nil (+) nil nil nil) (nil nil (recursive-call recursive-call) nil nil nil nil) (nil nil nil (- -) nil nil nil) ((n n) (1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::fib-count (nil nil (1+) nil nil nil nil) (nil nil nil nil (cond) nil nil) (nil nil ((zp n) (eql n 1) t) nil nil nil nil) (nil (13 17) nil nil nil nil (+)) (nil (13 5 7) (recursive-call recursive-call) nil nil nil nil) (nil nil nil (- -) nil nil nil) ((n n) (1 2) nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::fib-init-x86-32 (nil nil nil nil nil nil nil) ((nil eip nil *fib-binary*) nil (`) nil (wm32) nil nil) (((:esp , esp) esp n create-x86-32) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::mem-segment-p (nil nil nil (cond) nil nil nil) (nil nil ((atom alist) t) nil nil nil nil) ((t) nil nil nil nil (and) nil) (nil nil (consp n32p) (equal recursive-call) nil nil nil) ((x86-32) nil (car caar cdar cdr) (rm08) nil nil nil) ((alist alist x86-32 alist alist) nil (caar) nil nil nil nil) ((alist) nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::fib-stack-max-bytes (nil nil nil (*) nil nil nil) (nil (4) nil (+) nil nil nil) (nil (1) nil nil (case) nil nil) ((n) nil ((0 1) otherwise) nil nil nil nil) (nil (4) nil (-) nil nil nil) (nil (1) nil (*) nil nil nil) ((n) (5) nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::poised-at-fib-n (nil nil nil (let) nil nil nil) (((esp (rgfi *mr-esp* x86-32))) nil nil nil (and) nil nil) (nil nil (n32p) (equal <=) nil nil nil) ((n) nil (cdr) (+ rm32 -) nil nil nil) ((esp esp x86-32 esp) (3) (fib-stack-max-bytes) (assoc-eq) nil nil nil) ((*fib-symbol-table* n) nil (quote) nil nil nil nil) ((end-of-code) nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::poised-at-fib-base (nil nil nil (and) nil nil nil) (nil nil nil (mem-segment-p equal) nil nil nil) ((*fib-binary* x86-32 eip) nil (eip) nil nil nil nil) ((x86-32) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::poised-at-fib (nil nil nil (and) nil nil nil) (nil nil nil (poised-at-fib-base poised-at-fib-n) nil nil nil) ((eip x86-32 n x86-32) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::reduce-fib (nil nil nil (let) nil nil nil) (((esp (rgfi *mr-esp* x86-32))) nil nil nil (fib-init-x86-32) nil nil) ((esp) nil (cdr) (rm32) nil nil nil) ((esp x86-32) nil nil (assoc-eq) nil nil nil) ((*fib-symbol-table*) nil (quote) nil nil nil nil) ((call-fib) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::disjoint-intervals-p (nil nil nil nil nil nil nil) (nil nil (n32p n32p n32p n32p) (<= <= or) nil nil nil) ((lower1 upper1 lower1 upper1 lower2 upper2 lower2 upper2) nil nil (< <) nil nil nil) ((upper1 lower2 upper2 lower1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::f-stack-okp (nil nil nil (let*) nil nil nil) (nil nil nil (and) nil nil ((max-bytes (fib-stack-max-bytes n)))) (nil nil (min-tos start-of-fib end-of-fib start-of-call end-of-call) nil nil (disjoint-intervals-p disjoint-intervals-p) nil) ((min-tos esp start-of-fib end-of-fib min-tos esp start-of-call end-of-call) nil (cdr cdr cdr) (- +) nil nil nil) ((esp max-bytes start-of-call) (5) nil (assoc-eq assoc-eq assoc-eq) nil nil nil) ((*fib-symbol-table* *fib-symbol-table* *fib-symbol-table*) nil (quote quote quote) nil nil nil nil) ((fib end-of-code call-fib) nil nil nil nil nil nil)) (/models/y86/y86-basic/py86/fib.lisp::fib-equiv-p-is-invariant-induction (nil nil nil nil (if) nil nil) (nil nil (zp) (list) (recursive-call) nil nil) ((n x y) nil (y86-step y86-step 1-) nil nil nil nil) ((x y n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))