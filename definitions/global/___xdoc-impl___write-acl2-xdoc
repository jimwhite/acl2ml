((/xdoc-impl/write-acl2-xdoc.lisp::jared-string-upcase-first (nil nil nil (let) nil nil nil) (((len (length x))) nil nil nil (if) nil nil) ((x) nil nil nil (and concatenate) nil nil) (nil nil (standard-char-p not quote) (< coerce) (subseq) nil nil) ((len string x nil) (0 1) (list quote) (char equal) nil nil nil) ((x string) (0) (char-upcase char-upcase) (char) nil nil nil) ((x) (0) nil (char char) nil nil nil)) (/xdoc-impl/write-acl2-xdoc.lisp::write-a-doc-section (nil nil nil (let) nil nil nil) (nil nil nil ((name (if (stringp (nth 0 doc-tuple)) (intern (nth 0 doc-tuple) ACL2) (nth 0 doc-tuple))) acl2::er-let*) nil nil nil) (nil nil (parent doc-string (short (pprogn (acl2::print-doc-string-part 0 doc-string  *xdoc-doc-markup-table* *xdoc-doc-char-subst-table* doc-fmt-alist channel name t *xdoc-undocumented-topic* nil state) (get-output-stream-string$ channel state nil))) acl2::value) nil nil nil nil) (nil nil (long) (nth nth) nil nil (list)) ((doc-tuple doc-tuple) (1 3) nil (cons cons cons cons cons) (mv-let) nil nil) ((:name name :parents :base-pkg :short :long long) nil (ln list jared-string-upcase-first) (pprogn) (if) nil nil) ((state doc-string  *xdoc-doc-markup-table* *xdoc-doc-char-subst-table* doc-fmt-alist channel :par *xdoc-undocumented-topic* *xdoc-vp* state parent name short) (1) (car quote) (equal) (get-output-stream-string$) nil nil)) (/xdoc-impl/write-acl2-xdoc.lisp::xdoc-alist1 (nil nil nil (cond) nil nil nil) (nil nil ((endp doc-alist) t) nil nil nil nil) (nil nil (acl2::value) (acl2::er-let*) nil nil nil) ((acc (entry (write-a-doc-section (car doc-alist) fmt-alist channel state))) nil nil nil nil nil (recursive-call)) ((fmt-alist channel state) nil (cdr) (cons) nil nil nil) ((doc-alist entry acc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/write-acl2-xdoc.lisp::filter-doc-alist (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((doc-alist) nil ((doc-tuple (car doc-alist))) nil (if) nil nil) (nil nil (name) (member recursive-call cons) nil nil nil) ((name skip-topics skip-topics doc-tuple) nil (cdr) (recursive-call) (if) nil nil) ((doc-alist skip-topics) nil (stringp cdr) (intern nth) nil nil nil) ((ACL2 doc-tuple doc-alist) (0) nil (nth nth) nil nil nil)) (/xdoc-impl/write-acl2-xdoc.lisp::write-xdoc-alist-fn (nil nil nil (acl2::state-global-let*) nil nil nil) (nil nil ((acl2::fmt-hard-right-margin 500 acl2::set-fmt-hard-right-margin)) (let) nil nil nil) (((doc-alist (global-val (quote acl2::documentation-alist) (acl2::w state)))) nil nil (acl2::fmt-soft-right-margin) (mv-let) nil nil) ((acl2::set-fmt-soft-right-margin) (480) (channel) (acl2::er-let*) (open-output-channel) nil nil) ((state :string :object state (result (xdoc-alist1 (filter-doc-alist skip-topics doc-alist) (xdoc-fmt-alist doc-alist nil) channel state nil))) nil nil nil (pprogn) nil nil) (nil nil (acl2::value) (close-output-channel cond) nil nil nil) ((channel state) nil (write-p t) (and) nil nil nil)) (/xdoc-impl/write-acl2-xdoc.lisp::xdoc-entry-fn (nil nil nil nil (cond) nil nil) (nil nil ((endp xdoc-alist) (equal name (cdr (assoc-eq :name (car xdoc-alist)))) t) nil nil nil nil) ((nil) nil (car) (recursive-call) nil nil nil) ((xdoc-alist name) nil (cdr) nil nil nil nil) ((xdoc-alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))