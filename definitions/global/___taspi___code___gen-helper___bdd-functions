((/taspi/code/gen-helper/bdd-functions.lisp::q-or (nil nil nil nil (if) nil nil) (nil nil (atom) nil (if if) nil nil) ((x) nil (atom atom) (or let) (if if) nil nil) ((y x y x t y y y t x) nil ((l (q-or (car x) (car y)))) (qcons) nil nil nil) ((l r) nil (r) nil nil nil nil) (nil nil nil (recursive-call) nil nil nil) (nil nil (cdr cdr) nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::qs-subset (nil nil nil nil (cond) nil nil) (nil nil ((atom x) (atom y) t) nil nil nil nil) (nil nil nil (and) (if if) nil nil) ((x t y t nil) nil nil (eq recursive-call recursive-call) nil nil nil) ((y t) nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::qs-subset-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil nil (qs-subset recursive-call) nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::q-not (nil nil nil nil (if) nil nil) (nil nil (atom not) (hons) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::q-and-c2 (nil nil nil nil (if) nil nil) (nil nil (atom) nil (if if) nil nil) ((x) nil (atom atom) (and let) (if if) nil nil) ((y x x nil y y nil x) nil (not q-not (l (q-and-c2 (car x) (car y)))) (qcons) nil nil nil) ((y y l r) nil (r) nil nil nil nil) (nil nil nil (recursive-call) nil nil nil) (nil nil (cdr cdr) nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::q-and (nil nil nil nil (if) nil nil) (nil nil (atom) nil (if if) nil nil) ((x) nil (atom atom) (and let) (if if) nil nil) ((y x y x y nil y y x nil) nil ((l (q-and (car x) (car y)))) (qcons) nil nil nil) ((l r) nil (r) nil nil nil nil) (nil nil nil (recursive-call) nil nil nil) (nil nil (cdr cdr) nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::q-no-conflicts (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((list) nil nil (q-and and recursive-call) nil nil nil) ((x x) nil (car cdr) (qs-subset recursive-call) nil nil nil) ((list x x list) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::q-no-conflicts-gen (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((list) nil nil (q-and and recursive-call) nil nil nil) ((x x) nil (car cdr) (or recursive-call) nil nil nil) ((list x list) nil (cdr) (qs-subset qs-subset) nil nil nil) ((x x list) nil (car car) nil nil nil nil) ((list list) nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::q-no-conflicts-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil (recursive-call) (q-no-conflicts) nil nil nil) (nil nil (car cdr cdr) nil nil nil nil) ((list list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::q-no-conflicts-list-gen (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil (recursive-call) (q-no-conflicts-gen) nil nil nil) (nil nil (car cdr cdr) nil nil nil nil) ((list list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::subtrees-implying (nil nil nil nil (cond) nil nil) (nil nil ((atom l) (qs-subset (car l) branch) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((branch) nil (car cdr) (recursive-call) nil nil nil) ((l branch l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::subtrees-not-implying (nil nil nil nil (cond) nil nil) (nil nil ((atom l) (not (qs-subset (car l) branch)) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((branch) nil (car cdr) (recursive-call) nil nil nil) ((l branch l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::valid-bdd (nil nil nil nil (if) nil nil) (nil nil (consp) (or) (if) nil nil) ((x) nil (consp) (equal equal) (if if) nil nil) ((x t x nil) nil (car consp consp) (and and and) (and) nil nil) ((x) nil (cdr recursive-call recursive-call recursive-call cdr recursive-call not) (or or or or) nil nil nil) ((x x) nil (car cdr car cdr) (equal equal equal equal equal equal equal equal equal) nil nil nil) ((x x t nil x t nil x t nil t nil) nil (cdr cdr car car car car cdr cdr car cdr) nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::valid-bdd-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil (valid-bdd recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/bdd-functions.lisp::qs-subset-pop (nil nil nil nil (if) nil nil) (nil nil (consp) nil (if if) nil nil) ((x x t) nil (consp) (and equal) (if) nil nil) ((y y y t) nil nil (recursive-call recursive-call and and) nil nil nil) (nil nil (car car cdr cdr) (recursive-call recursive-call recursive-call recursive-call) nil nil nil) ((x y x y t t nil nil) nil (car cdr car cdr) nil nil nil nil) ((x x x x) nil nil nil nil nil nil)))