((/taspi/code/gen-helper/extra.lisp::bind-free-binding-for-flag (nil nil (`) nil nil nil nil) ((((, var) quote (, val))) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::build-fast-alist-from-alist (nil nil nil nil (cond) nil nil) (nil nil ((atom l) (consp (car l)) t) nil nil nil nil) ((acc) nil nil (recursive-call) (hons-acons) nil nil) ((acc) nil (caar cdar cdr) (recursive-call) nil nil nil) ((l l acc l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::tree-measure (nil nil nil nil (make-ord) nil nil) (nil (1) (1+) nil (if) nil nil) ((flg) (1 0) (acl2-count) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::tree-p-induction (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) ((nil nil) nil (atom atom) (recursive-call prog2$) nil nil nil) ((x x nil x) nil nil (recursive-call recursive-call) nil nil nil) ((t nil) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::evens-gen (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((x) nil (consp list) (cons) nil nil nil) (nil nil (cdr car recursive-call car) nil nil nil nil) ((x x x) nil (cddr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::odds-gen (nil nil nil nil (if) nil nil) ((nil) nil (consp evens-gen) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::app (nil nil nil nil (if) nil nil) ((y) nil (consp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::flatten (nil nil nil nil (if) nil nil) (nil nil (consp list) (app) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::rev (nil nil nil nil (if) nil nil) ((nil) nil (consp) (app) nil nil nil) ((x) nil (recursive-call list) nil nil nil nil) (nil nil (cdr car) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::my-join (nil nil nil nil (if) nil nil) ((Error in second branch of my-join) nil (consp) nil (if) nil nil) ((args Error in my-join) nil (consp) nil (if) nil nil) (nil nil (cdr consp) (cons cons) nil nil nil) ((args fn fn args) nil (cddr) (cons) nil nil nil) ((args) nil (car) (cons) nil nil nil) ((args nil) nil nil (recursive-call) nil nil nil)) (/taspi/code/gen-helper/extra.lisp::nth-gen (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((l) nil (zp car) (recursive-call) nil nil nil) ((n l) nil (cdr) (-) nil nil nil) ((n l) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::alistp-gen (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil (consp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::strip-cars-gen (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::strip-cdrs-gen (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil (cdr recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/gen-helper/extra.lisp::del-pair (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((l) nil (cdr) (equal cons) nil nil nil) ((x l) nil (caar car) (recursive-call) nil nil nil) ((l l x) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))