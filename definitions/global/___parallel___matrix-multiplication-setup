((/parallel/matrix-multiplication-setup.lisp::transpose-fast-aux (nil nil nil nil (if) nil nil) (nil nil (endp) (mv let) nil nil nil) ((matrix nil nil) nil ((element-to-append (caar matrix))) nil (mv-let) nil nil) (nil nil (new-row acc recursive-call) (mv) nil nil nil) ((new-row-list) nil (cdar cdr) (cons cons) nil nil nil) ((matrix matrix element-to-append acc new-row new-row-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/matrix-multiplication-setup.lisp::transpose-fast (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (mv-let) nil nil) (nil nil (car new-row transpose-fast-aux) (cons) nil nil nil) ((matrix remaining-matrix matrix new-row) nil (recursive-call) nil nil nil nil) ((remaining-matrix) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/matrix-multiplication-setup.lisp::dot-product (nil nil nil nil (if) nil nil) ((acc) nil (endp) nil (recursive-call) nil nil) ((rowA) nil (cdr cdr) (+) nil nil nil) ((rowA colB acc) nil nil (*) nil nil nil) (nil nil (car car) nil nil nil nil) ((rowA colB) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/matrix-multiplication-setup.lisp::multiply-matrices-row (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((B-left) nil nil (recursive-call) (dot-product) nil nil) ((rowA rowA) (0) (car cdr) nil nil nil nil) ((B-left B-left) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/matrix-multiplication-setup.lisp::make-matrix-aux (nil nil nil nil (cond) nil nil) (nil nil ((equal curr-row rows) (equal curr-col cols) t) nil nil nil nil) ((big-acc) nil nil nil nil nil nil) ((rows cols nil 64bit-flag rows cols curr-row big-acc 64bit-flag) (0) (1+ 1+) (cons cons) nil nil nil) ((curr-row row-acc big-acc curr-col row-acc) nil nil (mod) nil nil nil) (nil nil nil nil (+ if) nil nil) ((64bit-flag) (3000 300) nil (*) (* *) nil nil)) (/parallel/matrix-multiplication-setup.lisp::make-matrix (nil nil nil nil nil nil nil) ((rows cols nil nil 64bit-flag) (0 0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/matrix-multiplication-setup.lisp::identity-matrix-aux (nil nil nil (cond) nil nil nil) (nil nil ((zp i) t) nil nil nil nil) ((a) nil nil nil (recursive-call) nil nil) ((zerow) nil nil (- cons) nil nil nil) ((i a) (1) nil nil (update-nth) nil nil) ((zerow) (1) nil (-) nil nil nil) ((i) (1) nil nil nil nil nil)) (/parallel/matrix-multiplication-setup.lisp::identity-matrix (nil nil nil nil (identity-matrix-aux) nil nil) ((n nil) nil nil nil (make-list) nil nil) ((n :initial-element) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))