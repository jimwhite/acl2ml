((/models/jvm/m1/bexpt.lisp::ok-inputs (nil nil nil (and) nil nil nil) (nil nil (natp natp) nil nil nil nil) ((n m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::theta (nil nil nil (expt) nil nil nil) ((n m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::helper (nil nil nil nil (if) nil nil) ((a) nil (zp) nil (if) nil nil) ((m) nil nil (equal) (recursive-call recursive-call) nil nil) ((a n) (0) nil (mod * / - *) nil nil nil) ((m n n m m n a) (2 2 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::final-n (nil nil nil nil (if) nil nil) ((n) nil (zp) nil (if) nil nil) ((m) nil nil (equal recursive-call recursive-call) nil nil nil) ((n) (0) nil (mod * / -) nil nil nil) ((m n n m m) (2 2 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::fn (nil nil nil nil (helper) nil nil) ((n m) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::even-loop-clk (nil nil nil nil (if) nil nil) (nil (5) (zp) nil (if) nil nil) ((m) (9) nil (equal clk+) nil nil nil) ((m) (1 11) (recursive-call) nil nil nil nil) (nil nil nil (-) nil nil nil) ((m) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::even-clk (nil nil nil (clk+) nil nil nil) (nil (2) (even-loop-clk) nil nil nil nil) ((m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::loop-clk (nil nil nil nil (if) nil nil) (nil (3) (zp) nil (if) nil nil) ((m) nil nil (equal clk+ clk+) nil nil nil) (nil (0 2 2) nil (mod clk+ clk+) nil nil nil) ((m) (2) (even-clk even-clk) (clk+ clk+) nil nil nil) ((m m) (10 10) (recursive-call recursive-call) nil nil nil nil) (nil nil nil (* -) nil nil nil)) (/models/jvm/m1/bexpt.lisp::clk (nil nil nil (clk+) nil nil nil) (nil (2) (loop-clk) nil nil nil nil) ((m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m1/bexpt.lisp::test (nil nil nil (let) nil nil nil) (((sf (m1 (make-state 0 (list n m) nil *pi*) (clk m)))) nil nil nil (list) nil nil) (nil nil nil (list list) nil (list) nil) ((:pc :locals :stack) nil (pc quote next-inst locals stack) nil nil nil nil) ((sf --> sf sf sf) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))