((/hacking/redefun.lisp::chk-acceptable-redefun (nil nil nil (er-let*) nil nil nil) (((tuple (chk-acceptable-defuns (list def) ctx wrld state))) nil nil (assert$) nil nil nil) (nil nil nil (equal let*) nil nil nil) (nil (21) (length) nil nil nil nil) ((tuple) nil (new-wrld old-symbol-class new-symbol-class old-formals new-formals old-stobjs-in new-stobjs-in old-stobjs-out new-stobjs-out (eql old-symbol-class 0) (nth 19 tuple) (not (eq (quote :program) old-symbol-class)) (not (eq (quote :program) new-symbol-class)) (not (equal new-formals old-formals)) (not (equal new-stobjs-in old-stobjs-in)) (not (equal new-stobjs-out old-stobjs-out)) t) nil nil nil nil) (nil nil (value) (nth nth) (er er) (er er er) (getprop getprop getprop getprop getprop getprop getprop er er)) ((tuple name wrld tuple name wrld name new-wrld name wrld name new-wrld name wrld name new-wrld soft ctx No existing definition: ~x0 name soft ctx Please do not redefun a non-executable function.  The ~
                  offending definition is: ~x0. def soft ctx Old definition should have defun-mode :program.  Sorry. soft ctx New definition should have defun-mode :program.  Sorry. soft ctx Please use the same formal parameter list when redefining. ~
                  Previous formals: ~x0 old-formals soft ctx New definition should have the same stobjs-in.Previously, ~
                  ~x0.  Specified, ~x1. old-stobjs-in new-stobjs-in soft ctx New definition should have the same stobjs-out.Previously, ~
                  ~x0.  Specified, ~x1. old-stobjs-out new-stobjs-out :invisible) (18 0 15 0 0 0 0 0 0) (quote quote quote quote quote quote quote quote quote quote quote quote quote quote) nil nil nil nil)))