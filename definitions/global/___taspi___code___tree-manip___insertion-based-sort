((/taspi/code/tree-manip/insertion-based-sort.lisp::get-min-key (nil nil nil nil (if) nil nil) ((key) nil (atom) (let) nil nil nil) ((alst (index (cdr (het (caar alst) taxon-index-alist)))) nil nil nil (if) nil nil) (nil nil nil (<) nil (recursive-call recursive-call) nil) ((index current-min index taxon-index-alist key current-min taxon-index-alist) nil (cdr caar cdr) nil nil nil nil) ((alst alst alst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::greater-all (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil nil (< recursive-call) nil nil nil) ((x x) nil (cdar cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::sort-the-alist-by-insertion (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((alst nil) nil (mbt) (let) nil nil nil) (((min-key (get-min-key alst nil length-taxon-index-alist taxon-index-alist))) nil nil (hons) nil nil (and)) (nil nil (not alistp-gen good-taxon-index-halist) (greater-all subset assoc-hqual) (recursive-call) nil nil) ((length-taxon-index-alist taxon-index-alist alst taxon-index-alist min-key alst taxon-index-alist length-taxon-index-alist) nil (strip-cars-gen get-taxa-from-taxon-index) (member-gen del-pair) nil nil nil) ((nil alst taxon-index-alist min-key alst) nil (strip-cars-gen) nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::cluster-sort-by-insertion (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) ((x x) nil (atom atom) (let* hons) nil nil nil) ((x x) nil ((list-of-sorted-elements (cluster-sort-by-insertion nil x taxon-index-alist length-taxon-index-alist)) strip-cdrs-gen) nil nil (recursive-call recursive-call) nil) ((t taxon-index-alist length-taxon-index-alist nil taxon-index-alist length-taxon-index-alist) nil (least-key-value-elements car cdr) nil (sort-the-alist-by-insertion) nil nil) ((least-key-value-elements taxon-index-alist length-taxon-index-alist x x) nil (pair-key-with-value) nil nil nil nil) ((list-of-sorted-elements) nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::order-by-insertion-help (nil nil nil nil nil (cluster-sort-by-insertion) nil) ((flg x taxon-index-alist length-taxon-index-alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::max-list-helper (nil nil nil nil (if) nil nil) ((curMax) nil (consp) nil (if) nil nil) ((list curMax) nil nil (and) (if) nil nil) (nil nil (rationalp rationalp) (< recursive-call recursive-call) nil nil nil) ((curMax curMax curMax) nil (car car car cdr cdr) nil nil nil nil) ((list list list list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::max-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) (max-list-helper) nil nil nil) ((list) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::order-by-insertion (nil nil nil (let) nil nil nil) (((max (max-list (strip-cdrs-gen taxon-index-alist)))) nil nil nil (if) nil nil) ((Error: Need valid taxon-index-alist in order-by-insertion) nil nil (and) nil (order-by-insertion-help) nil) ((t x taxon-index-alist) nil (rationalp 1+) (greater-all) nil nil nil) ((max taxon-index-alist max) nil (1+) nil nil nil nil) ((max) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::order-by-insertion-one-level (nil nil nil (let) nil nil nil) (((max (max-list (strip-cdrs-gen taxon-index-alist)))) nil nil nil (if) nil nil) ((Error: Need rational max in order-by-insertion-one-level) nil (rationalp) (let) nil nil nil) ((max (least-key-value-elements (pair-key-with-value x))) nil nil nil (if) nil nil) ((Error: Need greater-all in order-by-insertion-one-level) nil (hopy) (greater-all) nil nil nil) ((taxon-index-alist) nil (1+ strip-cdrs-gen) nil nil nil nil) ((max) nil nil nil (sort-the-alist-by-insertion) nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::check-less (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil nil (<=) (recursive-call) nil nil) ((x tia) nil (cdr cdr cdr) nil nil nil nil) ((list) nil nil (assoc-hqual assoc-hqual) nil nil nil) ((x tia tia) nil (caar) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::get-min-key2 (nil nil nil nil (if) nil nil) ((key) nil (consp) nil (if) nil nil) ((alst) nil nil (<) (recursive-call recursive-call) nil nil) ((tia key tia) nil (cdr cdr cdr caar cdr) nil nil nil nil) ((alst alst alst) nil nil (assoc-hqual assoc-hqual) nil nil nil) ((tia key tia) nil (caar) nil nil nil nil) ((alst) nil nil nil nil nil nil)) (/taspi/code/tree-manip/insertion-based-sort.lisp::order-each-by-insertion (nil nil nil nil (if) nil nil) ((nil) nil (atom) (hons) nil nil nil) ((input-trees) nil nil (order-by-insertion) (recursive-call) nil nil) ((taxon-index-alist taxon-index-alist length-taxon-index-alist) nil (car cdr) nil nil nil nil) ((input-trees input-trees) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))