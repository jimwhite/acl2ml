((/nonstd/nsa/alternating-series.lisp::sign (nil nil nil nil (if) nil nil) (nil (-1) nil (<) (if) nil nil) ((x) (0 0 1) nil (=) nil nil nil) ((x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/alternating-series.lisp::opposite-signs-p (nil nil nil nil (or) nil nil) (nil nil nil (= = equal) nil nil nil) ((x y) (0 0) (sign -) nil nil nil nil) ((x) nil (sign) nil nil nil nil) ((y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/alternating-series.lisp::alternating-sequence-1-p (nil nil nil nil (if) nil nil) ((t) nil (null) nil (if) nil nil) ((lst t) nil (null) (and) nil nil nil) (nil nil (cdr recursive-call) (opposite-signs-p) nil nil nil) ((lst) nil (car cadr cdr) nil nil nil nil) ((lst lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/alternating-series.lisp::alternating-sequence-2-p (nil nil nil nil (if) nil nil) ((t) nil (null) nil (if) nil nil) ((lst t) nil (null) (and) nil nil nil) (nil nil (cdr recursive-call) (or) nil nil nil) ((lst) nil (cdr) (and <) nil nil nil) ((lst) nil (abs abs) (equal equal) nil nil nil) (nil (0 0) (car cadr cadr car) nil nil nil nil)) (/nonstd/nsa/alternating-series.lisp::alternating-sequence-p (nil nil nil (and) nil nil nil) (nil nil (alternating-sequence-1-p alternating-sequence-2-p) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))