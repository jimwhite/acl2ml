((/centaur/aig/aiger.lisp::aiger-gate-listp (nil nil nil nil (if) nil nil) (nil nil (atom) (eq) nil (and) nil) ((x x nil) nil (consp consp recursive-call) (b*) nil nil nil) ((((cons lhs (cons rhs1 rhs2)) (car x))) nil (car cdar cdr) nil nil nil (and)) ((x x x) nil (natp natp natp) (< <=) nil nil nil) ((lhs rhs1 rhs2 rhs1 lhs rhs2 rhs1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aig-to-aiger (nil nil nil (let) nil nil nil) (((lookup (hons-get aig names))) nil nil nil (if) nil nil) ((lookup) nil nil nil nil (mv) nil) ((names maxvar gates aig :true :false :var :inv :and) nil (nfix) (let*) (mv-let mv-let) (mv mv) nil) ((names maxvar gates names maxvar gates) (1 0) (cdr (maxvar (1+ (lnfix maxvar)))) nil (lit left mv-let) (mv recursive-call mv recursive-call) nil) ((lookup lit maxvar gates names maxvar gates names maxvar gates names maxvar gates names maxvar gates names maxvar gates) nil (lit car car) (logxor let*) (hons-acons right) (recursive-call) nil) ((aig lit names aig lit aig names maxvar gates names maxvar gates) (1) (cdr (maxvar (1+ (lnfix maxvar)))) (ash) nil (mv) nil)) (/centaur/aig/aiger.lisp::names-max-entry (nil nil nil nil (if) nil nil) (nil (0) (atom) nil (if) nil nil) ((names) nil (consp recursive-call) (max) nil nil nil) (nil nil (car recursive-call nfix cdr) nil nil nil nil) ((names names) nil (cdr cdar) nil nil nil nil) ((names names) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aig-to-aiger-top (nil nil nil nil (b*) nil nil) (nil nil (fast-alist-free) nil nil ((vars (aig-vars-1pass aig)) mv) nil) (((with-fast names1) names outlit names1 maxvar gates) nil (maxvar names1 (mv outlit names maxvar gates)) nil nil nil nil) (nil nil (len) (pairlis$) nil (aig-to-aiger) nil) ((vars vars aig names1 maxvar nil) nil nil nil (numlist) nil nil) ((maxvar) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::names-numlist-ind (nil nil nil nil (if) nil nil) ((n) nil (atom) (cons) nil nil nil) ((vars start) nil nil nil nil (recursive-call) nil) ((by) nil (cdr 1-) (+) nil nil nil) ((start by vars n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aig-list-to-aiger-tr (nil nil nil nil (if) nil nil) (nil nil (atom) nil (mv-let) (mv) nil) ((aigs names maxvar gates) nil (reverse) nil (lit) (aig-to-aiger) (recursive-call)) ((outs names maxvar gates names maxvar gates names maxvar gates) nil (car cdr) (cons) nil nil nil) ((aigs aigs lit outs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aig-list-to-aiger (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if) nil (aig-list-to-aiger-tr)) ((aigs names maxvar nil gates) nil (atom) nil (mv-let) (mv) nil) ((aigs names maxvar nil gates) nil nil nil (lit mv-let) (aig-to-aiger) nil) ((names maxvar gates names maxvar gates) nil (car) nil (names) (recursive-call mv) nil) ((aigs maxvar outs gates names maxvar gates names maxvar gates) nil (cdr) (cons) nil nil nil) ((aigs lit outs) nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aig-list-to-aiger-top (nil nil nil nil (b*) nil nil) (nil nil (fast-alist-free) nil nil ((vars (aig-vars-1pass aigs)) mv) nil) (((with-fast names1) names outlits names1 maxvar gates) nil (maxvar names1 (mv names maxvar outlits gates)) nil nil nil nil) (nil nil (len) (pairlis$) nil (aig-list-to-aiger) nil) ((vars vars aigs names1 maxvar nil) nil nil nil (numlist) nil nil) ((maxvar) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-list-inputs (nil nil nil nil (numlist) nil nil) ((max) (-2) nil (*) nil nil nil) ((max) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-reverse-map-names (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((names) nil (recursive-call) (and) (hons-acons) nil nil) (nil nil (consp atom cdar caar recursive-call cdr) nil nil nil nil) ((names names names) nil (car caar cdr) nil nil nil nil) ((names names names) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::filter-out-alist-keys (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((lst) nil nil (hons-get recursive-call cons) nil nil nil) ((al al) nil (car cdr car) (recursive-call) nil nil nil) ((lst lst lst al) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aigs-to-aiger (nil nil nil (b*) nil nil nil) (nil nil nil nil nil nil nil) ((pis latch-lits out-lits badstate-lits constraint-lits) nil (latch-names all-aigs vars pis ins names latches maxvar names (mv names maxvar latch-lits gates) (mv names maxvar out-lits gates) (mv names maxvar badstate-lits gates) (mv names & constraint-lits gates) - reverse) nil nil nil nil) ((gates) nil (strip-cars length len flush-hons-get-hash-table-link) (filter-out-alist-keys hons-shrink-alist + hons-shrink-alist) nil (append aig-list-to-aiger aig-list-to-aiger aig-list-to-aiger aig-list-to-aiger) (cwtime)) ((latch-aigs latch-aig-list out-aigs badstate-aigs constraint-aigs :name aig-vars-1pass :mintime vars latch-aigs pis latch-aigs ins latches names latch-aig-list names maxvar nil out-aigs names maxvar gates badstate-aigs names maxvar gates constraint-aigs names maxvar gates names) (1) (aig-vars-1pass) (pairlis$ expt pairlis$) nil nil nil) ((all-aigs pis latch-names) (2 20) nil nil (numlist numlist) nil nil) ((ins latches) (2 2 2) nil (+) nil nil nil)) (/centaur/aig/aiger.lisp::aiger-gates-to-aig-map (nil nil nil nil (if) nil nil) ((map) nil (atom) (b*) nil nil nil) ((gates) nil nil (recursive-call) nil nil nil) ((map) nil (out in1 in2 negatedp1 abs1 negatedp2 abs2 look1 (run-when (not look1)) look2 (run-when (not look2)) aig1 aig2 map cdr) nil nil nil nil) ((gates) nil (caar cadar cddar) (logbitp logand logbitp logand cw cw) (if if if if hons-acons) nil nil) ((gates gates gates in1 in1 in2 in2 Warning: no definition of AIGER literal ~x0 before use~% abs1 Warning: no definition of AIGER literal ~x0 before use~% abs2 negatedp1 negatedp2 out map) (0 -2 0 -2) (list list aig-not cdr aig-not cdr) (eql hons-get eql hons-get aig-and) nil nil nil) ((abs1 abs1 abs1 map abs2 abs2 abs2 map look1 look2 aig1 aig2) (0 0) (cdr cdr) nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-get-lits-tr (nil nil nil nil (if) nil nil) (nil nil (atom reverse) (b*) nil nil nil) ((lits acc) nil nil nil (recursive-call) nil ((lit (car lits)))) ((map) nil (negatedp abs look (run-when (not look)) aig cdr) (cons) nil nil nil) ((lits aig acc) nil nil (logbitp logand cw) (if if) nil nil) ((lit lit Warning: no definition of AIGER literal ~x0~% abs negatedp) (0 -2) (list aig-not cdr) (eql hons-get) nil nil nil) ((abs abs abs map look) (0) (cdr) nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-get-lits (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (if aiger-get-lits-tr) nil nil) ((nil lits map nil) nil (atom) (b*) nil nil nil) ((lits) nil nil (cons) nil nil ((lit (car lits)))) ((aig) nil (negatedp abs look (run-when (not look)) aig) (recursive-call) nil nil nil) ((map) nil (cdr) (logbitp logand cw) (if if) nil nil) ((lit lit Warning: no definition of AIGER literal ~x0~% abs negatedp lits) (0 -2) (list aig-not cdr) (eql hons-get) nil nil nil)) (/centaur/aig/aiger.lisp::aiger-to-aigs (nil nil nil (b*) nil nil nil) (nil nil nil nil nil (mv) nil) ((latch-aigs out-aigs bad-aigs cnstr-aigs) nil (names out-aigs bad-aigs cnstr-aigs latch-aigs -) nil nil nil nil) (nil nil (flush-hons-get-hash-table-link) (aiger-gates-to-aig-map aiger-get-lits aiger-get-lits aiger-get-lits pairlis$) nil nil nil) ((gates names outs names badstates names constraints names latchnames names) nil nil (aiger-get-lits) nil nil nil) ((latches names) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/centaur/aig/aiger.lisp::aiger-write-gates (nil nil nil nil (if) nil nil) ((state) nil (atom) (b*) nil nil nil) ((gates) nil nil nil nil (recursive-call) (((when (or (atom (car gates)) (atom (cdar gates)))) (cw Warning: Malformed gate: ~x0~% gates) (aiger-write-gates (cdr gates) prev stream state)))) ((prev stream state) nil ((cons lhs (cons rhs1 rhs2)) state state prev cdr) ((when (not (and (eql (+ 2 prev) lhs) (< rhs1 lhs) (<= rhs2 rhs1))))) nil nil nil) ((lhs gates) nil (car) nil (aiger-write-delta aiger-write-delta) (recursive-call) (cw)) ((gates Warning: Bad ordering on gate.
               prev: ~x0 lhs: ~x1 rhs1: ~x2 rhs2: ~x3~% prev lhs rhs1 rhs2 prev stream state stream state stream state) nil (cdr) (- -) nil nil nil) ((gates lhs rhs1 rhs1 rhs2) nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::write-ascii-string1 (nil nil nil nil (if) nil nil) ((state) nil nil (<= let) nil nil nil) (((state (write-byte$ (char-code (char str idx)) stream state))) nil (length lnfix) nil nil (recursive-call) nil) ((str idx str stream state) nil (1+) nil nil nil nil) (nil nil (lnfix) nil nil nil nil) ((idx) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::write-ascii-string (nil nil nil nil nil (write-ascii-string1) nil) ((str stream state) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::write-char-separated-ascii-nat-list (nil nil nil nil (if) nil nil) ((state) nil (atom) (b*) nil nil nil) ((lst) nil ((state (write-ascii-nat (car lst) stream state))) nil nil (recursive-call) nil) ((sep stream state) nil (state cdr) nil nil nil nil) ((lst) nil nil nil (write-byte$) nil nil) ((stream state) nil (char-code) nil nil nil nil) ((sep) nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::write-char-separated-ascii-nat-list-no-end (nil nil nil nil (if) nil nil) ((state) nil (atom) (b*) nil nil nil) ((lst) nil ((state (write-ascii-nat (car lst) stream state))) nil nil (recursive-call) nil) ((sep stream state) nil (state cdr) nil nil nil nil) ((lst) nil nil nil (if) nil nil) ((state) nil (consp) nil (write-byte$) nil nil) ((stream state) nil (cdr char-code) nil nil nil nil)) (/centaur/aig/aiger.lisp::drop-trailing-0s (nil nil nil nil (if) nil nil) ((nil) nil (Atom) (let) nil nil nil) ((lst (rest (drop-trailing-0s (cdr lst)))) nil nil nil (if) nil nil) ((rest) nil nil (cons) (if) nil nil) ((rest nil) nil (car list) (eql) nil nil nil) ((lst) (0) (car car) nil nil nil nil) ((lst lst) nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-buf-measure (nil nil nil (+) nil nil nil) (nil nil (non-exec) nil (if) nil nil) ((buf) (1 0) nil (file-measure) nil nil nil) ((stream state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::skip-ascii-chars (nil nil nil (b*) nil nil nil) (nil nil nil (((mv byte buf state) (peek-byte-buf stream buf state))) nil (recursive-call) nil) ((char stream buf state) nil ((when (not (eql byte (char-code char)))) (mv buf state)) nil nil nil nil) (nil nil nil (mv) (skip-byte-buf) nil nil) ((buf state stream buf state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::require-ascii-str1 (nil nil nil nil (if) nil nil) (nil nil nil (<= b*) (mv) nil nil) ((t buf state) nil (length lnfix) (((mv byte buf state) (peek-byte-buf stream buf state))) nil nil (recursive-call)) ((str idx str stream buf state) nil ((mv buf state) 1+) ((when (or (not byte) (not (eql byte (char-code (char str idx))))))) nil nil nil) (nil nil (lnfix) nil (cw mv skip-byte-buf) nil nil) ((Bad: ~x0 ~x1~% nil buf state stream buf state idx) nil nil (char) (if) nil nil) ((str idx byte nil) nil (code-char) nil nil nil nil)) (/centaur/aig/aiger.lisp::require-ascii-str (nil nil nil nil nil nil (require-ascii-str1)) ((str stream buf state) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::read-n-str-separated-nats-tr (nil nil nil nil (if) nil nil) (nil nil (zp) (b*) nil (mv) nil) ((n t buf state) nil (reverse) nil nil (((mv num buf state) (read-ascii-nat stream buf state))) nil) ((acc sep finalp stream buf state) nil ((when (and (zp (1- n)) (not finalp))) (mv ok buf state) (when (not ok)) 1-) (cons) ((when (not num))) nil nil) ((break$ n num acc) nil (cw) nil nil (mv mv require-ascii-str b*) nil) ((Failed to parse number~% nil nil buf state t buf state sep stream buf state ((mv byte buf state) (peek-byte-buf stream buf state)) break$) nil (reverse) (cw) nil (mv) nil) ((Bad separator: ~x0~% byte nil nil buf state) nil nil (cons) nil nil nil)) (/centaur/aig/aiger.lisp::read-n-str-separated-nats (nil nil nil nil nil nil nil) ((n sep finalp stream buf state nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-read-gate (nil nil nil (b*) nil nil nil) (nil nil nil nil nil (mv) nil) ((nil buf state) nil ((when err) (when (int= delta1 0)) (mv err delta2 buf state) (when err) lhs rhs1 rhs2 (when (< rhs2 0))) nil (list*) nil nil) ((lhs rhs1 rhs2) nil nil (+ - -) (read-bytecoded-nat) (mv mv mv mv) nil) ((err nil buf state nil buf state stream buf state err nil buf state prev lhs delta1 rhs1 delta2 nil buf state) (2) (aiger-err aiger-err) nil nil nil nil) ((Malformed gate: delta 0 Malformed gate: diffs too big) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-read-n-gates-aux (nil nil nil nil (if) nil nil) (nil nil (zp) (b*) nil (mv) nil) ((n nil buf state) nil (reverse ((mv err gate buf state) (aiger-read-gate prev stream buf state))) nil nil nil nil) ((acc stream buf state) nil ((when err) 1-) (cons +) nil nil nil) ((n gate acc prev) (2) nil nil nil (mv) nil) ((err nil nil state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-read-n-gates (nil nil nil nil nil nil nil) ((n nil prev stream buf state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-parse (nil nil nil (b*) nil nil nil) (nil nil nil nil (((mv channel state) (open-input-channel fname :byte state))) nil nil) ((err latch-lits out-lits bad-lits cnstr-lits gates state) nil ((when (not channel)) (mv err latch-lits out-lits bad-lits cnstr-lits gates state) state) nil nil nil nil) (nil nil nil (close-input-channel) (aiger-parse-binary) nil nil) ((nil nil nil nil nil state channel nil state channel state) nil (aiger-err) nil nil nil nil) (nil nil nil (msg) nil nil nil) ((AIGER-PARSE: Failed to open file ~x0.~% fname) nil nil nil nil nil nil)) (/centaur/aig/aiger.lisp::aiger-read (nil nil nil (b*) nil nil nil) (nil nil nil nil (((mv err latch-lits out-lits bad-lits cnstr-lits gates state) (aiger-parse fname state))) nil nil) ((nil latch-aigs out-aigs bad-aigs cnstr-aigs state) nil ((when err) (mv latch-aigs out-aigs bad-aigs cnstr-aigs)) nil nil nil nil) (nil nil nil (sneaky-save sneaky-save sneaky-save sneaky-save sneaky-save sneaky-save sneaky-save) nil nil nil) ((err nil nil nil nil state innames latchnames latch-lits out-lits bad-lits cnstr-lits gates innames latchnames latch-lits out-lits bad-lits cnstr-lits gates) nil (quote quote quote quote quote quote quote) nil nil nil nil) ((innames latchnames latch-lits out-lits bad-lits cnstr-lits gates) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))