((/nonstd/meta/meta-times-equal.lisp::cancel_times-equal$1 (nil nil nil nil (mv-let) nil nil) (nil nil (elt) (cond) (cond) nil nil) ((term) nil ((and (consp (cadr x)) (eq (car (cadr x)) (quote binary-*))) (and (consp (caddr x)) (eq (car (caddr x)) (quote binary-*))) t (and elt (fringe-occur (quote binary-*) elt term)) t) nil nil nil nil) ((x) nil nil (mv mv mv) nil (list) nil) ((nil nil *nil*) nil (caddr cadr cadr caddr quote) (list) nil (list) nil) ((x x x x if elt *t*) nil (quote quote) nil (list list) nil nil) ((acl2-numberp if elt *0* *1*) nil (quote quote) nil nil (binary-op_tree) nil)) (/nonstd/meta/meta-times-equal.lisp::formal-some-zerop (nil nil nil nil (cond) nil nil) (nil nil ((endp (cdr lst)) (memb (car lst) (cdr lst)) t) nil nil nil nil) (nil nil (recursive-call) nil (list) (list) nil) ((*0* *t*) nil (quote cdr quote recursive-call) (list) (list) nil nil) ((equal lst if *0*) nil (quote car quote cdr) (list) nil nil nil) ((fix lst equal lst) nil (quote car) nil nil nil nil) ((fix lst) nil nil nil nil nil nil)) (/nonstd/meta/meta-times-equal.lisp::cancel_times-equal (nil nil nil nil (if) nil nil) ((x) nil nil (and cond) nil nil nil) (nil nil (consp (and (consp (cadr x)) (eq (car (cadr x)) (quote binary-*)) (consp (caddr x)) (eq (car (caddr x)) (quote binary-*))) t) (eq) nil nil nil) ((x) nil (car quote cancel_times-equal$1) (let*) nil nil nil) ((x equal x) nil nil ((lt-side (binary-op_fringe (quote binary-*) (cadr x)))) (if) nil nil) ((int x) nil (rt-side int) nil nil (list) nil) ((*t*) nil (quote formal-some-zerop) (binary-op_fringe bagint) (list) nil nil)))