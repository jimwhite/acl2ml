(nil (/ordinals/proof-of-well-foundedness.lisp::o< (nil nil nil nil nil nil (cond)) (nil nil ((o-finp x) (o-finp y) (not (equal (o-first-expt x) (o-first-expt y))) (not (= (o-first-coeff x) (o-first-coeff y))) t) nil nil nil nil) ((nil) nil nil (or recursive-call < recursive-call) nil nil nil) (nil nil (o-infp o-first-expt o-first-expt o-first-coeff o-first-coeff o-rst o-rst) (<) nil nil nil) ((y x y x y x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/ordinals/proof-of-well-foundedness.lisp::o-p (nil nil nil nil (if) nil nil) (nil nil (o-finp natp) nil nil nil nil) ((x x) nil (consp recursive-call not posp recursive-call) (o<) nil nil nil) (nil nil (car o-first-expt o-first-coeff o-rst o-first-expt o-first-expt) (eql) nil nil nil) ((x x x x x) (0) (o-first-expt o-rst) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/ordinals/proof-of-well-foundedness.lisp::od (nil nil nil nil (if) nil nil) (nil (0) (o-finp 1+) nil nil nil nil) ((l) nil (recursive-call) nil nil nil nil) (nil nil (o-first-expt) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/ordinals/proof-of-well-foundedness.lisp::od-1 (nil nil nil nil (if) nil nil) ((y) nil (o-finp) (recursive-call) nil nil nil) ((x) nil (o-first-expt o-first-expt) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))