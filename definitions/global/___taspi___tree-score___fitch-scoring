((/taspi/tree-score/fitch-scoring.lisp::fitch-combine-scores1 (nil nil nil nil (if) nil nil) (nil nil (atom) (mv) (mv-let) nil nil) ((first-states nil nil) nil (cdr-score) (let) (recursive-call) nil nil) ((cdr-states first-score (car-score (plus-nil-inf (min-nil-inf (car first-states) (plus-nil-inf 1 first-score)) (car rest-states)))) nil (cdr cdr) (mv) nil nil nil) ((first-states rest-states) nil nil (min-nil-inf cons) nil nil nil) ((car-score cdr-score car-score cdr-states) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/fitch-scoring.lisp::fitch-combine-scores (nil nil nil nil (if) nil nil) (nil nil (atom) (mv mv2-cons) nil nil nil) ((first-scores nil nil) nil nil nil (fitch-combine-scores1) (recursive-call) nil) ((alpha-len) nil (car car car cdr cdr cdr) nil nil nil nil) ((first-scores first-states rest-states first-scores first-states rest-states) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/fitch-scoring.lisp::fitch-initial-scorelist1 (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((scores) nil nil (min-nil-inf recursive-call) nil nil nil) ((min-score) nil (car cdr) (plus-nil-inf) nil nil nil) ((min-score scores scores) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/fitch-scoring.lisp::fitch-initial-scorelist (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((min-scores) nil nil (fitch-initial-scorelist1) (recursive-call) nil nil) ((alpha-len) nil (car car cdr cdr) nil nil nil nil) ((min-scores scores min-scores scores) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/fitch-scoring.lisp::fitch-score-subtree (nil nil nil nil (if) nil nil) ((flg) nil nil nil (if if) nil nil) (nil nil (atom mbt) (let mv) (if) nil (recursive-call)) ((tree (seq (cdr (het tree sequences))) nil tree sequences cssl-map alpha-len nil nil) nil (consp atom) (mv) (mv-let) (mv-let) nil) ((tree) nil (zero-scores cdr scores rest-scores declare) (mv) (make-leaf-score-list mv-let) nil (recursive-call recursive-call)) ((seq seq cssl-map alpha-len tree state-scores t sequences cssl-map alpha-len scores rest-states nil sequences cssl-map alpha-len) nil (car cdr ignore first-scores) nil (fitch-initial-scorelist) (fitch-combine-scores) (recursive-call)) ((tree scores state-scores alpha-len tree rest-scores first-states t sequences cssl-map alpha-len first-scores first-states rest-states alpha-len) nil (car) nil nil nil nil)) (/taspi/tree-score/fitch-scoring.lisp::fitch-score-tree (nil nil nil nil nil (mv-let) nil) (nil nil (mins declare sum-list) nil nil nil (fitch-score-subtree)) ((scores t tree sequences cssl-map alpha-len mins) nil (ignore) nil nil nil nil) ((scores) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/fitch-scoring.lisp::fitch-score-trees (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((trees) nil nil nil nil (fitch-score-tree recursive-call) nil) ((sequences cssl-map alpha-len sequences cssl-map alpha-len) nil (car cdr) nil nil nil nil) ((trees trees) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))