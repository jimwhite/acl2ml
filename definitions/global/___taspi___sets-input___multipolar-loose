((/taspi/sets-input/multipolar-loose.lisp::get-kernal-splits (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((bfringes-left) nil nil (q-no-conflicts-gen cons recursive-call) nil nil nil) ((all-bfringes all-bfringes) nil (car car cdr) (recursive-call) nil nil nil) ((bfringes-left bfringes-left all-bfringes bfringes-left) nil (cdr) nil nil nil nil) ((bfringes-left) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::determine-incompat (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((list) nil nil (cons recursive-call) (and) nil nil) ((bfringe) nil (not not car cdr) (q-and recursive-call) nil nil nil) ((bfringe list bfringe list) nil (car cdr) (qs-subset qs-subset) nil nil nil) ((list bfringe bfringe list) nil (car car) nil nil nil nil) ((list list) nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::build-incompat-graph (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((bfringes-left) nil nil (cons recursive-call) nil nil nil) ((all-bfringes) nil (car cdr) (determine-incompat) nil nil nil) ((bfringes-left all-bfringes bfringes-left) nil (car) nil nil nil nil) ((bfringes-left) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::get-used-colors (nil nil nil nil (if) nil nil) (nil nil (alistp-gen quote) nil (if) nil nil) ((ans nil need-alistp-ans-in-get-used) nil (consp) (let) nil nil nil) ((vertices (color-cons (assoc-hqual (car vertices) ans))) nil nil nil (if) nil nil) (nil nil (consp) (cons recursive-call) nil nil nil) ((color-cons ans) nil (cdr cdr) (recursive-call) nil nil nil) ((color-cons ans vertices) nil (cdr) nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::integer-listp-gen (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil (integerp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::find-color-less-than-num? (nil nil nil nil (if) nil nil) (nil nil nil (and mv) (if) nil nil) ((nil nil) nil (integer-listp-gen integerp consp) (mv) (if) nil nil) ((used-colors num cur-list nil nil) nil nil (member-gen mv) (recursive-call) nil nil) ((used-colors used-colors t) nil (car cdr nfix car) nil nil nil nil) ((cur-list cur-list num cur-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::list-down-to-zero (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((cur) nil (1- recursive-call) nil nil nil nil) ((cur) nil (1-) nil nil nil nil) ((cur) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::build-coloring (nil nil nil nil (if) nil nil) (nil nil nil (mv) (and if) nil nil) (nil (0) (natp alistp-gen alistp-gen consp quote) (let mv) nil nil nil) ((num ans incompat-graph-all vertices (used-colors (get-used-colors (cdr (assoc-hqual (car vertices) incompat-graph-all)) ans)) ans num bad-input-to-build-coloring) nil nil nil (mv-let) nil nil) (nil nil (found-color?) nil (find-color-less-than-num? if) nil nil) ((color used-colors num found-color?) nil (list-down-to-zero) nil nil (recursive-call recursive-call) nil) ((num incompat-graph-all num incompat-graph-all) nil (cdr cdr 1+) (cons cons) nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::get-fringes-matching-color (nil nil nil nil (if) nil nil) (nil nil (alistp-gen quote) nil (if) nil nil) ((coloring nil need-alistp-gen-coloring-in-get-fringes-matching-color) nil (consp) nil (if) nil nil) ((coloring) nil nil (equal cons recursive-call) nil nil nil) ((color color) nil (cdar caar cdr) (recursive-call) nil nil nil) ((coloring coloring color coloring) nil (cdr) nil nil nil nil) ((coloring) nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::remove-from-alist (nil nil nil nil (if) nil nil) (nil nil (alistp-gen quote) nil (if) nil nil) ((alist nil need-alistp-gen-in-remove-from-alist) nil (consp) nil (if) nil nil) ((alist) nil nil (member-gen recursive-call cons) nil nil nil) ((keys-to-be-removed keys-to-be-removed) nil (caar cdr car) (recursive-call) nil nil nil) ((alist alist alist keys-to-be-removed) nil (cdr) nil nil nil nil) ((alist) nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::build-trees-from-coloring (nil nil nil nil (if) nil nil) ((nil) nil nil nil (or if) nil nil) (nil nil (zp not alistp-gen quote) (>) (if) nil nil) ((numPoles coloring nil need-an-alist-coloring-for-build-trees-from-coloring) (2) (int-symlist len consp) (let*) nil nil nil) ((taxa-list taxa-list coloring) nil nil (cons) ((curColor (cdar coloring))) nil nil) (nil nil (curColor-bfringes remFringes curTotal-fringes) (build-term-top-guard-t) nil (recursive-call) nil) ((curTotal-fringes taxa-list kernal remFringes taxa-list) nil (1-) (get-fringes-matching-color remove-from-alist app) nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::multipolar (nil nil nil nil (if) nil nil) (nil nil (quote) (let*) nil nil nil) ((bad-input-to-multipolar) nil (non-tip-tree-listp int-symlist all-same-num-tips rationalp) (<= <) (if) nil nil) ((list-of-trees taxa-list list-of-trees alpha alpha) (2 0) (len numtrees cutoff often-enough-bfringes kernal no-kernal incompat-graph alistp-gen quote) nil (mv-let) nil nil) ((taxa-list incompat-graph need-alistp-gen-incompat-graph-in-multipolar) nil (len coloring) (ceiling collect-when-size-is-at-least-cutoff get-kernal-splits difference build-incompat-graph) (if) (build-coloring) nil) ((list-of-trees numtrees bfringe-freqs cutoff often-enough-bfringes often-enough-bfringes often-enough-bfringes kernal no-kernal no-kernal numPoles incompat-graph nil) (0) (strip-cars-gen natp quote) (/) nil (build-trees-from-coloring) nil) ((alpha incompat-graph numPoles kernal coloring taxa-list numPoles need-natp-numPoles-in-multipolar) (1) nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::multipolar-brlens (nil nil nil (let) nil nil nil) (((trees-no-brlens (remove-brlens-list list-of-trees))) nil nil nil (multipolar) nil nil) ((trees-no-brlens alpha taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::loose (nil nil nil nil (if) nil nil) (nil nil (quote) (let*) nil (and) nil) ((bad-input-to-loose) nil (non-tip-tree-listp int-symlist all-same-num-tips (bfringe-freqs (bfringe-frequencies list-of-trees taxa-list))) (<= build-term-top-guard-t) nil nil nil) ((list-of-trees taxa-list list-of-trees kernal taxa-list) (2) (len kernal) nil nil nil nil) ((taxa-list) nil nil (get-kernal-splits) nil nil nil) (nil nil (strip-cars-gen strip-cars-gen) nil nil nil nil) ((bfringe-freqs bfringe-freqs) nil nil nil nil nil nil)) (/taspi/sets-input/multipolar-loose.lisp::loose-brlens (nil nil nil (let) nil nil nil) (((trees-no-brlens (remove-brlens-list list-of-trees))) nil nil (loose) nil nil nil) ((trees-no-brlens taxa-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))