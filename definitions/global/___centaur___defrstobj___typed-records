((/centaur/defrstobj/typed-records.lisp::elem-fix (nil nil nil nil (if) nil nil) ((x elem-default) nil (elem-p) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-p1 (nil nil nil (or) nil nil nil) (nil nil (null) nil nil nil nil) ((x) nil (consp consp recursive-call elem-p not) (or) nil nil nil) ((x) nil (car cdr cdar null) (equal <<) nil nil nil) ((x x x elem-default) nil (cdar cdr caar caadr) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-p (nil nil nil nil nil (and) nil) (nil nil (consp tr-p1 car not) nil nil nil nil) ((x x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::to-tr (nil nil nil nil (if) nil nil) ((x) nil (tr-p) (cons) nil nil nil) ((x nil x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-bad-part (nil nil nil nil (if) nil nil) ((r) nil (tr-p cdr) nil nil nil nil) ((r r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-get1 (nil nil nil nil (cond) nil nil) (nil nil ((or (endp r) (<< k (caar r))) (equal k (caar r)) t) nil nil nil nil) ((elem-default) nil (cdar) (recursive-call) nil nil nil) ((r k) nil (cdr) nil nil nil nil) ((r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-set1 (nil nil nil nil (cond) nil nil) (nil nil ((or (endp r) (<< k (caar r))) (equal k (caar r)) t) nil nil nil nil) (nil nil nil (cons) (if if) nil nil) ((r) nil (cdr car) (equal cons equal cons) (recursive-call) nil nil) ((v elem-default r v elem-default r r k v) nil (cdr cdr) (cons cons) nil nil nil) ((k v k v r r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-get (nil nil nil (tr-get1) nil nil nil) ((k) nil (car) nil nil nil nil) (nil nil (to-tr) nil nil nil nil) ((r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-set (nil nil nil (let*) nil nil nil) (nil nil nil nil ((rec (to-tr r)) if) nil nil) ((new-rec1 bad) nil (rec1 bad new-rec1) (cons) nil nil nil) ((new-rec1 bad) nil (car cdr) nil (tr-set1) nil nil) ((rec rec k rec1) nil (elem-fix) nil nil nil nil) ((v) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::elem-list-p (nil nil nil nil (if) nil nil) (nil nil (atom) (eq and) nil nil nil) ((x x nil) nil (elem-p recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::array-to-tr (nil nil nil nil (if) nil nil) (nil nil (zp) nil (tr-set recursive-call) nil nil) ((n rec arr) (0) nil (nth -) (tr-set) nil nil) ((arr n n rec) (0 1) nil (nth) nil nil nil) ((n arr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-to-array (nil nil nil nil (if) nil nil) (nil nil (zp) nil (update-nth recursive-call) nil nil) ((n arr rec) (0) nil (tr-get -) (update-nth) nil nil) ((rec n n arr) (0 1) nil (tr-get) nil nil nil) ((n rec) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::tr-delete-indices (nil nil nil nil (if) nil nil) (nil nil (zp) (recursive-call) (tr-set) nil nil) ((n elem-default rec) (0) nil (-) (tr-set) nil nil) ((n n elem-default rec) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/defrstobj/typed-records.lisp::array-rec-pair-p (nil nil nil nil (and) nil nil) (nil nil (elem-list-p) (= equal) nil nil nil) ((arr len rec) nil (len) (tr-delete-indices) nil nil nil) ((arr rec) nil nil (-) nil nil nil) ((len) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))