((/textbook/chap10/compiler.lisp::exprp (nil nil nil nil (cond) nil nil) (nil nil ((atom exp) (equal (len exp) 2) t) nil nil nil nil) (nil nil nil (or and) nil (and) nil) (nil nil (symbolp acl2-numberp recursive-call recursive-call recursive-call) (or equal or) nil nil nil) ((exp exp) (3) (cadr len car caddr) (equal equal equal equal) nil nil nil) ((exp exp exp exp) nil (car quote car quote cadr quote cadr quote) nil nil nil nil) ((exp inc exp sq exp + exp *) nil nil nil nil nil nil)) (/textbook/chap10/compiler.lisp::lookup (nil nil nil nil (cond) nil nil) (nil nil ((endp alist) (equal var (car (car alist))) t) nil nil nil nil) (nil (0) (cdr) (recursive-call) nil nil nil) ((var) nil (car cdr) nil nil nil nil) ((alist alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/compiler.lisp::eval (nil nil nil nil (cond) nil nil) (nil nil ((atom exp) (equal (len exp) 2) t) nil nil nil nil) (nil nil nil (cond cond cond) nil nil nil) (nil nil ((symbolp exp) t (equal (car exp) (quote inc)) t (equal (cadr exp) (quote +)) t) nil nil nil nil) ((exp) nil nil (lookup + * + *) nil nil nil) ((exp alist) (1) nil (recursive-call recursive-call recursive-call recursive-call recursive-call recursive-call recursive-call) nil nil nil) ((alist alist alist alist alist alist alist) nil (cadr cadr cadr car caddr car caddr) nil nil nil nil)) (/textbook/chap10/compiler.lisp::pop (nil nil (cdr) nil nil nil nil) ((stk) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/compiler.lisp::top (nil nil nil nil (if) nil nil) (nil (0) (consp car) nil nil nil nil) ((stk stk) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/compiler.lisp::push (nil nil nil (cons) nil nil nil) ((val stk) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/compiler.lisp::step (nil nil nil (let) nil nil nil) (((op (car ins))) nil nil nil nil nil nil) ((op) nil (pushv pushc dup add mul t) nil nil nil nil) ((stk) nil nil (push push push push push) nil nil nil) ((stk stk stk) nil (cadr top pop pop) (lookup + *) nil nil nil) ((alist ins stk) nil (cadr top top pop top top pop) nil nil nil nil) ((ins stk stk stk stk) nil (pop pop) nil nil nil nil)) (/textbook/chap10/compiler.lisp::run (nil nil nil (cond) nil nil nil) (((run (cdr program) alist (step (car program) alist stk))) nil ((endp program)) nil nil nil nil) ((stk) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap10/compiler.lisp::compile (nil nil nil nil (cond) nil nil) (nil nil ((atom exp) (equal (len exp) 2) t) nil nil nil nil) (nil nil nil (cond cond cond) nil nil nil) (nil nil ((symbolp exp) t (equal (car exp) (quote inc)) t (equal (cadr exp) (quote +)) t) nil nil nil nil) (nil nil (list list) (append append) (append append) nil nil) (nil nil (recursive-call quote recursive-call quote recursive-call recursive-call quote recursive-call recursive-call quote) (list list) nil nil nil) ((exp exp (add) (mul)) nil (quote quote cadr (pushc 1) cadr (dup) car caddr car caddr) nil nil nil nil)) (/textbook/chap10/compiler.lisp::compiler-induct (nil nil nil nil (cond) nil nil) (nil nil ((atom exp) (equal (len exp) 2) t) nil nil nil nil) ((stk) nil nil (append) (recursive-call) nil nil) ((alist stk) nil (cadr) nil (recursive-call recursive-call) nil nil) ((exp alist stk alist) nil (car caddr) (cons) nil nil nil) ((exp exp stk) nil nil (eval) nil nil nil) ((alist) nil (car) nil nil nil nil)))