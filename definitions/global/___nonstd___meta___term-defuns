((/nonstd/meta/term-defuns.lisp::memb (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((x) nil nil (equal recursive-call) nil nil nil) ((a a) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::del (nil nil nil nil (if) nil nil) ((y) nil (consp) nil (if) nil nil) ((y) nil (cdr) (equal cons) nil nil nil) ((x y) nil (car car) (recursive-call) nil nil nil) ((y y x) nil (cdr) nil nil nil nil) ((y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::subbagp (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((x nil) nil nil (memb recursive-call) nil nil nil) ((y) nil (car cdr) (del) nil nil nil) ((x x y) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::bagdiff (nil nil nil nil (if) nil nil) ((x) nil (consp) nil (if) nil nil) ((y) nil nil (memb recursive-call recursive-call) nil nil nil) ((x x) nil (car cdr cdr) (del) nil nil nil) ((y x y y) nil (car) nil nil nil nil) ((y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::bagint (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((x) nil nil (memb cons recursive-call) nil nil nil) ((y y) nil (car car cdr) (recursive-call) nil nil nil) ((x x x) nil (cdr) (del) nil nil nil) ((x y) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::term-list-to-type-term (nil nil nil nil (cond) nil nil) (nil nil ((null lst) (null (cdr lst)) t) nil nil nil nil) (nil nil (quote) (list) nil (list) nil) ((unary-op-name) nil (quote car quote quote) (list recursive-call) nil nil nil) ((t lst if unary-op-name unary-op-name) nil (car cdr quote) nil nil nil nil) ((lst lst nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::binary-op_tree (nil nil nil nil (if) nil nil) (nil nil (endp) (list) (if) nil nil) ((lst constant-name) nil (quote endp) (list) (if) nil nil) ((quote fix-name) nil (cdr car endp) nil (list list) nil nil) ((lst lst binary-op-name binary-op-name) nil (cddr car cadr car) nil nil (recursive-call) nil) ((lst lst lst lst binary-op-name constant-name fix-name) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::binary-op_tree-simple (nil nil nil nil (if) nil nil) (nil nil (endp) (list) (if) nil nil) ((lst constant-name) nil (quote endp car) nil (list) nil nil) ((quote lst binary-op-name) nil (cdr car) nil (recursive-call) nil nil) ((lst lst binary-op-name constant-name) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::remove-duplicates-memb (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((lst) nil (recursive-call) (memb cons) nil nil nil) (nil nil (car cdr cdr car recursive-call) nil nil nil nil) ((lst lst lst lst) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/meta/term-defuns.lisp::fringe-occur (nil nil nil (cond) nil nil nil) (nil nil ((and (consp term) (eq (car term) binop)) t) nil nil nil nil) (nil nil nil (or equal) nil nil nil) ((arg term) nil nil nil (recursive-call recursive-call) nil nil) ((binop arg binop arg) nil (cadr caddr) nil nil nil nil) ((term term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))