((/misc/misc2/reverse-by-separation.lisp::rd (nil nil nil nil (cond) nil nil) (nil nil ((atom lst) (equal x (caar lst)) t) nil nil nil nil) (nil (0) (cdar) (recursive-call) nil nil nil) ((lst x) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::wr (nil nil nil (cons) nil nil nil) ((lst) nil nil (cons) nil nil nil) ((y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::rd-pc (nil nil nil (rd) nil nil nil) ((s) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::bump-pc (nil nil nil nil (wr) nil nil) ((s) (0) nil (+) nil nil nil) (nil (3) (rd-pc) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::exec (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((s) nil nil (recursive-call) nil nil nil) (nil nil (1- bump-pc) nil nil nil nil) ((n) nil nil (next) nil nil nil) ((s) nil (rd-pc) nil nil nil nil) ((s) nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::seq (nil nil nil (cond) nil nil nil) (nil nil ((atom xs) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil nil (cons recursive-call) nil nil nil) ((p) nil (car 1+ cdr) nil nil nil nil) ((xs p xs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::rev-code (nil nil nil (seq) nil nil nil) ((p) nil (quote) nil nil nil nil) (nil nil nil nil nil nil nil) (nil (2 0 5 0 12 2 3 1 3 1 2 1 2 1 1 1 3 4 1 15) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::list-addr (nil nil nil (cond) nil nil nil) (nil nil ((atom xs) t) nil nil nil nil) (nil (0) (caar) nil nil nil nil) ((xs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::list-in-store (nil nil nil (cond) nil nil nil) (nil nil ((atom xs) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (nil nil ((l (caar xs))) nil (list*) nil nil) (nil nil (y recursive-call) (cons cons) nil nil nil) ((l y) nil (cdar list-addr 1+ cdr) nil nil nil nil) ((xs l xs) nil (cdr) nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::list-for (nil nil nil (cons) nil nil nil) (nil nil (list-in-store) (cons) nil nil nil) ((v xs) nil (list-addr) nil nil nil nil) ((xs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::separate (nil nil nil (cond) nil nil nil) (nil nil ((atom lst) t) nil nil nil nil) (nil nil (bag::unique) (let) nil nil nil) ((rest) nil nil ((x (caar lst))) (if) nil nil) ((nil) nil (y xs) (member-equal and) nil nil nil) ((x rest) nil (cdar cdr) (equal) (recursive-call) nil nil) ((lst lst y xs s) nil nil (rd cons) nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::spec (nil nil nil (implies) nil nil nil) (nil nil nil nil (separate separate) nil nil) ((s pre2 post2) nil nil (append append exec) nil nil nil) ((code pre1 code post1 n s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::rd-listp (nil nil nil (cond) nil nil nil) (nil nil ((atom lst) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (equal recursive-call) nil nil nil) ((s) nil (cdar cdr) (rd) nil nil nil) ((s lst lst) nil (caar) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::rd-pc-hack (nil nil (rd-pc) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/misc2/reverse-by-separation.lisp::spec-loop-induct (nil nil nil nil (if) nil nil) (nil nil (atom) (list) (recursive-call) nil nil) ((xs ys s) nil (cdr) (cons exec) nil nil nil) ((xs ys s) (5) (car) nil nil nil nil) ((xs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))