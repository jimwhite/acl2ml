((/hacking/bridge.lisp::replace-last-cltl-command-wrld (nil nil nil nil (cond) nil nil) (nil nil ((endp wrld) (and (consp (car wrld)) (eq (caar wrld) (quote cltl-command)) (consp (cdar wrld)) (eq (cadar wrld) (quote global-value))) t) nil nil nil nil) ((nil) nil nil (cons cons) nil nil nil) (nil nil (cdr car) (recursive-call) (list*) nil nil) ((cltl-command wrld wrld cltl-command) nil (quote quote cdr) nil nil nil nil) ((cltl-command global-value wrld) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hacking/bridge.lisp::remove-last-cltl-command-wrld (nil nil nil nil (cond) nil nil) (nil nil ((endp wrld) (and (consp (car wrld)) (eq (caar wrld) (quote cltl-command)) (consp (cdar wrld)) (eq (cadar wrld) (quote global-value))) t) nil nil nil nil) ((nil) nil (cdr) (cons) nil nil nil) ((wrld) nil (car recursive-call) nil nil nil nil) ((wrld) nil (cdr) nil nil nil nil) ((wrld) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/hacking/bridge.lisp::reconstruct-declare-lst (nil nil nil nil nil (cond) nil) (nil nil ((atom spec) (eq (quote declare) (car spec)) (consp (car spec)) t) nil nil nil nil) ((nil) nil (list list list) nil nil nil nil) ((spec) nil nil (cons list) nil nil nil) ((spec spec) nil (quote quote) nil nil nil nil) ((declare declare) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))