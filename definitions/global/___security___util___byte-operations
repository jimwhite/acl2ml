((/security/util/byte-operations.lisp::charlist-to-bytes (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((charlist) nil (char-code recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((charlist charlist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::string-to-bytes (nil nil (charlist-to-bytes) nil nil nil nil) (nil nil nil (coerce) nil nil nil) ((S) nil (quote) nil nil nil nil) ((LIST) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::make-bytes (nil nil nil nil (if) nil nil) (nil nil nil (< cons cons) nil nil nil) ((number-int number-int nil) (256) (recursive-call) (mod) nil nil nil) ((number-int) (256) nil (ash) nil nil nil) ((number-int) (-8) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::make-bytes-msb (nil nil (reverse) nil nil nil nil) (nil nil (make-bytes) nil nil nil nil) ((number-int) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::make-list-n (nil nil nil nil (if) nil nil) ((nil) nil nil (or cons) nil nil nil) ((n) nil (zp not) (recursive-call) nil nil nil) ((x n) nil (atom) (-) nil nil nil) ((n x) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bitp (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((e) nil nil (equal equal) nil nil nil) ((e e) (0 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::xor-bit (nil nil nil nil (if) nil nil) ((nil) nil nil nil (if) (and) nil) (nil (0 1) (atom atom bitp bitp) (equal) nil nil nil) ((x y x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::and-bit (nil nil nil nil (if) nil nil) ((nil) nil nil nil (if) (and) nil) ((x) (0) (atom atom bitp bitp) (equal) nil nil nil) ((x y x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::not-bit (nil nil nil nil (if) nil nil) ((nil) nil nil (and) (if) nil nil) (nil (0 1) (atom bitp) (equal) nil nil nil) ((x x x) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bit-listp (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x) nil (null bitp) (and) nil nil nil) (nil nil (cdr car bitp recursive-call) nil nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::n-bitp (nil nil nil (and) nil nil nil) (nil nil (bit-listp) (equal) nil nil nil) ((x-bits n) nil (len) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::64-bitp (nil nil nil (n-bitp) nil nil nil) ((x-bits) (64) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::56-bitp (nil nil nil (n-bitp) nil nil nil) ((x-bits) (56) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::48-bitp (nil nil nil (n-bitp) nil nil nil) ((x-bits) (48) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::32-bitp (nil nil nil (n-bitp) nil nil nil) ((x-bits) (32) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::28-bitp (nil nil nil (n-bitp) nil nil nil) ((x-bits) (28) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::8-bitp (nil nil nil (n-bitp) nil nil nil) ((x-bits) (8) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::6-bitp (nil nil nil (n-bitp) nil nil nil) ((x-bits) (6) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::64-bit-multiplep (nil nil nil (and) nil nil nil) (nil nil (bit-listp) (equal) nil nil nil) ((x-bits) (0) nil (mod) nil nil nil) (nil (64) (len) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::8-bit-multiplep (nil nil nil (and) nil nil nil) (nil nil (bit-listp) (equal) nil nil nil) ((x-bits) (0) nil (mod) nil nil nil) (nil (8) (len) nil nil nil nil) ((x-bits) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::not-bit-list (nil nil nil nil (if) nil nil) ((nil) nil (bit-listp) (cons) nil nil nil) ((x) nil (not-bit recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::and-bit-list (nil nil nil nil (if) nil nil) ((nil) nil nil (and cons) nil nil nil) (nil nil (bit-listp bit-listp) (and-bit recursive-call) nil nil nil) ((x y) nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::xor-bit-list (nil nil nil nil (if) nil nil) (nil nil (atom) nil (if if) nil nil) ((x y nil) nil (bit-listp atom) (cons) (if) nil nil) ((y y x nil) nil (bit-listp) (xor-bit recursive-call) nil nil nil) ((x) nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::number-to-bits (nil nil nil nil (if) nil nil) ((nil) nil (not) nil (if) nil nil) (nil nil (natp) (< cons cons) nil nil nil) ((x x x nil) (2) (recursive-call) (mod) nil nil nil) ((x) (2) nil (floor) nil nil nil) ((x) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::number-to-32bits (nil nil nil nil (if) nil nil) ((nil) nil (not) (let*) nil nil nil) (nil nil (natp (bit-list (number-to-bits x))) (append) nil nil nil) ((x bit-list) nil (len-list) (make-list-n) nil nil nil) (nil (0) (len) (-) nil nil nil) ((bit-list len-list) (32) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::number-to-8bits (nil nil nil nil (if) nil nil) ((nil) nil nil (or let*) nil nil nil) (nil nil (not (bit-list (number-to-bits x))) (> append) nil nil nil) ((x bit-list) (255) (natp len-list) (make-list-n) nil nil nil) ((x) (0) (len) (-) nil nil nil) ((bit-list len-list) (8) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::number-to-4bits (nil nil nil nil (if) nil nil) ((nil) nil nil (or let*) nil nil nil) (nil nil (not (bit-list (number-to-bits x))) (> append) nil nil nil) ((x bit-list) (15) (natp len-list) (make-list-n) nil nil nil) ((x) (0) (len) (-) nil nil nil) ((bit-list len-list) (4) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::number-to-4bits-msb (nil nil (reverse) nil nil nil nil) (nil nil (number-to-4bits) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bytes-to-8bits-msb (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((bytes) nil (reverse recursive-call) nil nil nil nil) (nil nil (number-to-8bits cdr) nil nil nil nil) ((bytes) nil (car) nil nil nil nil) ((bytes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::string-to-bits-msb (nil nil nil nil (if) nil nil) ((nil) nil (not) (let) nil nil nil) (((bytes (string-to-bytes S))) nil (stringp bytes-to-8bits-msb) nil nil nil nil) ((S bytes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bits-to-number1 (nil nil nil nil (if) nil nil) ((nil) nil (not) (let) nil nil nil) (((val (* (car x) (expt 2 exp)))) nil (bit-listp) nil (if) nil nil) ((x val) nil (null) (+) nil nil nil) ((val) nil (cdr) (recursive-call) nil nil nil) ((x) nil (cdr) (+) nil nil nil) ((x exp) (1) nil nil nil nil nil)) (/security/util/byte-operations.lisp::bits-to-number (nil nil nil (bits-to-number1) nil nil nil) ((x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::xor-number (nil nil (bits-to-number) nil nil nil nil) (nil nil nil (xor-bit-list) nil nil nil) (nil nil (number-to-32bits number-to-32bits) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::and-number (nil nil (bits-to-number) nil nil nil nil) (nil nil nil (and-bit-list) nil nil nil) (nil nil (number-to-32bits number-to-32bits) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::not-number (nil nil (bits-to-number) nil nil nil nil) (nil nil (not-bit-list) nil nil nil nil) (nil nil (number-to-32bits) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::get-nth (nil nil nil nil (if) nil nil) ((nil) nil nil (<) (if) nil nil) ((n nil) (0) (atom) nil (if) nil nil) ((x x) nil nil (= recursive-call) nil nil nil) ((n) (0) (cdr) (-) nil nil nil) ((x n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::prefix-nth (nil nil nil nil (if) nil nil) ((nil) nil nil (<=) (if) nil nil) ((n nil) (0) (atom) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x) nil (cdr) (-) nil nil nil) ((x n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::8bits-to-byte (nil nil nil nil (if) nil nil) ((nil) nil (not) nil nil nil nil) (nil nil (8-bitp) (* * * * * * * *) nil nil nil) ((x) (128 64 32 16 8 4 2 1) nil (Nth Nth Nth Nth Nth Nth Nth Nth) nil nil nil) ((x x x x x x x x) (0 1 2 3 4 5 6 7) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bits-to-8bits (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((x) nil nil (<= cons cons) nil nil nil) ((x nil) (8) (len recursive-call) (prefix-nth) nil nil nil) ((x x) (8) nil (get-nth) nil nil nil) ((x) (8) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::8bits-to-bytes (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (8bits-to-byte recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bits-to-bytes (nil nil nil nil (if) nil nil) ((nil) nil (atom 8bits-to-bytes) nil nil nil nil) ((x) nil (bits-to-8bits) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bytes-to-charlist (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (code-char recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bigendian-bits-to-string (nil nil nil nil (if) nil nil) ((nil) nil (not) (let*) nil nil nil) (nil nil (8-bit-multiplep) ((8bit-groups (bits-to-8bits x)) coerce) nil nil nil) ((x charlist) nil (bytes charlist quote) nil nil nil nil) ((string) nil (8bits-to-bytes bytes-to-charlist) nil nil nil nil) ((8bit-groups bytes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::rightrotate-bits (nil nil nil nil (if) nil nil) ((nil) nil nil (<) (if) nil nil) ((n nil) (0) (atom) (append) nil nil nil) ((bit-list) nil nil (get-nth prefix-nth) nil nil nil) ((bit-list n bit-list n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::rightrotate (nil nil nil (let) nil nil nil) (((bit-list (number-to-32bits number))) nil (bits-to-number) nil nil nil nil) (nil nil nil (rightrotate-bits) nil nil nil) ((bit-list n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::add-32bit (nil nil nil nil (if) nil nil) ((nil) nil nil (and mod) nil nil nil) (nil nil (natp natp) (+ expt) nil nil nil) ((x y x y) (2 32) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bytes-to-32bit-blocks1 (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((byte-list (val (+ (* currval 256) (car byte-list)))) nil nil nil (if) nil nil) (nil nil (null) (cons) (if) nil nil) ((val nil) nil (cdr) (equal cons) (recursive-call) nil nil) ((byte-list m val val) (1) (cdr) (-) (recursive-call) nil nil) ((byte-list m) (0 4 1) (cdr) nil nil nil nil)) (/security/util/byte-operations.lisp::bytes-to-32bit-blocks (nil nil nil nil (bytes-to-32bit-blocks1) nil nil) ((byte-list) (0 4) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/security/util/byte-operations.lisp::bytes-to-multiple-64-byte-blocks (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((message-bytes) nil nil (<= cons cons) nil nil nil) ((message-bytes nil) (64) (len recursive-call) (prefix-nth) nil nil nil) ((message-bytes message-bytes) (64) nil (get-nth) nil nil nil) ((message-bytes) (64) nil nil nil nil nil) (nil nil nil nil nil nil nil)))