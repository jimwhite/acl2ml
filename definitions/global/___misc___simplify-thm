((/misc/simplify-thm.lisp::smpl-clause-to-theorem (nil nil (`) nil nil nil nil) (nil nil nil (implies) nil nil nil) (nil nil (,) (and) nil nil nil) ((,) nil (dumb-negate-lit-lst car) nil nil nil nil) (nil nil (last) (butlast) nil nil nil) ((clause clause) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/simplify-thm.lisp::smpl-clauses-to-theorems (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((clauses) nil (smpl-clause-to-theorem recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((clauses clauses) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/simplify-thm.lisp::smpl-to-theorems (nil nil nil (er-let*) nil nil nil) (((clauses (simplify-with-prover term hints (quote smpl-to-theorems) state))) nil (value) nil nil nil nil) (nil nil (smpl-clauses-to-theorems) nil nil nil nil) ((clauses) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/simplify-thm.lisp::smpl-clauses-to-defthms (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((clauses) nil (`) nil nil (recursive-call) nil) ((namebase args) nil (1+ cdr) nil nil (defthm) nil) ((, args n clauses) nil (, ,) nil nil nil nil) (nil nil (car) nil nil (incat) nil) ((namebase - clauses) nil (symbol-name) (explode-atom) nil nil nil)) (/misc/simplify-thm.lisp::simplify-thm-fn (nil nil nil (er-let*) nil nil nil) (((forms (smpl-to-theorems form smpl-hints state))) nil (value) nil nil nil nil) (nil nil nil nil nil (smpl-clauses-to-defthms) nil) ((namebase forms args) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))