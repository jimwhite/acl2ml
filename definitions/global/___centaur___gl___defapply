((/centaur/gl/defapply.lisp::make-list-of-nths (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n) nil (`) nil (recursive-call) nil nil) ((sym) nil (1+ 1-) (nth) nil nil nil) ((start n) nil (, ,) nil nil nil nil) ((start sym) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/defapply.lisp::make-mv-call (nil nil nil (let*) nil nil nil) (((stobjs-out (getprop f (quote stobjs-out) nil (quote current-acl2-world) world))) nil nil nil (if) nil nil) (nil nil (` `) (and) nil nil nil) ((stobjs-out) nil (ecc) (< mv-list) nil nil nil) (nil (1) (length , ecc) ((, f)) nil nil nil) ((stobjs-out , args) nil (length) ((, f)) nil nil nil) ((stobjs-out , args) nil nil nil nil nil nil)) (/centaur/gl/defapply.lisp::make-apply-entry (nil nil nil (let*) nil nil nil) (((formals (getprop f (quote formals) nil (quote current-acl2-world) world))) nil (`) nil nil nil nil) (nil nil ((and (eq f (quote (, f))) (true-listp args) (eql (len args) (, (length formals))))) nil nil nil nil) (nil nil (,) nil nil nil nil) (nil nil nil nil (make-mv-call) nil nil) ((f world) nil nil nil (make-list-of-nths) nil nil) (nil (0) (quote length) nil nil nil nil)) (/centaur/gl/defapply.lisp::make-apply-clique-entries (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((clique) nil nil (make-apply-entry recursive-call) nil nil nil) ((world world) nil (car cdr) nil nil nil nil) ((clique clique) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/defapply.lisp::make-apply-entries (nil nil nil nil (if) nil nil) (nil nil (atom) (prog2$) (if) nil nil) ((fns nil) nil (flush-hons-get-hash-table-link) (hons-get let*) (recursive-call) nil nil) ((acc acc world acc) nil (car cdr (clique (or (wgetprop (car fns) (quote recursivep)) (list (car fns))))) (append) nil nil nil) ((fns fns) nil (acc) (make-apply-clique-entries) (recursive-call) nil nil) ((clique world world acc) nil (cdr) nil (acl2::hons-put-list) nil nil) ((clique t acc fns) nil nil nil nil nil nil)) (/centaur/gl/defapply.lisp::double-rewrite-formals (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (double-rewrite cdr) nil nil nil nil) ((formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/defapply.lisp::apply-rw-name (nil nil nil (intern-in-package-of-symbol) nil nil nil) ((apply) nil nil nil nil (concatenate) nil) ((-) nil (quote symbol-name symbol-name) nil nil nil nil) ((string apply fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/defapply.lisp::apply-rw-thms (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let*) nil nil nil) ((clique) nil ((fn (car clique))) (cons) nil nil nil) (nil nil (formals `) nil (recursive-call) nil nil) ((name world) nil (cdr) (wgetprop) nil (defthm) nil) ((fn :hints clique) nil (quote , (goal :in-theory (e/d** (minimal-theory (equal) (len) (nth) (binary-+) (not) (zp) (:definition (, name)) len-open-for-defapply nth-open-for-defapply)) :do-not (quote (preprocess)))) (equal) nil nil nil) ((formals) nil nil (apply-rw-name (, name) (, fn) and) nil nil nil)) (/centaur/gl/defapply.lisp::make-apply-rewrites (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((fns) nil nil (b*) (recursive-call) nil nil) (((recursivep (getprop (car fns) (quote recursivep) nil (quote current-acl2-world) world)) name world) nil (cdr) nil (apply-rw-thms) nil nil) ((name world fns) nil nil (or) nil nil nil) ((recursivep) nil (list) nil nil nil nil) (nil nil (car) nil nil nil nil)) (/centaur/gl/defapply.lisp::make-apply (nil nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) (nil nil nil nil nil (encapsulate encapsulate) nil) ((nil nil ,) nil (local local) nil (table make-apply-rewrites) (defund) nil) ((g-apply-table name fns world) nil (in-theory , f declare quote quote in-theory) (cond) nil nil nil) ((name args) nil (e/d** ,@ t , , e/d**) nil nil (xargs) nil) ((:guard t :normalize nil name fns) nil ((:ruleset defapply-guards) (:ruleset defapply-guards)) (apply-stub) (make-apply-entries) nil nil)))