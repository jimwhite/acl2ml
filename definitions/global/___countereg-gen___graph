((/countereg-gen/graph.lisp::get-explicit-vertmap (nil nil nil nil (if) nil nil) ((nil) nil nil (f-boundp-global let) nil nil nil) ((state (m (@ explicit-vertmap))) nil (quote) nil (if) nil nil) ((explicit-vertmap m nil) nil (symbol-alistp) nil nil nil nil) ((m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::get-explicit-implied-index-map (nil nil nil nil (if) nil nil) ((nil) nil nil (f-boundp-global let) nil nil nil) ((state (m (@ explicit-implied-index-map))) nil (quote) nil (if) nil nil) ((explicit-implied-index-map nil) nil nil (array1p cons) nil nil nil) ((m m) nil (quote quote) nil nil nil nil) ((s-explicit-implied-index-map s-explicit-implied-index-map) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::nat-alistp (nil nil nil nil (if) nil nil) ((t) nil (null) nil (if) nil nil) ((al nil) nil (atom) nil (and) nil nil) ((al) nil (consp natp recursive-call) nil nil nil nil) (nil nil (car caar cdr) nil nil nil nil) ((al al al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::get-subtype-dtg-alst (nil nil nil nil (if) nil nil) ((nil) nil nil (f-boundp-global let) nil nil nil) ((state (g (@ subtype-dtg-alst))) nil (quote) nil (if) nil nil) ((subtype-dtg-alst g nil) nil (nat-alistp) nil nil nil nil) ((g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::get-implied-subtype-dt2g (nil nil nil nil (if) nil nil) ((nil) nil nil (f-boundp-global let) nil nil nil) ((state (g (@ implied-subtype-dt2g))) nil (quote) nil (if) nil nil) ((implied-subtype-dt2g nil) nil nil (array2p cons) nil nil nil) ((g g) nil (quote quote) nil nil nil nil) ((implied-subtype-dt2g implied-subtype-dt2g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::get-disjoint-dtg-alst (nil nil nil nil (if) nil nil) ((nil) nil nil (f-boundp-global let) nil nil nil) ((state (g (@ disjoint-dtg-alst))) nil (quote) nil (if) nil nil) ((disjoint-dtg-alst g nil) nil (nat-alistp) nil nil nil nil) ((g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::get-implied-disjoint-dt2g (nil nil nil nil (if) nil nil) ((nil) nil nil (f-boundp-global let) nil nil nil) ((state (g (@ implied-disjoint-dt2g))) nil (quote) nil (if) nil nil) ((implied-disjoint-dt2g nil) nil nil (array2p cons) nil nil nil) ((g g) nil (quote quote) nil nil nil nil) ((implied-disjoint-dt2g implied-disjoint-dt2g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::defarray1 (nil nil nil (compress1) nil nil nil) ((name) nil nil (cons) nil nil nil) ((nil) nil nil nil nil nil nil) ((:HEADER :DIMENSIONS :MAXIMUM-LENGTH :DEFAULT initial-element) nil (list 1+) nil nil nil nil) ((size size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::alst-to-array1 (nil nil nil (compress1) nil nil nil) ((name) nil nil (cons) nil nil nil) ((alst) nil nil nil nil nil (list)) ((:HEADER :DIMENSIONS :MAXIMUM-LENGTH) nil (list 1+) nil nil nil nil) ((size size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::defarray2 (nil nil nil (compress2) nil nil nil) ((name) nil nil (cons) nil nil nil) ((nil) nil nil nil nil nil nil) ((:HEADER :DIMENSIONS :MAXIMUM-LENGTH :DEFAULT initial-element) nil (1+) (list) nil nil nil) ((size size) nil nil (*) nil nil nil) ((size size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::matrixp (nil nil nil nil (and) nil nil) (nil nil (symbolp) (array2p equal) nil nil nil) ((nm nm g) nil (car cadr) nil nil nil nil) (nil nil nil (dimensions dimensions) nil nil nil) ((nm g nm g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::make-n-upto-list (nil nil nil nil (if) nil nil) ((ans) nil (zp) (recursive-call) nil nil nil) ((size) nil (1-) (cons) nil nil nil) ((size ans) nil (1-) nil nil nil nil) ((size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::index1p (nil nil nil nil (if) nil nil) ((nil) nil nil (array1p and) nil nil nil) ((nm g1) nil (natp) (<) nil nil nil) ((i i) nil (car) nil nil nil nil) (nil nil nil (dimensions) nil nil nil) ((nm g1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::index2p (nil nil nil nil (if) nil nil) ((nil) nil nil (matrixp and) nil nil nil) ((nm g2) nil (natp) (<) nil nil nil) ((i i) nil (car) nil nil nil nil) (nil nil nil (dimensions) nil nil nil) ((nm g2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::index1-listp (nil nil nil nil (if) nil nil) ((nil) nil nil (array1p) (if) nil nil) ((nm g1) nil (atom null) (and) nil nil nil) ((x x) nil nil nil (index1p recursive-call) nil nil) ((nm g1 nm g1) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::index2-listp (nil nil nil nil (if) nil nil) ((nil) nil nil (matrixp) (if) nil nil) ((nm g2) nil (atom null) (and) nil nil nil) ((x x) nil nil nil (index2p recursive-call) nil nil) ((nm g2 nm g2) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::g-2d-size (nil nil (car) nil nil nil nil) (nil nil nil (dimensions) nil nil nil) ((nm g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::g-1d-size (nil nil (car) nil nil nil nil) (nil nil nil (dimensions) nil nil nil) ((nm g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::adj-vertices-loop (nil nil nil nil (if) nil nil) ((ans) nil (zp) (let) nil nil nil) ((ctr (v (- size ctr))) nil nil nil nil nil nil) ((u name g size) nil (1-) nil (if) nil nil) ((ctr ans) nil nil (append) nil (aref2) nil) ((name g u v ans) nil (list) nil nil nil nil) ((v) nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::adj-vertices (nil nil nil (let) nil nil nil) (((size (g-2d-size nm g))) nil nil nil nil nil nil) ((u nm g size size nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::transpose-g-entry (nil nil nil (let) nil nil nil) (((entry (aref2 nm g row col))) nil nil nil nil nil (aset2)) ((new-nm new-g col row entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::less-than (nil nil nil nil (if) nil nil) ((nil) nil nil (and <) nil nil nil) ((a b) nil (natp natp) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::up-counterp (nil nil nil nil (if) nil nil) ((nil) nil nil (and) (cond) nil nil) (nil nil (natp natp (= ctr size) (< ctr size) t) nil nil nil nil) ((ctr size t t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::index2-up-counterp (nil nil nil nil (if) nil nil) ((nil) nil nil (and or) nil nil nil) (nil nil nil (matrixp equal up-counterp) (index2p) nil nil) ((nm g size ctr size ctr nm g) nil nil (g-2d-size) nil nil nil) ((nm g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::down-counterp (nil nil nil nil (if) nil nil) ((nil) nil nil (and) (cond) nil nil) (nil nil (natp natp (= ctr size) (< ctr size) t) nil nil nil nil) ((ctr size t t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::tg-loop-col (nil nil nil nil (if) nil nil) ((new-g) nil (not) (let) nil nil nil) (((new-g (transpose-g-entry nm g new-nm new-g row col))) nil nil (less-than) nil nil nil) ((col size nm g new-nm new-g row size) nil (1+) nil nil nil nil) ((col) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::tg-loop-row (nil nil nil nil (if) nil nil) ((new-g) nil (not) (let) nil nil nil) (((new-g (tg-loop-col nm g new-nm new-g row 0 size))) nil nil (less-than) nil nil nil) ((row size nm g new-nm new-g size) nil (1+) nil nil nil nil) ((row) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::transpose-adjmatrix-graph (nil nil nil (let*) nil nil nil) (nil nil ((size (g-2d-size nm g))) nil nil nil nil) ((nm g new-nm new-g size) (0) (new-g) nil nil nil nil) (nil nil nil nil (defarray2) nil nil) ((new-nm size nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::transpose-adjvertices-2g (nil nil nil nil (if) nil nil) ((new-g) nil (endp) (let*) nil nil nil) ((adj-vertices-lsti) nil ((adj-verti (car adj-vertices-lsti))) nil nil (recursive-call) nil) ((i new-nm new-g) nil (new-g cdr) nil nil nil nil) ((adj-vertices-lsti) nil nil nil nil nil (aset2)) ((new-nm new-g adj-verti i) nil (quote) nil nil nil nil) ((t) nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::transpose-dt1g-aux (nil nil nil nil (if) nil nil) ((new-2g) nil (zp) (let*) nil nil nil) ((down-ctr) nil nil ((i (- size down-ctr))) nil nil nil) ((new-nm new-2g nm dt1g size) nil (adj-vertices-lsti new-2g 1-) nil nil nil nil) ((down-ctr) nil nil nil (aref1) (transpose-adjvertices-2g) nil) ((nm dt1g i i new-nm new-2g adj-vertices-lsti) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::transpose-dt1g (nil nil nil (let*) nil nil nil) (nil nil ((size (g-1d-size nm dt1g))) nil nil nil nil) ((new-nm rev-2g nm dt1g size size) nil (rev-2g) nil nil nil nil) (nil nil nil nil (defarray2) nil nil) ((new-nm size nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::dfs-vertex-loop (nil nil nil nil (if) nil nil) ((g-visit-state) nil (endp) (let) nil nil nil) ((v-lst (curr-v (car v-lst))) nil nil nil (if) nil nil) (nil nil nil (equal let*) nil (recursive-call) nil) ((nm g g-visit-state) nil (quote cdr) (colori) ((dff-old (df-forest g-visit-state))) (recursive-call) nil) ((white curr-v g-visit-state nm g g-visit-state v-lst) nil (g-visit-state dft-stub g-visit-state cdr) nil nil nil nil) ((v-lst) nil (dff-stub) (update-df-forest) nil (dfs-visit) nil)) (/countereg-gen/graph.lisp::compute-dfs (nil nil nil (let*) nil nil nil) (((g-visit-state (dfs-vertex-loop nm g v-lst g-visit-state))) nil nil nil (mv) nil nil) ((g-visit-state) nil (vert-ft-lst df-forest) nil nil nil nil) ((g-visit-state g-visit-state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::dfs (nil nil nil (acl2::with-local-stobj) nil nil nil) ((g-visit-state) nil nil nil (mv-let) nil nil) (nil nil nil (vert-ft-lst cons) nil (compute-dfs) nil) ((dfs-forest g-visit-state name g v-lst g-visit-state vert-ft-lst dfs-forest) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::add-entry-2g (nil nil nil nil (if) nil nil) ((g) nil (endp) (let*) nil nil nil) ((adj-vertices-lsti) nil ((adj-verti (car adj-vertices-lsti))) nil nil (recursive-call) nil) ((i nm g) nil (g cdr) nil nil nil nil) ((adj-vertices-lsti) nil nil nil nil nil (aset2)) ((nm g i adj-verti) nil (quote) nil nil nil nil) ((t) nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::make-dt2g-from-dt1g-aux (nil nil nil nil (if) nil nil) ((new-2g) nil (zp) (let*) nil nil nil) ((n) nil nil ((i (- size n))) nil nil nil) ((new-nm new-2g nm dt1g size) nil (adj-vertices-lsti new-2g 1-) nil nil nil nil) ((n) nil nil nil (aref1) (add-entry-2g) nil) ((nm dt1g i i new-nm new-2g adj-vertices-lsti) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::make-dt2g-from-dt1g (nil nil nil (let*) nil nil nil) (nil nil ((size (g-1d-size nm dt1g))) nil nil nil nil) ((new-nm new-2g nm dt1g size size) nil (new-2g) nil nil nil nil) (nil nil nil nil (defarray2) nil nil) ((new-nm size nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::dfs-on-dt1g (nil nil nil (let*) nil nil nil) (nil nil nil nil ((size (g-1d-size nm dt1g)) dfs) nil nil) ((new-nm new-2g v-lst) nil (v-lst new-nm new-2g) nil nil nil nil) (nil nil (quote) (make-n-upto-list) (make-dt2g-from-dt1g) nil nil) ((size nil subtype-dt2g new-nm nm dt1g) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::scc (nil nil nil (let*) nil nil nil) ((scc-ans) nil nil ((ord-vlist (car (dfs-on-dt1g nm dt1g)))) nil nil nil) (nil nil (transpose-2g scc-ans) nil nil nil nil) (nil nil nil nil (transpose-dt1g dfs) nil nil) ((nm dt1g transpose-2g ord-vlist) nil (quote quote) nil nil nil nil) ((dt2g-t dt2g-t) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::scc-top-level (nil nil nil nil (if) nil nil) ((nil) nil (null) (let*) nil nil nil) ((dt1g-alst) nil (cdr) ((nm (quote subtype-dt1g-scc))) nil nil nil) (nil nil (len-dt1g dt1g) (scc) nil nil nil) ((nm dt1g) nil (len) (compress1) nil nil nil) ((dt1g-alst nm) nil nil (cons) nil nil nil) ((dt1g-alst) nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::dfs-on-alst (nil nil nil nil (if) nil nil) ((nil) nil (null) (let*) nil nil nil) ((alst) nil nil nil (dfs) ((len-dt1g (len alst))) nil) ((nm2g dt2g v-lst) nil (dt1g nm2g dt2g v-lst) nil nil nil nil) (nil nil (strip-cars) (compress1) (modify-symbol make-dt2g-from-dt1g) nil nil) ((nm nil nm -2G nm2g nm dt1g alst) nil nil (cons) nil nil nil) ((alst) nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::tc-init-dt2g-from-dt1g-entry (nil nil nil nil (if) nil nil) ((M) nil (endp) (let*) nil nil nil) ((adj-vlsti) nil ((M (aset2 nmI M i (car adj-vlsti) 1))) nil nil (recursive-call) nil) ((nmI M i) nil (M cdr) nil nil nil nil) ((adj-vlsti) nil nil nil nil nil (aset2)) ((nmI M i i) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::tc-init-dt2g-from-dt1g (nil nil nil nil (if) nil nil) ((M) nil (zp) (let*) nil nil nil) ((ctr) nil nil ((i (- size ctr))) nil nil nil) ((nmI M nmE s1g size) nil (adj-vlsti M 1-) nil nil nil nil) ((ctr) nil nil nil (aref1) (tc-init-dt2g-from-dt1g-entry) nil) ((nmE s1g i nmI M i adj-vlsti) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::dist-min (nil nil nil nil (cond) nil nil) (nil nil ((equal d1 (quote inf)) (equal d2 (quote inf)) t) nil nil nil nil) ((d2 d1) nil nil (min) nil nil nil) ((d1 d2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::dist-add (nil nil nil nil (cond) nil nil) (nil nil ((equal d1 (quote inf)) (equal d2 (quote inf)) t) nil nil nil nil) ((d1 d2) nil nil (+) nil nil nil) ((d1 d2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::tc-loop-i-col (nil nil nil nil (if) nil nil) ((M) nil (zp) (let*) nil nil nil) ((ctr) nil ((j (- size ctr))) nil nil nil nil) ((nm M k i size) nil (M 1-) nil nil nil nil) ((ctr) nil nil nil nil nil (aset2)) ((nm M i j) nil nil (dist-min) nil nil nil) (nil nil nil (dist-add) nil (aref2) nil)) (/countereg-gen/graph.lisp::tc-loop-i-row (nil nil nil nil (if) nil nil) ((M) nil (zp) (let*) nil nil nil) ((ctr) nil ((row (- size ctr))) nil nil nil (recursive-call)) ((nm M k size) nil (M 1-) nil nil nil nil) ((ctr) nil nil nil nil nil nil) ((nm M k row size size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::tc-loop-intermediate (nil nil nil nil (if) nil nil) ((M) nil (zp) (let*) nil nil nil) ((ctr) nil ((k (- size ctr))) nil nil (recursive-call) nil) ((nm M size) nil (M 1-) nil nil nil nil) ((ctr) nil nil nil nil nil (tc-loop-i-row)) ((nm M k size size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::subtype-implied-closure (nil nil nil (let*) nil nil nil) (nil nil nil ((size (g-1d-size dag-nm subtype-dag))) nil (tc-loop-intermediate) nil) ((implied-nm implied-M size size) nil (implied-M implied-M) nil nil nil nil) (nil nil nil nil (defarray2) nil nil) ((implied-nm size implied-nm implied-M dag-nm subtype-dag size size) nil (quote) nil nil nil nil) ((inf) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::is-subtype-in-implied-graph (nil nil (natp) nil nil nil nil) (nil nil nil nil nil (aref2) nil) ((s-nmI s2gI t1 t2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::collect-subtypes1 (nil nil nil nil (if) nil nil) ((ans) nil (zp) (let*) nil nil nil) ((ctr) nil ((v3 (- size ctr))) nil nil nil nil) ((s-nmI s2gI v1 size) nil (is-ST 1-) nil (if) nil nil) ((ctr is-ST ans) nil nil (cons) nil (is-subtype-in-implied-graph) nil) ((v3 v1 s-nmI s2gI v3 ans) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::collect-subtypes (nil nil nil (let) nil nil nil) (((size (car (dimensions s-nmI s2gI)))) nil nil nil nil nil nil) ((s-nmI s2gI v1 size size nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::mark-disjoint-vertex-vertex (nil nil nil (let) nil nil nil) (((dis2gI (aset2 d-nmI dis2gI v3 v4 (quote t))) dis2gI) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::mark-disjoint-vertex-vertexlist (nil nil nil nil (if) nil nil) ((dis2gI) nil (endp) (let*) nil nil nil) ((v4s (dis2gI (mark-disjoint-vertex-vertex d-nmI dis2gI v3 (car v4s)))) nil nil nil nil (recursive-call) nil) ((d-nmI dis2gI v3) nil (cdr) nil nil nil nil) ((v4s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::mark-disjoint-vertex-lists (nil nil nil nil (if) nil nil) ((dis2gI) nil (endp) (let*) nil nil nil) ((v3s (dis2gI (mark-disjoint-vertex-vertexlist d-nmI dis2gI (car v3s) v4s))) nil nil nil nil (recursive-call) nil) ((d-nmI dis2gI v4s) nil (cdr) nil nil nil nil) ((v3s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::disjoint-implied-closure-aux2 (nil nil nil (let) nil nil nil) (nil nil ((v3s (collect-subtypes s-nmI s2gI v1))) nil nil (mark-disjoint-vertex-lists) nil) ((d-nmI dis2gI v3s v4s) nil (v4s) nil nil nil nil) (nil nil nil nil (collect-subtypes) nil nil) ((s-nmI s2gI v2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::disjoint-implied-closure-aux1 (nil nil nil nil (if) nil nil) ((dis2gI) nil (endp) (let*) nil nil nil) ((adj-vlst-v1) nil nil ((v2 (car adj-vlst-v1))) nil nil nil) ((d-nmI dis2gI s-nmI s2gI v1) nil (dis2gI dis2gI cdr) nil nil nil nil) ((adj-vlst-v1) nil nil nil nil nil (aset2)) ((d-nmI dis2gI v1 v2 d-nmI dis2gI v1 v2 s-nmI s2gI) nil (quote) nil nil nil nil) ((t) nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::disjoint-implied-closure-aux (nil nil nil nil (if) nil nil) ((dis2gI) nil (zp) (let*) nil nil nil) ((ctr) nil nil ((i (- size ctr))) nil nil nil) ((d-nmI dis2gI dag-nm dag-d1g s-nmI s2gI size) nil (adj-vlsti dis2gI 1-) nil nil nil nil) ((ctr) nil nil nil (aref1) nil nil) ((dag-nm dag-d1g i d-nmI dis2gI s-nmI s2gI i adj-vlsti) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::disjoint-implied-closure (nil nil nil (let*) nil nil nil) ((dis2gI) nil nil ((size (car (dimensions s-nmI s2gI)))) nil nil nil) (nil nil (dis2gI dis2gI) nil nil nil nil) (nil nil nil nil (defarray2) nil nil) ((d-nmI size d-nmI dis2gI dag-nm dag-d1g s-nmI s2gI size size) nil (quote) nil nil nil nil) ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::flatten-tree-tl (nil nil nil nil (if) nil nil) ((lst) nil (null) nil (if) nil nil) ((bt) nil (atom) (cons recursive-call) nil nil nil) ((bt bt lst) nil (car) (recursive-call) nil nil nil) ((bt lst) nil (cdr) nil nil nil nil) ((bt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::flatten-tree (nil nil nil (flatten-tree-tl) nil nil nil) ((tree nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::find-min-node-in-list-tl (nil nil nil nil (if) nil nil) ((min) nil (endp) (recursive-call) nil nil nil) ((lst) nil (cdr) (min) nil nil nil) ((lst min) nil (car) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::find-min-node-in-list (nil nil nil nil (if) nil nil) ((nil) nil (endp) (find-min-node-in-list-tl) nil nil nil) ((lst lst) nil (car) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::find-min-node-and-flatten-tree (nil nil nil (let*) nil nil nil) (nil nil ((lst (flatten-tree tree))) (mv) nil nil nil) ((min lst) nil (min) nil nil nil nil) (nil nil (find-min-node-in-list) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::fill-dag-and-make-mapping-from-explicit-graph-scc1 (nil nil nil nil (if) nil nil) (nil nil (endp) (mv let*) nil nil nil) ((e-g-alist) nil nil (compress1 compress1) ((curr-entry (car e-g-alist)) if) nil nil) ((dag-nm dag e-i-map-nm e-i-map-arr) nil (i eq-node adj-vs-i) (equal let* let*) nil nil nil) ((i eq-node) nil (car cdr (dag (aset1 dag-nm dag up-ctr-dag adj-vs-i)) (dag (aset1 dag-nm dag eq-node (union-equal adj-vs-i (aref1 dag-nm dag eq-node))))) nil (aref1) nil nil) ((curr-entry scc-nm scc-arr i curr-entry scc-nm scc-arr size-e dag-nm dag e-i-map-nm e-i-map-arr scc-nm scc-arr size-e up-ctr-dag dag-nm dag e-i-map-nm e-i-map-arr) nil (e-i-map-arr cdr 1+ e-i-map-arr cdr) nil nil nil nil) ((e-g-alist up-ctr-dag e-g-alist) nil nil nil nil (aset1 aset1) nil)) (/countereg-gen/graph.lisp::update-edges-using-dag-map (nil nil nil nil (if) nil nil) (nil nil (endp) (remove1 let*) nil nil nil) ((adj-vs u) nil (remove-duplicates) ((v (car adj-vs))) nil nil (recursive-call)) ((ans u dag-map-nm dag-map-arr ans) nil (v-mapped ans cdr) nil nil nil nil) ((adj-vs) nil nil (append) (aref1) nil nil) ((dag-map-nm dag-map-arr v ans) nil (list) nil nil nil nil) ((v-mapped) nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::fill-dag-from-dag-map-and-explicit-graph (nil nil nil nil (if) nil nil) (nil nil (zp) (compress1 let*) nil nil nil) ((down-ctr-dag dag-nm dag) nil nil nil ((i (- size-dag down-ctr-dag))) nil nil) ((size-dag dag-first-pass-nm dag-first-pass-finished dag-nm dag dag-map-nm dag-map-arr) nil (adj-vs adj-vs-updated dag 1-) nil nil nil nil) ((down-ctr-dag) nil nil nil (aref1) (aset1) (update-edges-using-dag-map)) ((dag-first-pass-nm dag-first-pass-finished i i adj-vs dag-map-nm dag-map-arr nil dag-nm dag i adj-vs-updated) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::fill-dag-and-make-mapping-from-explicit-graph-scc (nil nil nil nil (mv-let) nil nil) (nil nil (dag-first-pass-finished) (let*) nil nil nil) ((dag-map-arr scc-nm scc-arr size-e e-g-alist dag-first-pass-nm dag-first-pass dag-map-nm dag-map-arr) (0) ((dag (defarray1 dag-nm size-dag nil))) (mv) nil nil nil) ((dag dag-map-arr) nil (dag) nil nil nil nil) (nil nil nil nil nil nil nil) ((size-dag size-dag dag-first-pass-nm dag-first-pass-finished dag-nm dag dag-map-nm dag-map-arr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::fill-scc-alist-from-scc-component (nil nil nil nil (if) nil nil) ((scc-alist) nil (endp) (let) nil nil nil) ((equivalent-nodes (scc-alist (acons (car equivalent-nodes) representative scc-alist))) nil nil nil (recursive-call) nil nil) ((representative scc-alist) nil (cdr) nil nil nil nil) ((equivalent-nodes) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::fill-scc-alist-from-sccs (nil nil nil nil (if) nil nil) ((scc-alist) nil (endp) (let*) nil nil nil) ((sccs (scc (car sccs))) nil nil nil (if) nil nil) (nil nil (null) (recursive-call) (mv-let) nil nil) ((scc scc-alist) nil (cdr representative find-min-node-and-flatten-tree) (let*) nil nil nil) ((sccs equivalent-nodes scc (scc-alist (fill-scc-alist-from-scc-component representative equivalent-nodes scc-alist))) nil nil (recursive-call) nil nil nil) ((scc-alist) nil (cdr) nil nil nil nil)) (/countereg-gen/graph.lisp::make-dag-and-dag-map-from-explicit-graph-alist (nil nil nil (let*) nil nil nil) (nil nil nil nil nil nil nil) ((scc-nm size-e dag-first-pass-nm dag-first-pass size-dag dag-nm dag-map-nm dag-map-arr) nil (size-dag dag-first-pass-nm dag-first-pass scc-nm scc-alist dag-map-arr merge-sort-nat-alist-<) nil (alst-to-array1) nil nil) ((scc-nm scc-alist e-g-alist) nil (len quote quote len) (fill-scc-alist-from-sccs) (defarray1 defarray1) nil nil) ((sccs dag-first-pass-tmp-name dag-first-pass-nm size-e nil scc-maparr sccs nil dag-map-nm size-e nil scc-alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::is-disjoint-in-implied-graph (nil nil nil (or) nil nil nil) (nil nil nil nil nil (aref2 aref2) nil) ((d-nmI d2gI t1 t2 d-nmI d2gI t2 t1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::is-disjoint (nil nil nil (let*) nil nil nil) (nil nil nil ((e-vert-map (table-alist (quote explicit-vertex-index-map) wrld))) (if) nil nil) ((nil) nil (t1-entry t2-entry) (let*) (and) nil nil) ((e-vert-map t1-entry t2-entry) nil nil (assoc-eq assoc-eq) nil (is-disjoint-in-implied-graph) nil) ((t1 e-vert-map t2 e-vert-map t1-index t2-index d-nmI d2gI) nil (e-i-map-nm-alst e-i-map-nm e-i-map-arr t1-index t2-e-index t2-index nm-d2gI d-nmI d2gI) nil nil nil nil) (nil nil (caar cdar cdr caar cdar) (table-alist table-alist) (aref1 aref1) nil nil) ((wrld e-i-map-nm-alst e-i-map-nm-alst e-i-map-nm e-i-map-arr t1-e-index t2-entry e-i-map-nm e-i-map-arr t2-e-index wrld nm-d2gI nm-d2gI) nil (quote quote) nil nil nil nil)) (/countereg-gen/graph.lisp::is-subtype (nil nil nil (let*) nil nil nil) (nil nil nil ((e-vert-map (table-alist (quote explicit-vertex-index-map) wrld))) (if) nil nil) ((nil) nil (t1-entry t2-entry) (let*) (and) nil nil) ((e-vert-map t1-entry t2-entry) nil nil (assoc-eq assoc-eq) nil (is-subtype-in-implied-graph) nil) ((t1 e-vert-map t2 e-vert-map t1-index t2-index s-nmI s2gI) nil (e-i-map-nm-alst e-i-map-nm e-i-map-arr t1-index t2-e-index t2-index nm-s2gI s-nmI s2gI) nil nil nil nil) (nil nil (caar cdar cdr caar cdar) (table-alist table-alist) (aref1 aref1) nil nil) ((wrld e-i-map-nm-alst e-i-map-nm-alst e-i-map-nm e-i-map-arr t1-e-index t2-entry e-i-map-nm e-i-map-arr t2-e-index wrld nm-s2gI nm-s2gI) nil (quote quote) nil nil nil nil)) (/countereg-gen/graph.lisp::add-to-dtg-alist (nil nil nil nil (cond) nil nil) (nil nil ((endp dtg-alst) (eql t1-index (caar dtg-alst)) t) nil nil nil nil) ((ans) nil nil (append) nil (recursive-call) nil) ((t1-index t2-index-lst) nil (cdr cdr) (cons) (acons) nil nil) ((t1-index ans dtg-alst dtg-alst ans) nil (car) nil (if) nil nil) ((t2-index-lst dtg-alst) nil nil (equal union-equal) nil nil nil) ((t2-index-lst t2-index-lst) nil (cdar cdar) nil nil nil nil)) (/countereg-gen/graph.lisp::map-assoc-eq-only-value (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((keys) nil (cdr) (recursive-call) nil nil nil) ((alst) nil (cdr) (assoc-eq) nil nil nil) ((alst keys) nil (car) nil nil nil nil) ((keys) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::maparr-equal1 (nil nil nil nil (if) nil nil) ((t) nil (zp) (let) nil nil nil) ((d-ctr (i (- len1 d-ctr))) nil nil (and) nil nil nil) (nil nil nil (equal) nil nil nil) ((nm1 m1 nm2 m2 len1) nil (1-) nil (aref1 aref1) nil nil) ((nm1 m1 i nm2 m2 i d-ctr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::maparr-equal (nil nil nil nil (if) nil nil) ((nil) nil nil (equal let) nil nil nil) (((len1 (g-1d-size nm1 m1))) nil nil (g-1d-size g-1d-size) nil nil nil) ((nm1 m1 nm2 m2 nm1 m1 nm2 m2 len1 len1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::my-equal (nil nil nil (equal) nil nil nil) ((x1 x2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/countereg-gen/graph.lisp::sync-globals-for-dtg-deprecated (nil nil nil (acl2::state-global-let*) nil nil nil) (((guard-checking-on nil)) nil nil (let*) nil nil nil) (nil nil nil nil (mv-let) nil nil) (nil nil (d-e-i-map-nm s2gI-nm d2gI-nm s1g-dag-nm d1g-dag-nm s-dtg-alst d-dtg-alst sccs s1g-dag) nil (mv-let) (make-dag-and-dag-map-from-explicit-graph-alist) nil) ((s-e-i-maparr sccs s-dtg-alst s1g-dag-nm s-e-i-map-nm) nil (quote quote quote quote quote get-subtype-dtg-alst get-disjoint-dtg-alst scc-top-level d1g-dag) nil (if) (make-dag-and-dag-map-from-explicit-graph-alist) nil) ((d-explicit-implied-index-map implied-subtype-dt2g implied-disjoint-dt2g subtype-dag-dt1g disjoint-dag-dt1g state state s-dtg-alst d-e-i-maparr sccs d-dtg-alst d1g-dag-nm d-e-i-map-nm) nil nil (let*) (er) (maparr-equal) nil) ((s-e-i-map-nm s-e-i-maparr d-e-i-map-nm d-e-i-maparr soft The explicit-implicit index mapping should be same for disjoint and subtype graphs. BUG in code!) nil ((s-closure (compress2 s2gI-nm (subtype-implied-closure s2gI-nm s1g-dag-nm s1g-dag))) quote) nil nil (er-progn) nil)))