((/models/y86/y86-basic/common/operations.lisp::np-def-n (nil nil nil (let*) nil nil nil) (nil nil nil nil nil nil nil) (nil nil (str-2-to-n nXYp iXYp ntoi iton nXYp-logand-nXYp-less-than nXYp-logxor-nXYp-less-than nXYp-logior-nXYp-less-than ` ` ` ` ` ` `) nil nil nil nil) (nil nil (symbol-name in-theory) nil (mk-name mk-name) (mk-name mk-name defun defun defun defthm) nil) ((N str-n P I str-n P N str-n -TO-I str-n I str-n -TO-N str-n N str-n P-LOGAND-N str-n P-LESS-THAN- str-2-to-n N str-n P-LOGXOR-N str-n P-LESS-THAN- str-2-to-n N str-n P-LOGIOR-N str-n P-LESS-THAN- str-2-to-n x x x :rule-classes :linear :rule-classes :linear :hints (Goal :in-theory (disable logxor logxor-<=-expt-2-to-n) :use ((:instance logxor-<=-expt-2-to-n (n (, n))))) :rule-classes :linear :hints (Goal :in-theory (disable logior logior-less-than-or-equal) :use ((:instance logior-less-than-or-equal (n (, n)))))) nil (packn , declare , declare , declare disable , , ,) (implies implies implies) (and if if) nil nil) ((iXYp ntoi x iton x nXYp-logand-nXYp-less-than nXYp-logxor-nXYp-less-than nXYp-logior-nXYp-less-than) nil (list integerp ,) (xargs <= < xargs < - xargs < + or < and < and <) nil nil nil) ((:guard t x x x :guard x x :guard x x iXYp) (0) (, , (, nXYp) , , (, iXYp) , (, nXYp) (, nXYp) , (, nXYp) (, nXYp) , (, nXYp) (, nXYp) ,) (expt logand logxor logior) nil nil nil)) (/models/y86/y86-basic/common/operations.lisp::np-defs (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((lst) nil (np-def-n recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))