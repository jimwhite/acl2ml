((/misc/wet.lisp::wet-trace-specs1 (nil nil nil (cond) nil nil nil) (nil nil ((endp fns) t) nil nil nil nil) ((acc) nil nil nil (recursive-call) nil nil) ((tail) nil (cdr) (cons) nil nil nil) ((fns acc) nil (`) nil nil nil nil) (nil nil nil nil ((, (car fns))) nil nil) ((:entry) nil (,@) (let) nil nil nil)) (/misc/wet.lisp::executable-ancestors (nil nil nil nil (cond) nil nil) (nil nil (flg (or (member-eq fn acc) (getprop fn (quote predefined) nil (quote current-acl2-world) wrld)) t) nil nil nil nil) ((acc) nil nil nil (if) (mv-let) nil) ((acc) nil (null name declare) (constraint-info cond) nil (recursive-call) nil) ((fn flg wrld x fn wrld) nil (cdr ignore name t) nil nil (recursive-call) nil) ((fn nil wrld acc x acc) nil (car) (let) nil nil nil) ((fn (body (getprop fn (quote unnormalized-body) nil (quote current-acl2-world) wrld))) nil nil (cond) nil nil nil)) (/misc/wet.lisp::executable-user-fns (nil nil nil (cond) nil nil nil) (nil nil ((or (null wrld-tail) (and (eq (caar wrld-tail) (quote command-landmark)) (eq (cadar wrld-tail) (quote global-value)) (equal (access-command-tuple-form (cddar wrld-tail)) (quote (exit-boot-strap-mode))))) t) nil nil nil nil) ((acc) nil nil nil (recursive-call) nil nil) ((wrld) nil (cdr) (cond) nil nil nil) ((wrld-tail) nil ((and (eq (cadar wrld-tail) (quote formals)) (mv-let (name x) (constraint-info (caar wrld-tail) wrld) (declare (ignore x)) (not name))) t) nil nil nil nil) ((acc) nil nil (cons) nil nil nil) ((acc) nil (caar) nil nil nil nil)) (/misc/wet.lisp::wet-trace-specs (nil nil nil (let) nil nil nil) (nil nil nil ((tail (` (:exit (let ((state *the-live-state*)) (f-put-global (quote wet-stack) (cdr (f-get-global (quote wet-stack) state)) state)) (,@ (and (not (eq compile :same)) (` (:compile (, compile))))) :evisc-tuple :no-print)))) nil (cond) nil) (nil nil (wrld ctx (eq fns :all) (eq fns t) (true-listp fns) t) nil nil nil nil) (nil nil (w quote value value) nil nil (mv-let er) nil) ((state wet soft ctx Illegal value for :fns (must be t, :all, or a true list of ~
             symbols):~|~x0 fns) nil (declare) (cond) (wet-trace-specs1 erp wet-trace-specs1) nil nil) ((tail nil trans bindings state form :stobjs-out t ctx wrld state fns tail nil) nil (quote ignore erp t) nil (executable-user-fns) nil nil) ((wrld wrld nil (:stobjs-out . :stobjs-out) bindings) nil nil (let) (mv) nil nil)) (/misc/wet.lisp::natp-digits-base-10 (nil nil nil nil (if) nil nil) (nil (0) (zp) (+) nil nil nil) ((i) (1) (recursive-call) nil nil nil nil) (nil nil nil (floor) nil nil nil) ((i) (10) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/wet.lisp::print-numbered-list (nil nil nil nil nil nil nil) ((lst chan evisc-tuple state) (1) (natp-digits-base-10) nil nil nil nil) (nil nil (length) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))