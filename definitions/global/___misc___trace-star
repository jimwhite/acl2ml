((/misc/trace-star.lisp::trace*-entry (nil nil (`) nil nil nil nil) (nil nil (:fmt) nil nil nil nil) (nil nil nil nil nil (msg) nil) ((~@1~y2) nil (first-trace-printing-column) (cons) nil (cond) nil) ((state) nil ((< 1 (@ trace-level)) (not (eq (quote :none) (@ acl2::guard-checking-on))) (getprop (quote (, fn)) (quote predefined) nil (quote current-acl2-world) (w state)) t quote) (make-evalable-with-stobjs) nil nil nil) (( !! Warning: guard-checking is not :none, so trace    !!~|~t0~
                 !!   output could be misleading or appear incorrect. !!~|~t0~
                 !!   (see :DOC set-guard-checking)                   !!~|~t0 !! Warning: tracing a built-in function, so trace    !!~|~t0~
                 !!   output could be misleading or appear incorrect. !!~|~t0~
                 !! (Consider writing & using a wrapper function.)    !!~|~t0  acl2::arglist) nil (,) nil nil nil (getprop)) ((fn nil) nil (quote quote quote w) nil nil nil nil)) (/misc/trace-star.lisp::trace*-exit (nil nil (`) nil nil nil nil) (nil nil (:fmt) nil nil nil nil) (nil nil nil nil nil (msg) nil) ((~y2~|~t0= ~y1) nil nil (max let cons) nil nil nil) (((stobjs-out (getprop (quote (, fn)) (quote stobjs-out) (quote (nil)) (quote current-acl2-world) (w state)))) (0) (quote) (- make-evalable-with-stobjs) (if) nil nil) ((acl2::arglist) (2) (first-trace-printing-column car ,) (and cons) nil nil (getprop)) ((state fn nil) nil (consp endp quote quote quote quote w) (make-evalable-with-stobjs make-evalable-with-stobjs) nil nil nil)) (/misc/trace-star.lisp::trace*-modify1 (nil nil nil nil (cond) nil nil) (nil nil ((and (consp trace-spec) (symbolp (car trace-spec)) (keyword-value-listp (cdr trace-spec))) (symbolp trace-spec) t) nil nil nil nil) (nil nil nil (let recursive-call) nil (er) nil) (((fn (car trace-spec)) ctx hard ctx A trace spec must be a symbol or a symbol consed onto an alternating list ~
            of the form (:kwd1 val1 :kwd2 val2 ...).  The trace spec ~x0 is thus ~
            illegal.  See :DOC trace$. trace-spec) nil (list) (append) nil nil nil) ((trace-spec trace-spec) nil nil nil nil nil nil) ((:entry :exit :hide nil :evisc-tuple) nil (trace*-entry trace*-exit quote) nil nil nil nil) ((fn fn) nil nil nil nil (list) nil)) (/misc/trace-star.lisp::trace*-modify (nil nil nil (cond) nil nil nil) (nil nil ((endp trace-specs) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil nil (trace*-modify1 recursive-call) nil nil nil) ((ctx ctx) nil (car cdr) nil nil nil nil) ((trace-specs trace-specs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/trace-star.lisp::app (nil nil nil nil (if) nil nil) ((y) nil (endp) (cons) nil nil nil) ((x) nil (car) (recursive-call) nil nil nil) ((x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/trace-star.lisp::fact (nil nil nil nil (if) nil nil) (nil (1) (zp) (*) nil nil nil) ((n n) nil (recursive-call) nil nil nil nil) (nil nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))