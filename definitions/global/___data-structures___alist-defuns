((/data-structures/alist-defuns.lisp::bind (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (eql x (car (car a))) t) nil nil nil nil) (nil nil (list) (cons cons) nil nil nil) (nil nil (cdr car) (cons cons) (recursive-call) nil nil) ((x y x y a a x y) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-eq (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (eq x (car (car a))) t) nil nil nil nil) (nil nil (list) (cons cons) nil nil nil) (nil nil (cdr car) (cons cons) (recursive-call) nil nil) ((x y x y a a x y) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (equal x (car (car a))) t) nil nil nil nil) (nil nil (list) (cons cons) nil nil nil) (nil nil (cdr car) (cons cons) (recursive-call) nil nil) ((x y x y a a x y) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-all (nil nil nil nil (cond) nil nil) (nil nil ((endp keys) (endp vals) t) nil nil nil nil) ((a a) nil nil nil (bind) nil nil) (nil nil (car car) nil (recursive-call) nil nil) ((keys vals a) nil (cdr cdr) nil nil nil nil) ((keys vals) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-all-eq (nil nil nil nil (cond) nil nil) (nil nil ((endp keys) (endp vals) t) nil nil nil nil) ((a a) nil nil nil (bind-eq) nil nil) (nil nil (car car) nil (recursive-call) nil nil) ((keys vals a) nil (cdr cdr) nil nil nil nil) ((keys vals) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-all-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp keys) (endp vals) t) nil nil nil nil) ((a a) nil nil nil (bind-equal) nil nil) (nil nil (car car) nil (recursive-call) nil nil) ((keys vals a) nil (cdr cdr) nil nil nil nil) ((keys vals) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::binding (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc) nil nil nil) ((x a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::binding-eq (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-eq) nil nil nil) ((x a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::binding-equal (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((x a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bound? (nil nil (consp) nil nil nil nil) (nil nil nil (assoc) nil nil nil) ((x a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bound?-eq (nil nil (consp) nil nil nil nil) (nil nil nil (assoc-eq) nil nil nil) ((x a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bound?-equal (nil nil (consp) nil nil nil nil) (nil nil nil (assoc-equal) nil nil nil) ((x a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::all-bound? (nil nil nil (cond) nil nil nil) (nil nil ((endp l) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (bound? recursive-call) nil nil nil) ((a a) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::all-bound?-eq (nil nil nil (cond) nil nil nil) (nil nil ((endp l) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (bound?-eq recursive-call) nil nil nil) ((a a) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::all-bound?-equal (nil nil nil (cond) nil nil nil) (nil nil ((endp l) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (bound?-equal recursive-call) nil nil nil) ((a a) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::all-bindings (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (bound? (car l) a) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((a) nil (cdr) (binding recursive-call) nil nil nil) ((a a l) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::all-bindings-eq (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (bound?-eq (car l) a) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((a) nil (cdr) (binding-eq recursive-call) nil nil nil) ((a a l) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::all-bindings-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (bound?-equal (car l) a) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((a) nil (cdr) (binding-equal recursive-call) nil nil nil) ((a a l) nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::domain (nil nil (strip-cars) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::domain-restrict (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (member (car (car a)) l) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((l) nil (car cdr) (recursive-call) nil nil nil) ((a l a) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::domain-restrict-eq (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (member-eq (car (car a)) l) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((l) nil (car cdr) (recursive-call) nil nil nil) ((a l a) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::domain-restrict-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (member-equal (car (car a)) l) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((l) nil (car cdr) (recursive-call) nil nil nil) ((a l a) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::range (nil nil (strip-cdrs) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::rembind (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (eql x (car (car a))) t) nil nil nil nil) ((nil) nil nil (recursive-call cons) nil nil nil) ((x) nil (cdr car) (recursive-call) nil nil nil) ((a a x) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::rembind-eq (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (eq x (car (car a))) t) nil nil nil nil) ((nil) nil nil (recursive-call cons) nil nil nil) ((x) nil (cdr car) (recursive-call) nil nil nil) ((a a x) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::rembind-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp a) (equal x (car (car a))) t) nil nil nil nil) ((nil) nil nil (recursive-call cons) nil nil nil) ((x) nil (cdr car) (recursive-call) nil nil nil) ((a a x) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::rembind-all (nil nil nil (cond) nil nil nil) (nil nil ((endp l) t) nil nil nil nil) ((a) nil nil (rembind) nil nil nil) (nil nil (car) (recursive-call) nil nil nil) ((l a) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::rembind-all-eq (nil nil nil (cond) nil nil nil) (nil nil ((endp l) t) nil nil nil nil) ((a) nil nil (rembind-eq) nil nil nil) (nil nil (car) (recursive-call) nil nil nil) ((l a) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::rembind-all-equal (nil nil nil (cond) nil nil nil) (nil nil ((endp l) t) nil nil nil nil) ((a) nil nil (rembind-equal) nil nil nil) (nil nil (car) (recursive-call) nil nil nil) ((l a) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::collect-bound (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (bound? (car l) a) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((a) nil (car cdr) (recursive-call) nil nil nil) ((l a l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::collect-bound-eq (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (bound?-eq (car l) a) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((a) nil (car cdr) (recursive-call) nil nil nil) ((l a l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::collect-bound-equal (nil nil nil nil (cond) nil nil) (nil nil ((endp l) (bound?-equal (car l) a) t) nil nil nil nil) ((nil) nil nil (cons recursive-call) nil nil nil) ((a) nil (car cdr) (recursive-call) nil nil nil) ((l a l) nil (cdr) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-pairs (nil nil nil (cond) nil nil nil) (nil nil ((endp a1) t) nil nil nil nil) ((a2) nil nil nil (bind) nil nil) (nil nil (caar cdar) (recursive-call) nil nil nil) ((a1 a1 a2) nil (cdr) nil nil nil nil) ((a1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-pairs-eq (nil nil nil (cond) nil nil nil) (nil nil ((endp a1) t) nil nil nil nil) ((a2) nil nil nil (bind-eq) nil nil) (nil nil (caar cdar) (recursive-call) nil nil nil) ((a1 a1 a2) nil (cdr) nil nil nil nil) ((a1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::bind-pairs-equal (nil nil nil (cond) nil nil nil) (nil nil ((endp a1) t) nil nil nil nil) ((a2) nil nil nil (bind-equal) nil nil) (nil nil (caar cdar) (recursive-call) nil nil nil) ((a1 a1 a2) nil (cdr) nil nil nil nil) ((a1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::alist-compose-domain (nil nil nil (cond) nil nil nil) (nil nil ((endp dom) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((pair1 (assoc (car dom) a1))) nil nil nil (if) nil nil) ((pair1) nil nil (let) (recursive-call) nil nil) (((pair2 (assoc (cdr pair1) a2)) a1 a2) nil (cdr) nil (if) nil nil) ((pair2 dom) nil nil nil (bind recursive-call) nil nil)) (/data-structures/alist-defuns.lisp::alist-compose (nil nil nil nil (alist-compose-domain) nil nil) ((a1 a2) nil (domain) nil nil nil nil) ((a1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::alist-compose-domain-eq (nil nil nil (cond) nil nil nil) (nil nil ((endp dom) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((pair1 (assoc-eq (car dom) a1))) nil nil nil (if) nil nil) ((pair1) nil nil (let) (recursive-call) nil nil) (((pair2 (assoc-eq (cdr pair1) a2)) a1 a2) nil (cdr) nil (if) nil nil) ((pair2 dom) nil nil nil (bind-eq recursive-call) nil nil)) (/data-structures/alist-defuns.lisp::alist-compose-eq (nil nil nil nil (alist-compose-domain-eq) nil nil) ((a1 a2) nil (domain) nil nil nil nil) ((a1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/data-structures/alist-defuns.lisp::alist-compose-domain-equal (nil nil nil (cond) nil nil nil) (nil nil ((endp dom) t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((pair1 (assoc-equal (car dom) a1))) nil nil nil (if) nil nil) ((pair1) nil nil (let) (recursive-call) nil nil) (((pair2 (assoc-equal (cdr pair1) a2)) a1 a2) nil (cdr) nil (if) nil nil) ((pair2 dom) nil nil nil (bind-equal recursive-call) nil nil)) (/data-structures/alist-defuns.lisp::alist-compose-equal (nil nil nil nil (alist-compose-domain-equal) nil nil) ((a1 a2) nil (domain) nil nil nil nil) ((a1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))