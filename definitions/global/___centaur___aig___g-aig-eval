((/centaur/aig/g-aig-eval.lisp::atom-key-gobj-val-alistp (nil nil nil nil (if) nil nil) (nil nil (atom not) nil nil nil (and)) ((x) nil (gl::g-keyword-symbolp consp atom not gl::gobjectp recursive-call) nil nil nil nil) ((x) nil (car caar gl::g-keyword-symbolp cdar cdr) nil nil nil nil) ((x x x x) nil (caar) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/g-aig-eval.lisp::gobj-alist-to-bfr-alist (nil nil nil nil (if) nil nil) (nil nil (atom) (mv b*) nil nil nil) ((x nil nil) nil ((test (gl::gtests (cdar x) hyp))) (mv) nil nil nil) (nil nil ((mv rst rst-unknown)) (gl::bfr-or) (hons-acons!) nil nil) ((rst rst-unknown) nil (caar gl::gtests-nonnil) (recursive-call let) nil nil nil) ((hyp x test (unk (gl::gtests-unknown test))) nil (cdr) (and) nil nil nil) ((x unk) nil nil (prog2$) nil nil nil)) (/centaur/aig/g-aig-eval.lisp::g-boolean-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (gl::g-boolean recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/g-aig-eval.lisp::aig-bfr-compose (nil nil nil nil nil (gl::bfr-case) nil) ((:bdd :aig) nil nil (aig-q-compose aig-compose) nil nil nil) ((x al x al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/g-aig-eval.lisp::aig-bfr-compose-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil nil (aig-bfr-compose recursive-call) nil nil nil) ((al al) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/g-aig-eval.lisp::aig-bfrify-list (nil nil nil nil nil (gl::bfr-case) nil) ((:bdd :aig) nil nil (b* mv) nil nil nil) ((((mv bdds & exact) (ec-call (aig-bddify-list tries aigs bfr-al maybe-wash-args))) t) nil nil (mv aig-compose-list) nil nil nil) ((bdds exact aigs bfr-al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/aig/g-aig-eval.lisp::aig-eval-list-symbolic (nil nil nil (let) nil nil nil) (nil nil nil nil ((x (mbe :logic (gl::gobj-fix x) :exec x)) if) nil nil) (nil nil (al hyp tries) (and b* prog2$) nil nil nil) ((ans) nil (atom-key-gobj-val-alistp gl::general-concretep) (cw gl::g-apply) (if ((mv bfr-al badp) (gobj-alist-to-bfr-alist al hyp))) (mbe mbe) nil) ((:logic :exec al :logic :exec hyp al x AL is not an atom-key-gobj-val-alistp. cars: ~x0~%) nil (gl::gobj-fix gl::bfr-fix gl::general-concretep gl::general-concrete-obj - ans - ec-call quote) (gl::gl-list) (er) nil nil) ((al hyp tries tries hard? Expected tries to be concrete~% aig-eval-list x al) nil (quote flush-hons-get-hash-table-link strip-cars) (and) (if) nil nil) ((recursive-call badp bfr-al al) nil (cw) (eq gl::g-apply) (if) nil nil)) (/centaur/aig/g-aig-eval.lisp::def-g-correctness-thm-fn (nil nil nil (b*) nil nil nil) (((formals (fgetprop fn (quote formals) t world))) nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) (nil nil nil nil (table) (defthm) nil) ((:hints gl::gl-function-info) nil (, , quote `) (implies) nil nil nil) ((thmname hints) nil (, , (, (gl-fnsym (quote (, fn))))) (equal) nil nil nil) ((fn) nil (quote) ((, eval) (, fn) (, (quote (, thmname)))) nil nil nil)))