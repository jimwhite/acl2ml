((/centaur/gl/general-objects.lisp::general-booleanp (nil nil nil (or) nil nil nil) (nil nil (booleanp) (and) nil nil nil) ((x) nil (consp) (or) nil nil nil) ((x) nil nil (eq and) nil nil nil) ((:g-boolean) nil (tag booleanp) (eq) nil nil nil) ((x :g-concrete) nil (tag g-concrete->obj) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-concrete-atom (nil nil nil nil (if) nil nil) (nil nil (atom mbt) nil (and) nil nil) ((x) nil (not atom not) (eq) nil nil nil) ((:g-concrete) nil (g-keyword-symbolp tag g-concrete->obj g-keyword-symbolp) nil nil nil nil) ((x x x) nil (g-concrete->obj) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-concrete-atom-val (nil nil nil nil (if) nil nil) ((x) nil (atom g-concrete->obj) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-concrete-obj-bdd (nil nil nil nil nil (cond) nil) (nil nil ((atom x) (g-concrete-p x) (mbe :logic (eq (gobject-hierarchy-bdd x) (quote concrete)) :exec (eq (gobject-hierarchy-lite x) (quote concrete))) t) nil nil nil nil) ((x x) nil (g-concrete->obj) (cons) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-concrete-obj-aig (nil nil nil nil nil (cond) nil) (nil nil ((atom x) (g-concrete-p x) (mbe :logic (eq (gobject-hierarchy-aig x) (quote concrete)) :exec (eq (gobject-hierarchy-lite x) (quote concrete))) t) nil nil nil nil) ((x x) nil (g-concrete->obj) (cons) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-concrete-obj (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil nil (cond bfr-case) nil) ((:bdd :aig) nil ((atom x) (g-concrete-p x) (concrete-gobjectp x) t general-concrete-obj-bdd general-concrete-obj-aig) nil nil nil nil) ((x x x x) nil (g-concrete->obj) (cons) nil nil nil) ((x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::number-to-components (nil nil nil (let*) nil nil nil) (nil nil nil nil nil (mv) ((real (realpart n)))) (nil nil (rnum rden imag inum iden i2v n2v i2v n2v) nil nil nil nil) ((rnum rden inum iden) nil (numerator denominator imagpart numerator denominator) nil nil nil nil) ((real real n imag imag) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-consp (nil nil nil (and) nil nil nil) (nil nil (consp) nil (if) nil nil) ((x) nil (consp not) (eq) nil nil nil) ((:g-concrete) nil (tag g-concrete->obj g-keyword-symbolp) nil nil nil nil) ((x x) nil (tag) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-consp-car (nil nil nil nil (if) nil nil) (nil nil (mk-g-concrete car) (eq) nil nil nil) ((:g-concrete x) nil (tag car) nil nil nil nil) ((x) nil (g-concrete->obj) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::general-consp-cdr (nil nil nil nil (if) nil nil) (nil nil (mk-g-concrete cdr) (eq) nil nil nil) ((:g-concrete x) nil (tag cdr) nil nil nil nil) ((x) nil (g-concrete->obj) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::bool-cond-itep (nil nil nil nil (and) nil nil) (nil nil (consp general-booleanp) (eq) nil nil nil) ((x :g-ite) nil (tag g-ite->test) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::bool-cond-itep-cond (nil nil (general-boolean-value) nil nil nil nil) (nil nil (g-ite->test) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::bool-cond-itep-truebr (nil nil (g-ite->then) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/general-objects.lisp::bool-cond-itep-falsebr (nil nil (g-ite->else) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))