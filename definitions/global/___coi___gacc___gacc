((/coi/gacc/gacc.lisp::syntax-consp-or-quote (nil nil nil (or) nil nil nil) (nil nil (quotep) (and) nil nil nil) ((skel) nil (consp) (equal) nil nil nil) ((skel) nil (car quote) nil nil nil nil) ((skel cons) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc.lisp::syntax-consp-or-symbol (nil nil nil (or) nil nil nil) (nil nil (symbolp) (and) nil nil nil) ((skel) nil (consp) (or) nil nil nil) ((skel) nil nil (equal) (and) nil nil) (nil nil (car quote consp not) (equal) nil nil nil) ((skel cons) nil (car quote cdr null) nil nil nil nil) ((skel quote skel) nil (cadr) nil nil nil nil)) (/coi/gacc/gacc.lisp::syntax-atom (nil nil nil (or) nil nil nil) (nil nil (symbolp quotep) nil nil nil nil) ((m m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/coi/gacc/gacc.lisp::non-negative-integerp (nil nil nil (and) nil nil nil) (nil nil (integerp) (<=) nil nil nil) ((n n) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc.lisp::positive-integerp (nil nil nil (and) nil nil nil) (nil nil (integerp) (<) nil nil nil) ((n n) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc.lisp::s*-instance (nil nil nil nil (if) nil nil) ((nil) nil nil nil (if) (and) nil) ((t) nil (consp consp consp) (equal equal recursive-call) nil nil nil) ((ram skel skel) nil (car quote cdr cddr cadr caddr) nil nil nil nil) ((ram s* ram ram ram ram) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))