((/symbolic/tiny-fib/tiny.lisp::plus<32> (nil nil (Int32) nil nil nil nil) (nil nil nil nil (if) nil nil) (nil nil nil (<) (if if) nil nil) ((a) (0) nil (>= +<32> < +<32>) (let let) nil nil) ((b a b (psum (+<32> (+<32> (+<32> a (MAX_INT<32>)) 1) b)) b a b (psum (+<32> (+<32> a (MIN_INT<32>)) b))) (0 0) (declare declare) nil (if if) nil nil) (nil nil nil (type < +<32> +<32> type >= +<32> +<32>) nil nil nil) ((psum psum psum MIN_INT<32> psum psum MIN_INT<32> psum) (0 1 0 1) (signed-byte signed-byte) (+<32> +<32>) nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::+bv32 (nil nil nil (logext) nil nil nil) (nil (32) nil (+) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::sub<32> (nil nil nil (add<32>) nil nil nil) ((x) nil (negate_32) nil nil nil nil) ((y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::pushus (nil nil nil nil (let) nil nil) (((dtos (dtos tiny-state))) nil (declare) (let) nil nil nil) (((tiny-state (update-memi dtos (Int32 val) tiny-state))) nil nil (type update-dtos) nil nil nil) ((dtos tiny-state) nil (unsigned-byte) (+|10|) nil nil nil) ((dtos) (10 -1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::popus (nil nil nil nil (let) nil nil) (((ndtos (+|10| (dtos tiny-state) 1))) nil (declare) (let) nil nil nil) (((tiny-state (update-memi address (memi ndtos tiny-state) tiny-state))) nil nil (type update-dtos) nil nil nil) ((ndtos ndtos tiny-state) nil (unsigned-byte) nil nil nil nil) (nil (10) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::pushcs (nil nil nil nil (let) nil nil) (((ctos (ctos tiny-state))) nil (declare) (let) nil nil nil) (((tiny-state (update-memi ctos (Int32 val) tiny-state))) nil nil (type update-ctos) nil nil nil) ((ctos tiny-state) nil (unsigned-byte) (+|10|) nil nil nil) ((ctos) (10 -1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::popcs (nil nil nil nil (let) nil nil) (((nctos (+|10| (ctos tiny-state) 1))) nil (declare) (let) nil nil nil) (((tiny-state (update-memi address (memi nctos tiny-state) tiny-state))) nil nil (type update-dtos) nil nil nil) ((nctos nctos tiny-state) nil (unsigned-byte) nil nil nil nil) (nil (10) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::next (nil nil nil nil (let) nil nil) (nil nil (declare) ((progc (progc tiny-state))) (let) nil nil) (((ins (memi progc tiny-state))) nil (dtos ctos declare) nil nil (type) nil) ((progc dtos ctos ins) nil (dtos ctos unsigned-byte 0 1 2 3 4 5 6 7 8 9 otherwise) (type) nil nil nil) ((tiny-state tiny-state ins tiny-state) (10) (signed-byte) (let let let let update-progc let let) (let let let) nil nil) (((tiny-state (update-progc (+|10| progc 2) tiny-state)) (tiny-state (update-progc (+|10| progc 2) tiny-state)) (tiny-state (update-progc (+|10| progc 2) tiny-state)) (tiny-state (update-progc (+|10| progc 1) tiny-state)) tiny-state (nprogc (if (= (memi (+|10| dtos 1) tiny-state) 0) (fix|10| (memi (+|10| progc 1) tiny-state)) (+|10| progc 2))) (nadd (fix|10| (memi (+|10| progc 1) tiny-state))) (nadd (fix|10| (memi (+|10| ctos 1) tiny-state))) (tiny-state (update-progc (+|10| progc 1) tiny-state)) (tiny-state (update-progc (+|10| progc 1) tiny-state))) (32) (fix|10| declare declare declare) (popus pushus pushus let let let let let pushus) nil nil nil) ((tiny-state tiny-state tiny-state (tiny-state (update-dtos (+|10| dtos 2) tiny-state)) (tiny-state (update-progc nprogc tiny-state)) (tiny-state (update-progc nadd tiny-state)) (tiny-state (update-progc nadd tiny-state)) (tiny-state (update-dtos (+|10| dtos 2) tiny-state)) tiny-state) nil (fix|10|) (memi memi pushus memi type update-dtos type pushcs type update-ctos pushus memi) nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::tiny (nil nil nil nil (if) nil nil) ((tiny-state) nil nil (or let) nil nil nil) (((tiny-state (next tiny-state))) nil (not) (<= recursive-call) nil nil nil) ((tiny-state) nil (integerp Int32 Int32 Int32) nil nil nil nil) ((n) (0) (Int32 1-) nil nil nil nil) ((n) nil (Int32) nil nil nil nil) ((n) nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::load-memory-block (nil nil nil nil (if) nil nil) ((tiny-state) nil (not) (let) nil nil nil) (((tiny-state (update-memi address (car list) tiny-state))) nil (consp) nil (recursive-call) nil nil) ((list tiny-state) nil (cdr) (+|10|) nil nil nil) ((address list) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::load-memory (nil nil nil nil (if) nil nil) ((tiny-state) nil (not) (let) nil nil nil) (((tiny-state (load-memory-block (caar assoc) (cdar assoc) tiny-state))) nil (consp) (recursive-call) nil nil nil) ((assoc tiny-state) nil (cdr) nil nil nil nil) ((assoc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::load-tiny (nil nil nil (let) nil nil nil) (((tiny-state (update-progc pc tiny-state))) nil nil (let) nil nil nil) (((tiny-state (update-dtos 900 tiny-state))) nil nil (let) nil nil nil) (((tiny-state (update-ctos 1000 tiny-state))) nil nil (load-memory) nil nil nil) ((memlist tiny-state) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::encode (nil nil nil nil nil nil nil) ((op) nil ((quote pop) (quote pushs) (quote pushsi) (quote add) (quote jump) (quote jumpz) (quote call) (quote ret) (quote sub) (quote dup) (quote halt)) nil nil nil nil) (nil (0 1 2 3 4 5 6 7 8 9 10) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::assemble (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((code) nil (recursive-call) nil (if) nil nil) (nil nil (integerp car encode cdr) nil nil nil nil) ((code code) nil (car car) nil nil nil nil) ((code code) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::run-example-tiny-state (nil nil nil (let) nil nil nil) (((tiny-state (load-tiny 4 (list (cons 4 *mod-caller-prog*) (cons 20 *mod-prog*)) tiny-state))) nil nil (tiny) nil nil nil) ((tiny-state n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::program-loaded (nil nil nil (or) nil nil nil) (nil nil (endp) (and) nil nil nil) ((program) nil nil (equal) (recursive-call) nil nil) ((tiny-state) nil (car cdr 1+) (memi) nil nil nil) ((location tiny-state program program location) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::c+ (nil nil nil (+) nil nil nil) (nil nil (nfix nfix) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::repeat (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n v) nil nil (recursive-call) nil nil nil) ((v) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::mod-loop-once-effect (nil nil nil nil (update-nth) nil nil) ((*progc*) (24) nil nil (update-nth) nil nil) ((*memi*) nil nil nil (update-nth update-nth) nil nil) ((*dtos* tiny-state) (18) nil (+ nth) (update-nth) nil nil) ((*dtos* tiny-state) nil (-) (nth nth +) (update-nth) nil nil) ((*dtos* tiny-state) (18) (-) (nth nth nth + + nth) nil nil nil) ((*memi* tiny-state *memi* tiny-state) (19 18 -1) (-) (nth nth nth nth nth) nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::modloop-clock-helper (nil nil nil nil (if) nil nil) (nil nil nil (c+) (if) (or) nil) (nil (14 13 7) (not not) (>= <= equal recursive-call) nil nil nil) ((y x y x y y) (0) (integerp integerp) (-) nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::modloop-clock (nil nil nil (let) nil nil nil) (nil nil ((x (memi 18 tiny-state))) (modloop-clock-helper) nil nil nil) ((x y) nil (y) nil nil nil nil) (nil nil nil (memi) nil nil nil) ((tiny-state) (19) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::remainder-prog-result (nil nil nil nil (if) nil nil) (nil nil (nfix) (recursive-call) (or) nil nil) ((n p) nil (zp zp) (< -) nil nil nil) ((p n n p n p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::mod-loop-repeat-induct (nil nil nil nil (if) nil nil) ((t) nil nil nil (recursive-call) (or) nil) ((y) nil (not not mod-loop-once-effect) (>= <= -) nil nil nil) ((y x y x y s) (0) (integerp integerp) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::sub1-add1-cdr (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (recursive-call) nil nil) ((l) nil (1- 1+ cdr) nil nil nil nil) ((n1 n2 l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::remclock (nil nil nil (modloop-clock-helper) nil nil nil) (nil nil nil (memi memi) nil nil nil) ((tiny-state tiny-state) (18 19) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/symbolic/tiny-fib/tiny.lisp::good-initial-remainder-state (nil nil nil nil nil nil nil) (nil nil (tiny-statep) (< >= <= > equal < <) (program-loaded) nil nil) ((tiny-state tiny-state *mod-prog*) (1000 100 1020 1010 24 20 0 0) (dtos dtos ctos ctos progc) (memi memi) nil nil nil) ((tiny-state tiny-state tiny-state tiny-state tiny-state tiny-state tiny-state) (18 19) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))