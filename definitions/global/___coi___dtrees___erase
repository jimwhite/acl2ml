((/coi/dtrees/erase.lisp::cdr? (nil nil nil nil (if) nil nil) ((nil) nil (consp cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/dtrees/erase.lisp::remove-induction (nil nil nil nil (if) nil nil) ((*default*) nil (atom) (let) nil nil nil) ((path) nil ((children (children dtree))) nil (if) nil nil) (nil nil (localdeps) (map::in let rawdtree) nil nil nil) ((set::emptyset children (subtree (remove-induction (cdr? other) (cdr path) (map::get (car path) children))) localdeps children) nil (car) (let) nil nil nil) ((path (children (map::erase (car path) children))) nil nil (cond) nil nil nil) (nil nil ((map::empty (children subtree)) t) nil nil nil nil)))