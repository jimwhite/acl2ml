((/misc/mult.lisp::sub1-induction (nil nil nil nil (if) nil nil) ((x) nil (zp recursive-call) nil nil nil nil) ((x) nil (1-) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::sub1-logcdr-induction (nil nil nil nil (if) nil nil) ((x) nil (zp) (recursive-call) nil nil nil) ((m) nil (1- logcdr) nil nil nil nil) ((m x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::logcdr-logcdr-induction (nil nil nil nil (if) nil nil) ((c) nil nil (or recursive-call) nil nil nil) (nil nil (zip logcdr logcdr) (equal) nil nil nil) ((b b b c) (-1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::sub1-sub1-logcdr-induction (nil nil nil nil (if) nil nil) (nil nil (zp) (or) (recursive-call) nil nil) ((b a v) nil (1- 1- logcdr) nil nil nil nil) ((a b v) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::sub1-logcdr-logcdr-induction (nil nil nil nil (if) nil nil) (nil nil (zp) (or) (recursive-call) nil nil) ((m x y) nil (1- logcdr logcdr) nil nil nil nil) ((m x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::sub1-sub1-induction (nil nil nil nil (if) nil nil) ((n) nil (zp) (recursive-call) nil nil nil) ((m) nil (1- 1-) nil nil nil nil) ((m n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::sub1-logcdr-logcdr-carry-induction (nil nil nil nil (if) nil nil) (nil nil (zp) nil (or) (recursive-call) nil) ((m x y c) nil (1- logcdr logcdr) nil (if) nil nil) ((m x y) (1 0) nil nil (or) nil nil) (nil nil nil (and and and) nil nil nil) (nil nil nil (equal equal equal equal equal equal) nil nil nil) ((c c) (1 1 1 1 1 1) (logcar logcar logcar logcar) nil nil nil nil)) (/misc/mult.lisp::line1 (nil nil nil (let) nil nil nil) (((st (update-x 8 st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::line2 (nil nil nil (let) nil nil nil) (((st (update-a 0 st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::line3 (nil nil nil (let) nil nil nil) (((temp (cflg st))) nil nil (let) nil nil nil) (((st (update-cflg (logcar (f1 st)) st))) nil nil (let) nil nil nil) (((st (update-f1 (logapp 7 (logcdr (f1 st)) temp) st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::line5 (nil nil nil (let) nil nil nil) (((st (update-cflg 0 st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::line6 (nil nil nil (let) nil nil nil) (((temp (+ (a st) (f2 st) (cflg st)))) nil nil (let) nil nil nil) (((st (update-a (loghead 8 temp) st))) nil nil (let) nil nil nil) (((st (update-cflg (logbit 8 temp) st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::line7 (nil nil nil (let) nil nil nil) (((temp (cflg st))) nil nil (let) nil nil nil) (((st (update-cflg (logcar (a st)) st))) nil nil (let) nil nil nil) (((st (update-a (logapp 7 (logcdr (a st)) temp) st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::line8 (nil nil nil (let) nil nil nil) (((temp (cflg st))) nil nil (let) nil nil nil) (((st (update-cflg (logcar (low st)) st))) nil nil (let) nil nil nil) (((st (update-low (logapp 7 (logcdr (low st)) temp) st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::line9 (nil nil nil (let) nil nil nil) (((temp (loghead 8 (1- (x st))))) nil nil (let) nil nil nil) (((st (update-zflg (if (equal temp 0) 1 0) st))) nil nil (let) nil nil nil) (((st (update-x temp st)) st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::multloop (nil nil nil nil (if) nil nil) ((st) nil nil (and let) nil nil nil) (((st (line3 st))) nil (integerp) (< let) nil nil nil) (((st (if (equal (cflg st) 1) (let ((st (line5 st))) (line6 st)) st))) (0) (x x) (let) nil nil nil) ((st st (st (line7 st))) nil nil (let) nil nil nil) (((st (line8 st))) nil nil (let) nil nil nil) (((st (line9 st))) nil nil nil (if) nil nil)) (/misc/mult.lisp::multprog (nil nil nil (let) nil nil nil) (((st (line1 st))) nil nil (let) nil nil nil) (((st (line2 st))) nil (multloop) nil nil nil nil) ((st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/misc/mult.lisp::result (nil nil nil nil (logapp) nil nil) (nil (8) (low a) nil nil nil nil) ((st st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))