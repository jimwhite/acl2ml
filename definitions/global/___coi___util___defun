((/coi/util/defun.lisp::local-suffix (nil nil nil (intern-in-package-of-symbol) nil nil nil) ((name) nil nil nil (concatenate) nil nil) ((string) nil (quote symbol-name) nil nil nil nil) ((string name) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/defun.lisp::contains-nil-alistp (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((alist) nil (null recursive-call) nil nil nil nil) (nil nil (cdar cdr) nil nil nil nil) ((alist alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/defun.lisp::contains-nil (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((list) nil (null recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/defun.lisp::defun-fn (nil nil nil (met) nil nil nil) (nil nil ((doc decls body)) (met) nil nil nil) (nil nil (decompose-defun-body (typespec signature sig-hints decls)) (met) nil nil nil) ((body) nil (extract-function-declaration (cong-hints decls)) (met) nil nil nil) ((decls) nil ((cong-specs decls)) (extract-xarg-key-from-decls let*) nil nil nil) ((:congruence-hints decls) nil (`) (extract-xarg-key-from-decls) nil nil nil) ((:congruence decls) nil (xarg-guards xarg-mode guard-hints type-decls not-inhibited verify-guards decls typespec inhibited-decls name-induction) nil nil nil nil)) (/coi/util/defun.lisp::defun-fn-wrapper (nil nil nil (met) nil nil nil) (nil nil ((doc decls xbody)) (met) nil nil nil) (nil nil (decompose-defun-body (err tbody)) nil (met) nil nil) ((body) nil ((case base) declare) (let) (acl2::pseudo-translate) nil nil) ((xbody (event (if (not (equal case acl2::*nil*)) (let ((induction-defun (make-defun (quote defun) name args (make-defun-body doc decls tbody)))) (let ((induction-defun (` ((, (congruence-induction-function induction-defun)))))) (defun-fn disable name args body induction-defun))) (defun-fn disable name args body nil)))) nil (list w ignore) nil (lift-base mv) nil nil) ((state tbody args base err event state) nil (list) (cons) nil nil nil) ((name args name) nil nil nil nil nil nil)) (/coi/util/defun.lisp::signature-fn (nil nil nil (let) nil nil nil) (((args (symbol-fns::item-to-numbered-symbol-list (quote acl2::x) (len argspec)))) nil nil nil nil (function-declaration-to-type-thm) nil) ((fn args hints) nil (`) nil nil nil nil) (nil nil nil nil (function) nil nil) (nil nil (, , ,@) nil nil nil nil) ((fn argspec vals) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/defun.lisp::extract-hints (nil nil nil nil (if) nil nil) (nil nil (consp) (let mv) nil nil nil) ((args (arg (car args)) nil nil) nil nil nil (if) nil nil) (nil nil nil (equal mv met) nil nil nil) ((arg :hints nil) nil (cadr (hints args)) (mv) nil nil nil) ((args hints) nil (recursive-call) (cons) nil nil nil) ((arg args) nil (cdr) nil nil nil nil)))