((/centaur/gl/bfr-sat.lisp::bfr-sat-bdd (nil nil nil nil (if) nil nil) ((bfr-mode) nil nil nil (mv mv) nil nil) ((nil nil nil t prop) nil (not) nil nil nil nil) (nil nil (not) nil nil nil nil) ((prop) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/centaur/gl/bfr-sat.lisp::bfr-counterex-bdd ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/bfr-sat.lisp::to-satisfying-assign (nil nil nil nil nil (cond) nil) (nil nil ((atom bdd) (eq (cdr bdd) nil) (eq (car bdd) nil) t) nil nil nil nil) ((lst) nil nil (cons cons cons) nil nil nil) ((t nil) nil (car) (recursive-call recursive-call recursive-call) nil nil nil) ((lst lst lst) nil (car cdr cdr) nil (if) nil nil) ((bdd bdd lst) nil (car car cdr) nil nil nil nil) ((lst bdd bdd) nil nil nil nil nil nil)) (/centaur/gl/bfr-sat.lisp::bfr-ctrex-to-satisfying-assign (nil nil nil nil (if) nil nil) ((ctrex) nil nil (eq to-satisfying-assign) nil nil nil) ((bfr-counterex-mode t assign ctrex) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))