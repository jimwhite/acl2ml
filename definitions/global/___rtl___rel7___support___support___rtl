((/rtl/rel7/support/support/rtl.lisp::shft (nil nil nil (mod) nil nil nil) (nil nil (fl) (expt) nil nil nil) ((l) (2) nil (*) nil nil nil) ((x) nil nil (expt) nil nil nil) ((s) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::bits (nil nil (fl) nil nil nil nil) (nil nil nil (/) nil nil nil) (nil nil nil (mod expt) nil nil nil) ((x j) (2) nil (expt) nil nil nil) (nil (2) (1+) nil nil nil nil) ((i) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::bits (nil nil nil nil (if) nil nil) (nil (0) (fl) (or) nil nil nil) (nil nil (not not) (/) nil nil nil) (nil nil (integerp integerp) (mod expt) nil nil nil) ((i j x j) (2) nil (expt) nil nil nil) (nil (2) (1+) nil nil nil nil) ((i) nil nil nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::bitn (nil nil nil nil (if) nil nil) (nil (1 0) nil (logbitp) nil nil nil) ((n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::lnot (nil nil (1-) nil nil nil nil) (nil nil nil (-) nil nil nil) ((x) nil nil (expt) nil nil nil) ((n) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::if1 (nil nil nil nil (if) nil nil) ((z y) nil nil (eql) nil nil nil) ((x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::cond1-macro (nil nil nil nil (if) nil nil) (nil (0) (consp) nil (if) nil nil) ((clauses) nil nil (and) (if) (list) nil) (nil nil (cdr car car quote car recursive-call) (eq eq) (if) nil nil) ((t nil if1) nil (car cdr car cdr car car cdr car car cdr) nil nil nil nil) ((clauses clauses clauses clauses clauses) nil (car car car cdr car) nil nil nil nil) ((clauses clauses clauses clauses) nil (car) nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::natp1 (nil nil nil nil (if) nil nil) (nil (1 0) nil (and) nil nil nil) (nil nil (integerp) (<=) nil nil nil) ((x x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/rtl.lisp::formal-+ (nil nil nil nil (if) nil nil) (nil nil nil (and +) (list) nil nil) ((x y x y) nil (acl2-numberp acl2-numberp quote) nil nil nil nil) ((x y +) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))