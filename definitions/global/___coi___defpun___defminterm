(nil (/coi/defpun/defminterm.lisp::inx (nil nil nil (+) nil nil nil) (nil (1) (nfix) nil nil nil nil) ((m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::unbundle (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((args) nil (`) (recursive-call) nil nil nil) (nil nil ((, (car args)) cdr `) nil nil nil nil) ((args) nil (car cdr) nil nil nil nil) (nil nil (, ,) nil nil nil nil) ((list list) nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::args-syntax-guard (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((args) nil (` recursive-call) nil nil nil nil) (nil nil (cdr) (or) nil nil nil) ((args) nil (symbolp quotep) nil nil nil nil) (nil nil (, ,) nil nil nil nil) (nil nil (car car) nil nil nil nil)) (/coi/defpun/defminterm.lisp::generate-open-theorems (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((head (arg (car head))) nil nil (cons) nil nil nil) (nil nil (`) nil nil nil nil) ((fn fn-test fn-terminates fn-step-1 args) nil (cdr) (defthmd cons) nil nil nil) ((head arg tail) nil (,) (implies) nil nil nil) (nil nil (syntaxp) (packn-pos and) nil nil nil)) (/coi/defpun/defminterm.lisp::if-formp (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((form) nil nil (equal) (if) (and) nil) ((t) nil (car quote consp consp consp null) (equal) nil (and) nil) ((form if) nil (cdr cddr cdddr cddddr car quote consp consp null recursive-call) nil nil nil nil) ((form form form form form let) nil (cdr cddr cdddr caddr) nil nil nil nil) ((form form form form) nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::if-test (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((form) nil (cadr) (equal) (if) nil nil) ((form nil) nil (car quote `) (equal) nil nil nil) ((form if) nil (car quote) (let) nil nil nil) ((form let) nil (, ,) nil nil nil nil) (nil nil (cadr recursive-call) nil nil nil nil)) (/coi/defpun/defminterm.lisp::if-base (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((form) nil (caddr) (equal) (if) nil nil) ((form nil) nil (car quote `) (equal) nil nil nil) ((form if) nil (car quote) (let) nil nil nil) ((form let) nil (, ,) nil nil nil nil) (nil nil (cadr recursive-call) nil nil nil nil)) (/coi/defpun/defminterm.lisp::if-body (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((form) nil (cadddr) (equal) (if) nil nil) ((form nil) nil (car quote `) (equal) nil nil nil) ((form if) nil (car quote) (let) nil nil nil) ((form let) nil (, ,) nil nil nil nil) (nil nil (cadr recursive-call) nil nil nil nil)) (/coi/defpun/defminterm.lisp::contains-fapp-rec (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((form args) nil nil (or or) nil nil nil) (nil nil nil (equal) (recursive-call recursive-call recursive-call) nil nil) ((fn nil fn t fn fn t) nil (car cdr car cdr) nil nil nil nil) ((form form form form) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::wf-measure-body (nil nil nil (and) nil nil nil) (nil nil (if-formp not) nil nil nil nil) ((form) nil nil (iff) nil nil nil) (nil nil nil (contains-fapp contains-fapp) nil nil nil) ((fn fn) nil (if-base if-body) nil nil nil nil) ((form form) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::remap-fn-rec (nil nil nil nil (if) nil nil) ((form) nil (consp) nil (if) nil nil) ((form args) nil nil (cons) (if) nil nil) (nil nil nil (equal append cons) nil (recursive-call recursive-call) nil) ((fn fn* nil fn fn* t fn fn*) nil (car cdr car car) nil nil (recursive-call recursive-call) nil) ((form form form fn fn* t form fn fn* t) nil (cdr cdr) nil nil nil nil) ((form form) nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::replace-fn-rec (nil nil nil nil (if) nil nil) ((form) nil (consp) nil (if) nil nil) ((form args) nil nil (cons) (if) nil nil) ((term) nil nil (equal cons) nil (recursive-call recursive-call) nil) ((fn term nil fn term t fn) nil (car cdr car car) nil nil (recursive-call) nil) ((form form form form fn term t) nil (cdr) nil nil nil nil) ((form) nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::map-replace-fn (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil nil nil (replace-fn recursive-call) nil nil) ((fn body fn body) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::extract-fn (nil nil nil nil (if) nil nil) ((form) nil (consp) nil (if) nil nil) ((form args) nil nil (or) (if) nil nil) ((form) nil nil (equal) (recursive-call recursive-call recursive-call) nil nil) ((fn nil fn t fn fn t) nil (car cdr car cdr) nil nil nil nil) ((form form form form) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::push-lets (nil nil nil (let) nil nil nil) (((fcall (extract-fn fn nil body))) nil nil nil (if) nil nil) (nil nil (consp ` `) nil nil nil nil) ((fcall (, fn)) nil ((, fn)) nil nil nil nil) (nil nil (,@) nil nil nil nil) (nil nil nil nil (map-replace-fn) nil nil) ((fn body) nil (cdr) nil nil nil nil)) (/coi/defpun/defminterm.lisp::test-base-body (nil nil nil (let) nil nil nil) (((body (if-body form))) nil nil nil (if) nil nil) (nil nil nil (contains-fapp) (mv mv) nil nil) ((fn body body body) nil (` if-base ` if-base) nil nil nil nil) ((form form) nil (not not) nil nil nil nil) (nil nil (not ,) nil nil nil nil) (nil nil (, if-test) nil nil nil nil)) (/coi/defpun/defminterm.lisp::pun-form (nil nil nil (let) nil nil nil) (((body (if-body form))) nil nil nil (if) nil nil) (nil nil nil (contains-fapp let let) nil nil nil) ((fn body) nil (` `) ((test (if-test form)) (test (` (not (, (if-test form)))))) nil nil nil) (nil nil (base body base body) nil (if if) nil nil) ((body) nil (if-base , , , , , ,) (push-lets push-lets) nil nil nil) ((form fn body test base body fn test base body) nil (if-base) nil nil nil nil)) (/coi/defpun/defminterm.lisp::first-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((list nil) nil (consp) (cons) nil nil nil) (nil nil (cdr car recursive-call) nil nil nil nil) ((list list) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::contains-guard-declaration-rec (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((decl) nil (consp recursive-call) (or) nil nil nil) (nil nil (car recursive-call cdr) (equal) nil nil nil) ((decl decl) nil (caar quote cdr) nil nil nil nil) ((decl type decl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::contains-guard-declaration (nil nil nil nil (and) nil nil) (nil nil (consp contains-guard-declaration-rec) (equal) nil nil nil) ((decl) nil (car quote cdr) nil nil nil nil) ((decl declare decl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::contain-guard-declarations (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((decls) nil (contains-guard-declaration recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((decls decls) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::just-body (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((term) nil (consp) (recursive-call) (if) nil nil) ((fn) nil (car car cdr) (equal recursive-call) nil nil nil) ((term fn term fn term) nil (caar cdr) nil nil nil nil) ((term term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/defpun/defminterm.lisp::tail-body (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((form) nil (`) (equal just-body) nil nil nil) ((fn form) nil (car quote) (let) nil nil nil) ((form let) nil (, ,) nil nil nil nil) (nil nil (cadr) (recursive-call) nil nil nil) ((form fn) nil (caddr) nil nil nil nil)))