((/nonstd/workshops/2011/reid-gamboa-differentiator/support/sum-composition.lisp::sum-d/dx-apply-fn (nil nil nil (let) nil nil nil) (((instantiation-fns (` ((sum-f (lambda (x arg) (, fn1))) (sum-f-domain-p (lambda (x arg) (, fn1-domain))) (sum-f-prime (lambda (x arg) (, fn1-derivative))) (sum-g (lambda (x arg) (, fn2))) (sum-g-domain-p (lambda (x arg) (, fn2-domain))) (sum-g-prime (lambda (x arg) (, fn2-derivative))) (sum-f+g (lambda (x arg) (+ (, fn1) (, fn2)))) (sum-f+g-domain-p (lambda (x arg) (and (, fn1-domain) (, fn2-domain)))) (sum-f+g-prime (lambda (x arg) (+ (, fn1-derivative) (, fn2-derivative)))))))) nil (`) nil nil nil nil) (nil nil nil ((encapsulate nil (local (in-theory (quote ((,@ (deriv-symbols fn1-symbol)) (,@ (deriv-symbols fn2-symbol)))))) (,@ (use-deriv fn1+2-symbol (quote sum-f+g) (` (+ (, fn1) (, fn2))) (` (+ (, fn1-derivative) (, fn2-derivative))) (` (and (, fn1-domain) (, fn2-domain))) instantiation-fns)))) nil nil nil) (nil nil nil (+ and) nil nil nil) (nil nil (, , , ,) nil nil nil nil) ((fn1-derivative fn2-derivative fn1-domain fn2-domain) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))