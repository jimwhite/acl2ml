((/unicode/read-ints.lisp::read-8s (nil nil nil nil (mv-let) nil nil) (nil nil (byte) (read-byte$) (if) nil nil) ((state channel state byte) nil nil (mv mv) nil nil nil) ((state nil state) nil nil nil nil (mbe) nil) ((:logic :exec) nil (sign-byte) nil (if) nil nil) ((byte byte) nil (the-fixnum) (<) nil nil nil) (nil (128) (the-fixnum) (-) nil nil nil)) (/unicode/read-ints.lisp::read-16ube (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil (null) (mv mv) nil nil nil) ((x2 state state) nil (quote) nil nil (mbe) nil) ((fail :logic :exec) nil nil (combine16u logior) nil nil nil)) (/unicode/read-ints.lisp::read-16ule (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil (null) (mv mv) nil nil nil) ((x2 state state) nil (quote) nil nil (mbe) nil) ((fail :logic :exec) nil nil (combine16u logior) nil nil nil)) (/unicode/read-ints.lisp::read-16sbe (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil (null) (mv mv) nil nil nil) ((x2 state state) nil (quote) nil nil (mbe) nil) ((fail :logic :exec) nil nil (combine16s logior) nil nil nil)) (/unicode/read-ints.lisp::read-16sle (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil (null) (mv mv) nil nil nil) ((x2 state state) nil (quote) nil nil (mbe) nil) ((fail :logic :exec) nil nil (combine16s logior) nil nil nil)) (/unicode/read-ints.lisp::read-32ube (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x3) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x4) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil nil (mv mv) (or) nil nil)) (/unicode/read-ints.lisp::read-32ule (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x3) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x4) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil nil (mv mv) (or) nil nil)) (/unicode/read-ints.lisp::read-32sbe (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x3) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x4) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil nil (mv mv) (or) nil nil)) (/unicode/read-ints.lisp::read-32sle (nil nil nil nil (mv-let) nil nil) (nil nil (x1) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x2) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x3) (read-byte$) (mv-let) nil nil) ((state channel state) nil (x4) (read-byte$) (if) nil nil) ((state channel state) nil (null) (mv) (if) nil nil) ((x1 nil state) nil nil (mv mv) (or) nil nil)))