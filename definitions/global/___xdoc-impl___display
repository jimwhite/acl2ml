((/xdoc-impl/display.lisp::normalize-whitespace (nil nil (reverse) nil nil nil nil) (nil nil nil (coerce) nil nil nil) (nil nil (quote) nil nil (normalize-whitespace-aux) nil) ((x nil string) (0) (length) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/display.lisp::merge-text (nil nil nil (b*) nil nil nil) (nil nil nil nil (recursive-call) nil nil) ((rest codes) nil (tok1 rest (when (opentok-p tok1)) (when (closetok-p tok1)) tok1 (unless (texttok-p (car acc))) merged-tok) (cons) nil nil nil) ((merged-tok) nil (car cdr cdr) (b* b* list) (cond recursive-call) nil nil) ((x x rest codes :TEXT acc) nil ((name (opentok-name tok1)) (name (closetok-name tok1)) (entitytok-p tok1) (zp codes) t) (cons str::cat) nil (cond) (cond)) ((tok1 tok1 acc) nil (codes (member-equal name *throwaway-tags*) (equal name a) (equal name see) (equal name srclink) t codes (member-equal name *throwaway-tags*) (member-equal name (quote (a see))) (equal name srclink) t texttok-text texttok-text) (list list) nil nil nil) ((:TEXT :TEXT tok1) nil (entitytok-as-plaintext normalize-whitespace car) (b* b* b* let let) (if recursive-call recursive-call if recursive-call recursive-call) nil nil)) (/xdoc-impl/display.lisp::word-wrap-paragraph (nil nil nil (let*) nil nil nil) (nil nil nil (coerce) ((acc (word-wrap-paragraph-aux x 0 (length x) 0 wrap-col indent nil))) nil nil) ((acc) nil (acc acc acc quote) nil nil nil nil) ((string) nil (remove-spaces-from-front reverse remove-spaces-from-front) nil nil nil nil) ((acc acc acc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/display.lisp::has-tag-above (nil nil nil nil (if) nil nil) ((nil) nil (atom) (or) nil nil nil) ((open-tags) nil nil (equal recursive-call) nil nil nil) ((tag tag) nil (opentok-name cdr) nil nil nil nil) ((open-tags) nil (car) nil nil nil nil) ((open-tags) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/display.lisp::get-indent-level (nil nil nil (b*) nil nil nil) (nil nil (recursive-call) nil nil nil nil) (nil nil (name (when (member-equal name (quote (h1 h2 h3)))) (when (member-equal name (quote (p short h4 h5 index_entry)))) (when (member-equal name (quote (index_body)))) (when (member-equal name (quote (ol ul)))) (when (equal name dt)) (when (equal name dd)) (when (equal name code)) (when (equal name blockquote)) cdr) nil nil nil nil) ((open-tags) (0) (opentok-name) (+ + + + + +) (if) nil nil) (nil (2 4 4 6 4 4) (car recursive-call recursive-call recursive-call recursive-call recursive-call recursive-call) (has-tag-above + +) nil nil nil) ((open-tags li open-tags) (4 6) (cdr cdr recursive-call recursive-call cdr cdr cdr cdr) nil nil nil nil) ((open-tags open-tags open-tags open-tags open-tags open-tags) nil (cdr cdr) nil nil nil nil)) (/xdoc-impl/display.lisp::get-list-type (nil nil nil (b*) nil nil nil) (nil nil (recursive-call) nil (((when (atom open-tags)) :bulleted)) nil nil) (nil nil (name (when (equal name ol)) (when (equal name ul)) cdr) nil nil nil nil) ((:numbered :bulleted open-tags) nil (opentok-name) nil nil nil nil) (nil nil (car) nil nil nil nil) ((open-tags) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/xdoc-impl/display.lisp::display-topic (nil nil nil (b*) nil nil nil) ((state) nil nil nil nil nil nil) (nil nil ((mv text state) (mv err tokens) merged-tokens terminal state state state state state state) ((when err)) nil nil nil) (nil nil (parse-xml cw reverse reverse) (b* newline newline) (princ$ princ$ princ$ princ$) nil (preprocess-topic)) ((x all-topics nil nil state text Error displaying xdoc topic:~%~% state *standard-co* state :: *standard-co* state *standard-co* state *standard-co* state terminal *standard-co* state *standard-co* state) nil (symbol-package-name symbol-name) ((state (princ$ err *standard-co* state)) coerce) (merge-text) nil nil) ((tokens nil name name) (0) (state state quote) nil nil nil (tokens-to-terminal)) ((merged-tokens nil nil nil string) (70) nil (newline newline) nil nil nil)) (/xdoc-impl/display.lisp::colon-xdoc-fn (nil nil nil (b*) nil nil nil) (nil nil (value) ((xdoc-entry (find-topic name all-xdoc-topics))) nil nil nil) ((:invisible) nil (state) ((when (not xdoc-entry))) nil nil nil) (nil nil (value) nil (cw display-topic) nil nil) ((No XDOC topics for ~s0::~s1.~%~% :invisible xdoc-entry all-xdoc-topics state) nil (symbol-package-name symbol-name) nil nil nil nil) ((name name) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))