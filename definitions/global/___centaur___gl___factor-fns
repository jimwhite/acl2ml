((/centaur/gl/factor-fns.lisp::gen-branch-fn-name (nil nil nil nil nil nil nil) ((:: - -) nil (quote symbol-package-name symbol-name symbol-name acl2::nat-to-str) nil nil nil nil) ((gl-fact::foo fn fn thenelse idx) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::gen-if-fn-name (nil nil nil nil nil nil nil) ((:: -IF-) nil (quote symbol-package-name symbol-name acl2::nat-to-str) nil nil nil nil) ((gl-fact::foo fn fn idx) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::gen-lambda-fn-name (nil nil nil nil nil nil nil) ((:: -LAMBDA-) nil (quote symbol-package-name symbol-name acl2::nat-to-str) nil nil nil nil) ((gl-fact::foo fn fn idx) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::correct-thmname (nil nil nil nil (incat) nil nil) ((-CORRECT) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::factor-add-fn (nil nil nil (let*) nil nil nil) (nil nil nil nil nil nil ((defun (` (defun-nx (, name) (, vars) (declare (xargs :normalize nil) (ignorable , vars)) (, defbody)))) list*)) ((ruleset thm defun fnacc) nil (thmname defname thm thm ruleset quote) nil nil nil nil) (nil nil (correct-thmname ` ` local) nil (if) (and) nil) ((name top top) nil (consp symbolp local ` ` in-theory) (or) (encapsulate) nil nil) ((eqbody nil nil) nil (car cdr car local , local local) nil nil (defthm) nil) ((eqbody eqbody :hints thm) nil (, ,) (assoc-eq def-ruleset! add-to-ruleset! add-to-ruleset!) nil nil ((Goal :do-not (quote (preprocess simplify)) :clause-processor (rw-cp clause (, (if defname (` (cons (rw-from-name (quote (, defname)) (w state)) (rws-from-ruleset factor-defs))) (` (rws-from-ruleset factor-defs))))))))) (/centaur/gl/factor-fns.lisp::factor-maybe-push-if-branch (nil nil nil nil (if) nil nil) ((nil) nil nil (b* mv) nil nil nil) ((branch fnacc) nil nil ((fnname (gen-branch-fn-name fn idx thenelse)) mv) nil nil nil) ((call fnacc) nil (fnacc call) nil nil nil nil) (nil nil (`) nil nil nil nil) ((fnname vars branch xbranch fnacc nil world) nil nil ((, fnname)) nil nil nil) ((, vars) nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::fn-factor-body (nil nil nil (let) nil nil nil) (((body (cond ((acl2::throw-nonexec-error-p x nil nil) (car (last x))) (t x)))) nil nil nil nil nil nil) ((fn events nil world) (1) (hons-copy) nil nil nil nil) ((body) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::factored-fnname (nil nil nil nil nil (incat) nil) ((::FACTORED-) nil (quote symbol-package-name symbol-name) nil nil nil nil) ((gl-fact::foo fn fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::events-strip-fn-names (nil nil nil nil (if) nil nil) ((acc) nil nil (or let) nil nil nil) (((event (car events))) nil (endp) (equal) (case-match) nil nil) ((events events oldevents event) nil (((quote defun-nx) name . &) &) nil nil nil nil) (nil nil nil nil (recursive-call recursive-call) nil nil) ((oldevents oldevents acc) nil (cdr cdr) (cons) nil nil nil) ((events name acc events) nil nil nil nil nil nil)) (/centaur/gl/factor-fns.lisp::factor-fn-clique (nil nil nil nil (if) nil nil) ((events) nil (atom) (b*) nil nil nil) ((clique) nil nil nil (recursive-call) nil nil) ((world events) nil (body - vars (mv newbody & newevents memo) - name newevents fnlist events cdr) nil nil nil nil) ((clique) nil (flush-hons-get-hash-table-link factored-fnname) (norm-function-body or wgetprop cons) (events-strip-fn-names) (fn-factor-body) nil) ((fn world body fn body fn events world memo fn name vars newbody newevents t world newevents events nil newevents) nil (quote ` `) nil nil (er) nil) ((hard No body retrieved for ~x0~% fn formals) nil (quote) ((, fn)) (table) nil nil)))