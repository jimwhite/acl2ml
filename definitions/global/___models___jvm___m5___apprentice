((/models/jvm/m5/apprentice.lisp::counter (nil nil nil nil nil (gf) nil) ((Container counter) (8) (heap) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::rel (nil nil nil (or) nil nil nil) (nil nil nil (equal equal) nil nil nil) ((c2 c1 c2) nil (int-fix) nil nil nil nil) (nil nil nil (+) nil nil nil) ((c1) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::program1 (nil nil nil nil nil nil nil) (nil nil ((equal class java.lang.Object) (equal class java.lang.Thread) (equal class Apprentice) (equal class Container) (equal class Job) t) nil nil nil nil) ((nil) nil nil (cond cond cond cond) nil nil (cond)) (nil nil ((equal method <init>) t (equal method <init>) t (equal method main) t (equal method <init>) t (equal method <init>) (equal method incr) (equal method setref) (equal method run) t) nil nil nil nil) ((*java.lang.Object.<init>* nil *java.lang.Thread.<init>* nil *Apprentice.main* nil *Container.<init>* nil *Job.<init>* *Job.incr* *Job.setref* *Job.run* nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::programp (nil nil nil (let) nil nil nil) (((const (program1 class method))) nil nil (and) nil nil nil) (nil nil nil (equal equal) nil nil nil) ((const) nil (cur-class program) (cond) nil nil nil) ((frame frame) nil ((equal class Apprentice) t) nil nil nil nil) ((nil class) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-java.lang.Object.<init>-frame (nil nil nil (let) nil nil nil) (nil nil ((pc (pc frame))) nil (and) nil nil) (nil nil (flg) (equal equal) (programp) nil nil) ((frame java.lang.Object <init> flg pc) (0) (sync-flg quote) nil nil nil nil) ((frame UNLOCKED) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-java.lang.Thread.<init>-frame (nil nil nil (let) nil nil nil) (nil nil ((pc (pc frame))) nil (and) nil nil) (nil nil (flg) (equal) (programp or) nil nil) ((frame java.lang.Thread <init> flg) nil (sync-flg quote) (equal equal equal) nil nil nil) ((frame UNLOCKED pc pc pc) (0 1 4) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-Container.<init>-frame (nil nil nil (let) nil nil nil) (nil nil ((pc (pc frame))) nil (and) nil nil) (nil nil (flg) (equal) (programp or) nil nil) ((frame Container <init> flg) nil (sync-flg quote) (equal equal equal) nil nil nil) ((frame UNLOCKED pc pc pc) (0 1 4) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-Job.<init>-frame (nil nil nil (let) nil nil nil) (nil nil ((pc (pc frame))) nil (and) nil nil) (nil nil (flg) (equal) (programp or) nil nil) ((frame Job <init> flg) nil (sync-flg quote) (equal equal equal) nil nil nil) ((frame UNLOCKED pc pc pc) (0 1 4) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-Job.setref-frame (nil nil nil (let) nil nil nil) (nil nil nil nil ((pc (pc frame))) (and) nil) (nil nil (locals stack flg) (equal equal) (programp) nil nil) ((frame Job setref locals flg pc) nil (locals stack sync-flg ` quote 0 1 2 5 t) nil nil nil nil) ((frame frame frame UNLOCKED t nil) nil ((REF (, i))) (equal equal equal) nil nil nil) ((stack nil stack stack) nil (REF ` `) nil nil nil nil) (((REF (, i))) (8) ((REF 8)) nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-main-frame (nil nil nil (let*) nil nil nil) (nil nil nil nil (and) nil ((pc (pc frame)))) (nil nil (locals stack flg container job) (equal) (programp) nil nil) ((frame Apprentice main flg pc) nil (locals stack sync-flg quote 0 3 4 7 8 11 14 15 18 19 20 21 24 25 28 t) (nth nth) nil nil nil) ((frame frame frame locals locals UNLOCKED nil) (1 2) nil (and and and and) (and and and and and) (and and and and and and) nil) (nil nil (not not not not not not not not not not not not) (equal equal equal or equal equal equal equal equal equal equal equal equal or equal equal equal equal equal equal equal equal equal equal equal or equal equal equal equal equal equal equal equal equal) nil nil nil) ((suspendedp stack nil suspendedp stack suspendedp stack stack suspendedp container stack nil suspendedp container stack nil suspendedp container stack suspendedp container stack container stack suspendedp container job stack nil suspendedp container job stack suspendedp container job stack container job stack nil suspendedp container job stack suspendedp container job stack nil) nil (quote quote not quote quote quote quote ` quote ` not quote ` quote ` quote ` ` quote ` ` not quote ` quote ` ` quote `) (equal equal equal) nil nil nil)) (/models/jvm/m5/apprentice.lisp::thread-no (nil nil nil (nth) nil nil nil) ((thread) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::thread-call-stack (nil nil nil (nth) nil nil nil) ((thread) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::thread-status (nil nil nil (nth) nil nil nil) ((thread) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::thread-rref (nil nil nil (nth) nil nil nil) ((thread) (3) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::frame0 (nil nil (first) nil nil nil nil) ((cs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::frame1 (nil nil (second) nil nil nil nil) ((cs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::frame2 (nil nil (third) nil nil nil nil) ((cs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::frame3 (nil nil (fourth) nil nil nil nil) ((cs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-thread0 (nil nil nil (let) nil nil nil) (nil nil nil nil ((n (thread-no thread))) (and) nil) (nil nil (cs status rref) (equal equal equal) nil nil nil) ((n status rref nil) (0) (thread-call-stack thread-status thread-rref quote (endp cs) (programp (frame0 cs) java.lang.Object <init>) (programp (frame0 cs) java.lang.Thread <init>) (programp (frame0 cs) Container <init>) (programp (frame0 cs) Job <init>) (programp (frame0 cs) Job setref) t) nil nil nil nil) ((thread thread thread SCHEDULED nil) nil nil nil (cond and and and good-main-frame) nil (and)) ((i nil) nil ((programp (frame1 cs) java.lang.Thread <init>) (programp (frame1 cs) Container <init>) t good-java.lang.Thread.<init>-frame not good-Job.<init>-frame not good-container.<init>-frame not good-Job.<init>-frame not not frame0) (good-Job.setref-frame) (good-main-frame good-main-frame good-main-frame good-main-frame) nil nil) ((nil i i i i i cs) (18 7 18 24) (frame0 endp frame1 endp frame2 frame0 endp frame1 frame0 endp frame1 frame0 endp frame1) nil nil nil (and))) nil (/models/jvm/m5/apprentice.lisp::standard-heap-prefixp1 (nil nil nil (cond) nil nil nil) (nil nil ((endp prefix) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil (equal recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((prefix heap prefix heap) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/models/jvm/m5/apprentice.lisp::main-pc (nil nil nil nil nil nil nil) (nil nil ((programp (frame0 cs) java.lang.Object <init>) (programp (frame0 cs) java.lang.Thread <init>) (programp (frame0 cs) Container <init>) (programp (frame0 cs) Job <init>) (programp (frame0 cs) Job setref) t) nil nil nil nil) (nil (18 7 18 24) (pc) (cond) nil nil nil) (nil nil ((programp (frame1 cs) java.lang.Thread <init>) t frame0) nil nil nil nil) ((cs) (18 7) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-heap (nil nil nil (let*) nil nil nil) (nil nil nil ((thread0 (first tt))) nil (and) nil) (nil nil (n0 frame0 alistp standard-heap-prefixp) (equal) nil nil nil) ((heap n0 heap) (0) (thread-no frame0 main-pc 0 3 4 7 8 11 14 15 18 19 20 21 24 25 28 t) nil nil nil nil) ((thread0 nil) nil (thread-call-stack thread-call-stack null) nil (and and and and and and and and and and and and and and) nil nil) ((thread0 thread0) nil (consp null consp null consp null consp null consp consp consp consp consp consp consp consp consp consp) (nthcdr equal equal equal equal equal equal equal equal equal equal equal equal equal equal) (good-objrefs good-objrefs good-objrefs good-objrefs good-objrefs good-objrefs good-objrefs good-objrefs good-objrefs good-objrefs) nil nil) ((heap nil t t t t t t nil nil) (8 8 8 8 8 8 8 8 8 8 8 8 8 8 8) (car car car car car cdr car cdr car cdr car cdr car cdr car cdr car cdr car cdr car cdr car cdr) (nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr nthcdr) (if) nil nil)) (/models/jvm/m5/apprentice.lisp::good-class-table (nil nil nil (equal) nil nil nil) ((ct) nil (class-table) nil nil nil nil) ((*a0*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::object-lockedp (nil nil nil (and) nil nil nil) (nil nil nil (equal equal) nil nil nil) ((mcount th monitor) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-run-frame (nil nil nil (let) nil nil nil) (nil nil nil nil ((pc (pc frame))) nil (and)) (nil nil (locals stack flg) (equal equal) (programp if) nil nil) ((frame Job run locals flg activep t pc) nil (locals stack sync-flg ` quote not 0 3 4 7 8 t) nil nil nil nil) ((frame frame frame (REF (, (+ 8 th))) UNLOCKED nil) nil nil (and and and and) (object-lockedp if) nil nil) ((th monitor mcount activep activep activep activep activep) nil nil (equal equal equal equal equal equal) nil nil nil) ((stack nil stack nil stack stack stack nil stack nil) nil (` `) nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-incr-frame (nil nil nil (let) nil nil nil) (nil nil nil nil (and) ((pc (pc frame))) nil) (nil nil (locals stack flg self) (equal) (programp) nil nil) ((frame Job incr flg pc) nil (locals stack sync-flg ` quote 0 1 4 5 6 7 8 11 12 15 18 19 20 23 24 25 28 29 30 31 32 33 34 t) nil nil nil nil) ((frame frame frame UNLOCKED nil nil nil nil nil nil) nil (REF) nil (and and and and and and and and and and and and and and and and and and) nil nil) (nil nil (, not not not not not not not not) (equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal equal) (object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp) nil nil) ((locals stack nil locals stack locals stack locals stack nil locals stack locals th monitor mcount stack nil locals th monitor mcount stack locals th monitor mcount stack locals th monitor mcount stack locals th monitor mcount stack locals th monitor mcount stack locals th monitor mcount stack locals th monitor mcount stack locals th monitor mcount stack nil locals th monitor mcount stack locals stack nil locals stack nil locals stack) nil (` ` ` ` quote ` ` quote ` ` ` ` quote ` ` ` quote ` ` ` ` ` ` ` ` quote ` ` ` `) (+) (object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp object-lockedp) nil nil)) (/models/jvm/m5/apprentice.lisp::good-thread (nil nil nil (let) nil nil nil) (nil nil nil nil ((n (thread-no thread))) (and) nil) (nil nil (cs status rref) (equal equal equal) nil (cond) nil) ((n th status scheduled rref) nil (thread-call-stack thread-status thread-rref ` (equal scheduled (quote UNSCHEDULED)) (endp cs) (programp (frame0 cs) Job incr) t) nil nil nil nil) ((thread thread thread nil) nil (REF) (and) (and) nil (good-run-frame)) ((th t monitor mcount) nil (, null not frame0) nil nil nil (good-run-frame good-incr-frame good-run-frame)) ((th t monitor mcount th counter monitor mcount th nil monitor mcount cs) nil (frame0 cdr frame0 endp frame1) (+) nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-threads (nil nil nil (cond) nil nil nil) (nil nil ((endp threads) t) nil nil nil nil) ((t) nil nil (and) nil nil nil) (nil nil nil nil nil nil nil) ((i counter monitor mcount counter monitor mcount except-last-flg) nil (car cdr) (+) (if) nil nil) ((threads i threads) (1) (quote quote) (and) nil nil nil) ((except-last-flg UNSCHEDULED SCHEDULED) nil (endp) nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-thread-table (nil nil nil (let*) nil nil nil) (nil nil ((thread0 (first tt))) nil nil (and) nil) (nil nil (main-pc alistp) (equal good-thread0) (if) nil nil) ((tt thread0 i) (0) (main-pc thread-no) (<= equal) nil nil nil) ((thread0 main-pc nil counter monitor mcount) (8 1) (thread-call-stack cdr cdr) (and) nil nil nil) ((thread0 tt tt) nil nil (<= <) nil nil nil) ((main-pc main-pc) (14 28) nil nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::good-state (nil nil nil (let) nil nil nil) (nil nil nil ((counter (gf Container counter 8 (heap s)))) nil (and) nil) (nil nil (monitor mcount good-class-table) (good-heap or) nil nil (good-thread-table)) ((counter monitor mcount) nil (class-table thread-table thread-table heap) (- equal and) nil (gf gf) nil) ((java.lang.Object monitor java.lang.Object mcount s s s s) (8 8 1 8) (heap heap len len integerp) nil (if) nil nil) ((s s counter) nil (heap heap) (equal equal) (and) nil nil) ((s s mcount monitor) (0 0) nil (equal < <) nil nil nil)) (/models/jvm/m5/apprentice.lisp::phase1-hint (nil nil nil (cond) nil nil nil) (nil nil (stablep t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((term (find-first-use-lst (quote step) clause))) nil nil (cond) nil nil nil) (nil nil (term t) nil nil nil nil) ((nil) nil (`) nil nil nil nil) (nil nil nil nil (:computed-hint-replacement) nil nil)) (/models/jvm/m5/apprentice.lisp::phase2-hint (nil nil nil (cond) nil nil nil) (nil nil (stablep t) nil nil nil nil) ((nil) nil nil (let) nil nil nil) (((term (find-first-use-lst (quote good-state) clause))) nil nil (cond) nil nil nil) (nil nil (term t) nil nil nil nil) ((nil) nil (`) nil nil nil nil) (nil nil (:in-theory) nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::test (nil nil nil (cond) nil nil nil) (nil nil ((good-state s) t) nil nil nil nil) (nil nil nil (cond list) nil nil nil) ((s) nil ((endp sched) t quote) nil nil nil nil) ((NO) nil nil (list recursive-call) nil nil nil) ((s) nil (quote cdr) (step) nil nil nil) ((YES sched s) nil (car) nil nil nil nil)) (/models/jvm/m5/apprentice.lisp::repeat (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n th) nil nil (recursive-call) nil nil nil) ((th) nil nil (-) nil nil nil) ((n) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))