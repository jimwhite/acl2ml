(nil (/clause-processors/use-by-hint.lisp::remove-first-hyp-cp (nil nil nil nil (if) nil nil) (nil nil (consp list list) nil nil nil nil) ((clause clause) nil (cdr) nil nil nil nil) ((clause) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/use-by-hint.lisp::use-by-computed-hint (nil nil nil nil (case-match) nil nil) ((clause) nil ((((quote not) ((quote use-by-hint) ((quote quote) rule . &) . &) . &) . &) &) nil nil nil nil) ((nil) nil (`) nil nil nil nil) (nil nil nil nil (:computed-hint-replacement) nil nil) (((quote (:by (, rule) :do-not (quote (preprocess simplify)))) :clause-processor remove-first-hyp-cp) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) nil (/clause-processors/use-by-hint.lisp::use-these-hints-hint (nil nil nil nil (case-match) nil nil) ((clause) nil ((((quote not) ((quote use-these-hints) ((quote quote) the-hints . &) . &) . &) . &) &) nil nil nil nil) ((nil) nil (`) nil nil nil nil) (nil nil nil nil (:computed-hint-replacement) nil nil) ((:clause-processor remove-first-hyp-cp) nil (,) nil nil nil nil) ((the-hints) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))