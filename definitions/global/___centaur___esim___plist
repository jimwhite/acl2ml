((/centaur/esim/plist.lisp::rempl (nil nil nil nil (cond) nil nil) (nil nil ((or (atom pl) (atom (cdr pl))) (eq key (car pl)) t) nil nil nil nil) ((pl) nil nil (recursive-call) (list*) nil nil) ((key) nil (cddr car cadr) (recursive-call) nil nil nil) ((pl pl pl key) nil (cddr) nil nil nil nil) ((pl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/plist.lisp::chgpl (nil nil nil nil (list*) nil nil) ((key val) nil nil (rempl) nil nil nil) ((key pl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/plist.lisp::rempl* (nil nil nil nil (cond) nil nil) (nil nil ((or (atom pl) (atom (cdr pl))) (member-eq (car pl) keys) t) nil nil nil nil) ((pl) nil nil (recursive-call) (list*) nil nil) ((keys) nil (cddr car cadr) (recursive-call) nil nil nil) ((pl pl pl keys) nil (cddr) nil nil nil nil) ((pl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/plist.lisp::pl-keys (nil nil nil nil (if) nil nil) ((nil) nil nil (or cons) nil nil nil) (nil nil (atom atom car recursive-call) nil nil nil nil) ((pl pl) nil (cdr cddr) nil nil nil nil) ((pl pl) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/plist.lisp::append-pl (nil nil nil (cond) nil nil nil) (nil nil ((or (atom pl1) (atom (cdr pl1))) t) nil nil nil nil) ((pl2) nil nil nil (list*) nil nil) (nil nil (car cadr) (recursive-call) nil nil nil) ((pl1 pl1 pl2) nil (cddr) nil nil nil nil) ((pl1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/plist.lisp::chgpl* (nil nil nil (append-pl) nil nil nil) ((new) nil nil (rempl*) nil nil nil) ((pl) nil (pl-keys) nil nil nil nil) ((new) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))