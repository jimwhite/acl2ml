((/taspi/tree-score/min-length.lisp::small-integer-transition-rowp (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (and) nil nil) ((x) nil (consp small-integerp recursive-call) nil nil nil nil) (nil nil (car cdar cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::small-integer-transition-matrixp (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (and) nil nil) ((x) nil (consp small-integer-transition-rowp recursive-call) nil nil nil nil) (nil nil (car cdar cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::get-transition-cost (nil nil nil (let) nil nil nil) (((row (assoc-hqual char1 transition-matrix))) nil nil nil (if) nil nil) (nil nil (consp) (let prog2$) nil nil nil) ((row (val (assoc-hqual char2 row)) Error: char1 not in transition-matrix) nil (cw) nil (if) nil nil) ((Error: char1 not in transition-matrix~%) nil (consp cdr) (prog2$) nil nil nil) ((val val Error: char2 not in transition-matrix) nil (cw) nil nil nil nil) ((Error: char2 not in transition-matrix~%) nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::affine-dist (nil nil nil nil (if) nil nil) ((acc) nil (not) nil (if) nil nil) ((acc) nil (rationalp consp) (let) nil nil nil) ((acc seq1) nil ((char1 (car seq1))) nil (if) nil nil) (nil nil (char2) (and) (if) nil nil) ((gap-char gap-open-flag gap-open-cost gap-extend transition-matrix acc) nil (car cdr cdr) (equal equal equal) (if if) nil nil) ((seq2 char1 gap-char char2 gap-char seq1 seq2 char1 gap-char) nil nil (equal equal let) (if) nil nil)) (/taspi/tree-score/min-length.lisp::make-default-translist (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((alphabet) nil nil nil (if recursive-call) nil nil) ((currstate cost) nil (cdr) (equal cons cons) nil nil nil) ((currstate cost alphabet) (0) (car car car) nil nil nil nil) ((alphabet alphabet alphabet) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::make-default-transmat (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((alphabet) nil nil (cons) (recursive-call) nil nil) ((whole cost) nil (car cdr) nil (make-default-translist) nil nil) ((alphabet whole cost alphabet) nil (car) nil nil nil nil) ((alphabet) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::make-default-transition-matrix (nil nil nil nil (make-default-transmat) nil nil) ((alphabet alphabet cost) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::find-min-pos (nil nil nil nil (if) nil nil) ((curMinPos) nil (consp) nil (if) nil nil) ((x) nil nil (or) (if) (recursive-call) nil) (nil nil (cdr 1+ car list) (equal equal) (and) (recursive-call recursive-call) nil) ((curMin x pos x pos curMin curMin curMinPos) (-1) (not not car cdr 1+ car cdr 1+) (< cons) nil nil nil) ((curMin x x pos x pos curMinPos x pos) nil (car) (equal equal) nil nil nil) ((curMin x) (-1 -1) (car) nil nil nil nil)) (/taspi/tree-score/min-length.lisp::sequence-from-parent-scorelist (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((x) nil (consp) (prog2$) (if) nil nil) ((Error:  Need good parent sequence score-list) nil (car rational-listp cw) (cons prog2$) nil nil nil) ((x Error: Need rational-listp in sequence-from-parent-scorelist Error:  Need good parent sequence score-list~%) nil (car car recursive-call cw) nil nil nil nil) ((x Error: Need rational-listp in sequence-from-parent-scorelist~%) nil (cdr) nil nil (find-min-pos) nil) ((x) (0 -1) (car list) nil nil nil nil)) (/taspi/tree-score/min-length.lisp::get-child-char (nil nil nil (let) nil nil nil) (((possible-child-chars (find-min-pos child-scorelist 0 -1 (list -1)))) nil nil nil (if) nil nil) ((parent-char) nil (car) (intersect) nil nil nil) ((possible-child-chars possible-child-chars) nil (list) nil nil nil nil) ((parent-char) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::rational-list-listp (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil (rational-listp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::get-child-sequence (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((child-scorelists) nil nil (get-child-char recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((child-scorelists parent-seq child-scorelists parent-seq) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::make-sequence-pairings-each (nil nil nil nil (if) nil nil) ((acc) nil (consp) (let) nil nil nil) ((child (child-scorelists (cdr (assoc-hqual (car child) scorelist-pairings)))) nil nil nil (if) nil nil) (nil nil nil (and let prog2$) nil nil nil) (((childSeq (get-child-sequence child-scorelists parent-seq)) Error: Need good scorelists in scorelist-pairings) nil (rational-list-listp cw) (equal) nil (recursive-call) nil) ((child-scorelists childSeq scorelist-pairings Error: Need good scorelists in scorelist-pairings~%) nil (len len car) nil nil (recursive-call) nil) ((child-scorelists parent-seq child parent-seq scorelist-pairings) nil (cdr) (cons) nil nil nil)) (/taspi/tree-score/min-length.lisp::make-sequence-pairings (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((scorelist-pairings (parent-seq (sequence-from-parent-scorelist (cdar scorelist-pairings)))) nil nil nil (if) nil nil) (nil nil (not) (prog2$) nil (make-sequence-pairings-each) nil) ((parent-seq nil Error passed on in make-sequence-pairings) nil (caar cdr cw) (equal) nil nil nil) ((parent-seq Error scorelist-pairings scorelist-pairings Error passed on in make-sequence-pairings~%) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::make-sequence-pairings-for-tree (nil nil nil (let) nil nil nil) (((sequence-score-lists (make-sequence-score-lists sequences cssl-map (quote seq-score-list)))) nil nil nil (if) nil nil) (nil nil nil (and prog2$) (mv-let) nil nil) ((Error: Bad scorelists from make-sequence-score-lists) nil (map-to-small-integer-list-listp total cw) (good-len-lists-mapping) (if) (score-tree-and-sequences-keep-internal) nil) ((sequence-score-lists sequence-score-lists matrix-lists pairings tree sequence-score-lists matrix-lists nil Error: Bad scorelists from make-sequence-score-lists~%) nil (alistp-gen make-sequence-pairings) (prog2$) nil nil nil) ((pairings Error: Bad pairings from score-tree-and-keep-internal) nil (cw) (cons) nil nil nil) ((pairings Error: Bad pairings from score-tree-and-keep-internal~%) nil nil (cons) nil nil nil)) (/taspi/tree-score/min-length.lisp::make-sequence-pairings-for-tree-from-scorelists (nil nil nil nil (mv-let) nil nil) (nil nil (total) nil (if) (score-tree-and-sequences-keep-internal) nil) ((pairings tree sequence-score-lists matrix-lists nil Error: Bad pairings from score-tree-and-keep-internal) nil (alistp-gen make-sequence-pairings) nil nil nil nil) ((pairings) nil nil (cons) nil nil nil) ((pairings) nil nil (cons) nil nil nil) ((tree total) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::score-pairings (nil nil nil (cond) nil nil nil) (nil nil ((equal type (quote affine)) t) nil nil nil nil) ((Error: Invalid score type) nil nil nil (if) nil nil) ((acc) nil (consp) nil (if) nil nil) ((pairings Error: Need same length pairings) nil nil (and) (if) nil nil) ((Error: Wrong arguments in call to affine) nil (consp) (equal equal let) nil nil nil) (nil (4) (car len len len) nil ((gap-char (car args)) if) nil nil)) (/taspi/tree-score/min-length.lisp::get-matrix-lists-from-trans (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil (strip-cdrs-gen recursive-call) nil nil nil nil) (nil nil (cdar cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::numberfy-helper (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil nil (cons recursive-call) nil nil nil) ((n) nil (cdar cdr 1+) nil nil nil nil) ((x x n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::numberfy (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil nil (cons recursive-call) nil nil nil) ((n) nil (cdr 1+) (numberfy-helper) nil nil nil) ((x n) (0) (cdar) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::update-sequence-keys (nil nil nil nil (if) nil nil) (nil nil (consp) nil (recursive-call if) nil nil) ((anc-tree-mapping sequences) nil (cdr consp) nil (if if hut) nil nil) ((sequences anc-tree-mapping tree tree sequences) nil (car cdr) (equal equal cons) (hut) nil nil) ((tree sequences tree tree tree tree) nil (cdar cdar cdr cdar cdr) nil nil nil nil) ((anc-tree-mapping anc-tree-mapping anc-tree-mapping) nil nil (het het) nil nil nil) ((sequences sequences) nil (caar caar) nil nil nil nil)) (/taspi/tree-score/min-length.lisp::score-tree-with-affine (nil nil nil nil (if) nil nil) (nil nil (not) (let let*) nil nil nil) (((pairings (make-sequence-pairings-for-tree tree sequences cssl-map (get-matrix-lists-from-trans transition-matrix)))) nil (consp (new-seqs (hons-reverse (update-sequence-keys sequences anc-mappings tree)))) nil (if if) nil nil) ((anc-mappings pairings pairings) nil (consp pairings consp) nil nil (score-pairings score-pairings) nil) ((pairings pairings pairings pairings) (0 0) (quote make-sequence-pairings quote) nil nil (list list) nil) ((affine gap-char gap-cost gap-extend-cost affine gap-char gap-cost gap-extend-cost) nil nil (numberfy numberfy) (make-sequence-score-lists) nil nil) ((transition-matrix new-seqs cssl-map transition-matrix) (0 0) (quote) nil nil nil nil)) (/taspi/tree-score/min-length.lisp::score-tree-with-affine-score-lists (nil nil nil nil (if) nil nil) (nil nil (not) (let let*) nil nil nil) (((pairings (make-sequence-pairings-for-tree-from-scorelists tree score-lists (get-matrix-lists-from-trans transition-matrix)))) nil (consp (new-seq-score-lists (update-sequence-keys score-lists anc-mappings tree))) nil (if if) nil nil) ((anc-mappings pairings pairings) nil (consp pairings consp) nil nil (score-pairings score-pairings) nil) ((pairings pairings pairings pairings) (0 0) (quote make-sequence-pairings quote) nil nil (list list) nil) ((affine gap-char gap-cost gap-extend-cost new-seq-score-lists affine gap-char gap-cost gap-extend-cost) nil nil (numberfy numberfy) nil nil nil) ((transition-matrix transition-matrix) (0 0) nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::score-trees-with-affine (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((trees-and-anc-mapping Error: Bad trees-and-anc-mapping in score-trees-with-affine) nil nil (and cons) nil nil nil) (nil nil (consp alistp-gen) (hons) nil nil nil) ((sequences gap-char gap-cost gap-extend-cost cssl-map transition-matrix) nil (car cdar caar cdr) nil nil nil nil) ((trees-and-anc-mapping trees-and-anc-mapping sequences gap-char gap-cost gap-extend-cost cssl-map transition-matrix trees-and-anc-mapping trees-and-anc-mapping) nil (caar cdar) nil nil nil nil) ((trees-and-anc-mapping trees-and-anc-mapping) nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::score-trees-with-affine-score-lists (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((trees-and-anc-mapping Error: Bad trees-and-anc-mapping in score-trees-with-affine) nil nil (and cons) nil nil nil) (nil nil (consp alistp-gen) (hons) nil nil nil) ((score-lists gap-char gap-cost gap-extend-cost transition-matrix) nil (car cdar caar cdr) nil nil nil nil) ((trees-and-anc-mapping trees-and-anc-mapping score-lists gap-char gap-cost gap-extend-cost transition-matrix trees-and-anc-mapping trees-and-anc-mapping) nil (caar cdar) nil nil nil nil) ((trees-and-anc-mapping trees-and-anc-mapping) nil nil nil nil nil nil)) (/taspi/tree-score/min-length.lisp::get-range (nil nil nil nil (if) nil nil) (nil nil (consp) nil (if mv) nil nil) ((x low high tree-achieving-low) nil (rationalp) nil (if) (recursive-call) nil) ((low high tree-achieving-low) nil (caar cdr) (<) (if) (recursive-call) nil) ((x low high x) nil (caar cdr caar cdar) (>) nil (recursive-call recursive-call) nil) ((x x x x high low tree-achieving-low low high tree-achieving-low) nil (caar cdr caar cdr) nil nil nil nil) ((x x x x) nil nil nil nil nil nil)))