((/centaur/esim/esim-sexpr-support.lisp::collect-signal-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (pat-flatten) nil nil nil) ((occs) nil nil (gpl recursive-call) nil nil nil) ((key key) nil (car cdr) nil nil nil nil) ((occs occs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::str-prefix-atom (nil nil (hons-copy) nil nil nil nil) (nil nil nil nil nil (concatenate) nil) ((prefix sep) nil (quote stringify-atom) nil nil nil nil) ((string x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::str-prefix-pattern (nil nil nil nil (if) nil nil) ((pat nil) nil nil nil (if) nil nil) (nil nil (atom) (cons) (str-prefix-atom) nil nil) ((pat prefix sep pat) nil nil nil (recursive-call recursive-call) nil nil) ((prefix sep prefix sep) nil (car cdr) nil nil nil nil) ((pat pat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::pattern-to-int-varmap (nil nil nil (b*) nil nil nil) (nil nil nil (((when (not pat)) (mv varmap idx))) (recursive-call) nil nil) ((varmap idx) nil ((when (atom pat)) (mv varmap idx) car) nil nil nil nil) ((pat) nil nil nil (if recursive-call) nil nil) ((varmap idx) nil (cdr) (hons-get mv mv) nil nil nil) ((pat varmap varmap idx pat) nil nil (+) (hons-acons) nil nil) ((pat varmap idx) (2) nil (cons) nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::esim-faig-int-varmap-occs (nil nil nil nil (if) nil nil) (nil nil (atom) (mv b*) nil nil nil) ((occnames varmap idx) nil nil ((occ (cdr (hons-get (car occnames) (occmap mod))))) nil (recursive-call) nil) ((mod varmap idx) nil ((mv varmap idx) (mv varmap idx) cdr) nil nil nil nil) ((occnames) nil nil nil (pattern-to-int-varmap pattern-to-int-varmap) nil nil) ((varmap idx varmap idx) nil nil (gpl gpl) nil nil nil) ((:i occ :o occ) nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::alist-keys-are-p (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (equal) (if) nil nil) ((y) nil (alist-keys atom not) nil (if) nil nil) ((x x y) nil (atom) (recursive-call) (and) nil nil) ((y) nil (car cdr consp) (equal recursive-call) nil nil nil) ((x x y) nil (caar car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil)) nil (/centaur/esim/esim-sexpr-support.lisp::esim-mod-occs-guard (nil nil nil nil nil (and) nil) (nil nil (good-esim-modulep true-listp) (or subsetp-equal) nil nil nil) ((mod occs occs) nil (atom consp alist-keys) nil nil nil nil) ((occs) nil (occmap) (gpl) nil nil nil) ((:occs mod mod) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::find-in-occs-field (nil nil nil nil (if) nil nil) ((nil) nil (atom) (or) nil nil nil) ((occs) nil nil (member-of-pat-flatten) (recursive-call) nil nil) ((name key name) nil (cdr) (gpl) nil nil nil) ((key occs) nil (car) nil nil nil nil) ((occs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::sexpr-res-list (nil nil nil nil (cond) nil nil) (nil nil ((atom x) (atom (cdr x)) t) nil nil nil nil) ((*4vz-sexpr*) nil (car) (xxxjoin) nil nil nil) ((x x) nil (quote) nil nil nil nil) ((res) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::ram-st-from-i-o (nil nil nil (list) nil nil nil) ((i o) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::ram-o-from-st (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil (cadr) nil (if) nil nil) ((s) nil (cadr) (and) (er) nil nil) ((s hard? malformed primitive ram state) nil (consp consp quote) nil nil nil nil) ((s recursive-call) nil (cdr) nil nil nil nil) ((s) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::ram-i-from-st (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil (car) nil (if) nil nil) ((s) nil (consp car) nil (er) nil nil) ((s s hard? malformed primitive ram state) nil (quote) nil nil nil nil) ((ram-o-from-st) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::esim-colon-x-replacement (nil nil (hons-copy) nil nil nil nil) (nil nil nil nil (if) nil nil) ((x) nil (consp) nil nil nil nil) ((x x) nil (x-identity x-true x-false x-float x-unknown x-buf x-not x-and x-or x-xor x-mux x-t-wire x-pullup x-ft-buf x-ff x-latch+ x-latch- x-latch-+ x-reg x-res x-ram otherwise) nil nil nil nil) (nil nil (quote ` ` ` ` quote quote quote quote quote quote quote quote quote quote quote quote quote quote ` `) (or) nil nil nil) ((x) nil (:out :out :out :out :out :out :out :out :out :out :out :out :out :out :out quote) nil (:nst :nst :nst :nst :nst :nst) nil nil) (((o . a) (o , *4vt-sexpr*) (o , *4vf-sexpr*) (o , *4vz-sexpr*) (o , *4vx-sexpr*) (o buf a) (o not a) (o and a b) (o or a b) (o xor a b) (o ite a b c) (o res a b) (o pullup a) (b tristate cntl in) (s . a) :out (o . s) (s ite clk d s) :out (s ite clk s d) :out :out :out (q ite clk s- s+) (o , (sexpr-res-list (pat-flatten1 i))) :out) nil ((q ite clk d s) (q ite clk d s) (s- ite clk s- d) (q ite clk s- s+) (s- ite clk s- d) , , :out) nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::fix-emod-for-esim (nil nil nil nil (if) nil nil) ((mod) nil (good-esim-modulep) (prog2$) nil nil nil) ((mod) nil (primitives-to-esim) (cw) nil nil nil) ((Warning: Fixing ~x0 for esim.~%) nil (mod-fix-t-f) (gpl) nil nil nil) ((:n mod) nil (mod-reduce) nil nil nil nil) ((mod) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::bool-to-4v (nil nil nil nil (if) nil nil) ((x *4vt* *4vf*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::bool-to-4v-lst (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (bool-to-4v recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::bool-to-4v-sexpr (nil nil nil nil (if) nil nil) ((x *4vt-sexpr* *4vf-sexpr*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/esim/esim-sexpr-support.lisp::bool-to-4v-sexpr-lst (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((x) nil (bool-to-4v-sexpr recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))