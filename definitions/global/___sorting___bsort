((/sorting/bsort.lisp::bnext (nil nil nil nil nil (cond) nil) (nil nil ((endp x) (endp (cdr x)) (lexorder (car x) (cadr x)) t) nil nil nil nil) ((x x) nil nil (cons cons) nil nil nil) (nil nil (car recursive-call cadr recursive-call) nil nil nil nil) ((x x) nil (cdr) (cons) nil nil nil) ((x) nil (car cddr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/sorting/bsort.lisp::how-many-smaller (nil nil nil nil nil (cond) nil) (nil nil ((endp x) (equal e (car x)) (lexorder (car x) e) t) nil nil nil nil) (nil (0) nil (recursive-call + recursive-call) nil nil nil) ((e e) (1) (cdr cdr) (recursive-call) nil nil nil) ((x e x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/sorting/bsort.lisp::bnext-size (nil nil nil (cond) nil nil nil) (nil nil ((endp x) t) nil nil nil nil) (nil (0) nil (+) nil nil nil) (nil nil (recursive-call) (how-many-smaller) nil nil nil) (nil nil (car cdr cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/sorting/bsort.lisp::samep (nil nil nil nil (if) nil nil) (nil nil (endp endp) nil (if) nil nil) ((x y nil) nil (endp) (and) nil nil nil) ((y) nil nil (equal recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/sorting/bsort.lisp::bsort (nil nil nil nil (if) nil nil) ((x) nil (recursive-call) (equal) nil nil nil) ((x) nil (bnext bnext) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))