((/nonstd/misc/check-acl2-exports.lisp::raw-acl2-exports1 (nil nil nil (cond) nil nil nil) (nil nil ((endp x) t) nil nil nil nil) ((acc) nil nil nil nil nil (recursive-call)) ((pkg-witness wrld allp) nil (cdr) (let) nil nil nil) ((x (sym (caar x))) nil nil (cond) nil nil nil) (nil nil ((and (symbolp sym) (eq (intern-in-package-of-symbol (symbol-name sym) pkg-witness) sym) (or allp (getprop sym (quote const) nil (quote current-acl2-world) wrld) (not (eq (getprop sym (quote formals) t (quote current-acl2-world) wrld) t)) (getprop sym (quote macro-body) nil (quote current-acl2-world) wrld))) t) nil nil nil nil) ((acc) nil nil (cons) nil nil nil)) (/nonstd/misc/check-acl2-exports.lisp::raw-acl2-exports (nil nil nil (let) nil nil nil) (((doc-alist (global-val (quote documentation-alist) wrld))) nil nil (cond) nil nil nil) (nil nil ((alistp doc-alist) t) nil nil nil nil) (nil nil nil nil (er) nil (raw-acl2-exports1)) ((doc-alist wrld allp nil hard? Expected ~x0 to be an alistp!) nil (pkg-witness quote) nil nil nil nil) ((ACL2 recursive-call) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/check-acl2-exports.lisp::missing-from-acl2-exports (nil nil nil (set-difference-eq) nil nil nil) (nil nil nil (raw-acl2-exports append) nil nil nil) ((nil wrld *acl2-exports-exclusions* *acl2-exports*) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/check-acl2-exports.lisp::undocumented-acl2-exports (nil nil nil (set-difference-eq) nil nil nil) ((*acl2-exports*) nil nil (raw-acl2-exports) nil nil nil) ((t wrld) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/check-acl2-exports.lisp::suspicious-acl2-exports (nil nil nil (set-difference-eq) nil nil nil) (nil nil nil (raw-acl2-exports raw-acl2-exports) nil nil nil) ((t wrld nil wrld) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))