((/textbook/chap11/how-many-soln2.lisp::split-list (nil nil nil nil (cond) nil nil) (nil nil ((atom x) (atom (cdr x)) t) nil nil nil nil) (nil nil nil (mv mv) (mv-let) nil nil) ((nil nil x nil) nil (a recursive-call) (mv) nil nil nil) ((b) nil (cddr) (cons cons) nil nil nil) ((x a b) nil (car cadr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/textbook/chap11/how-many-soln2.lisp::merge2 (nil nil nil nil nil (cond) nil) (nil nil ((atom x) (atom y) (< (car x) (car y)) t) nil nil nil nil) ((y x) nil nil (cons cons) nil nil nil) (nil nil (car car) (recursive-call recursive-call) nil nil nil) ((x y y x) nil (cdr cdr) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/how-many-soln2.lisp::mergesort (nil nil nil nil (cond) nil nil) (nil nil ((atom x) (atom (cdr x)) t) nil nil nil nil) ((nil x) nil nil nil (mv-let) nil nil) (nil nil (a split-list) (merge2) nil nil nil) ((b x) nil (recursive-call recursive-call) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/how-many-soln2.lisp::how-many (nil nil nil nil (cond) nil nil) (nil nil ((endp x) (equal e (car x)) t) nil nil nil nil) (nil (0) (1+) (recursive-call) nil nil nil) ((e) nil (cdr) (recursive-call) nil nil nil) ((e x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/how-many-soln2.lisp::cntrex (nil nil nil nil (cond) nil nil) (nil nil ((atom x) (not (in (car x) y)) t) nil nil nil nil) (nil nil (car car) (recursive-call) nil nil nil) ((y x) nil (cdr) (del) nil nil nil) ((x y) nil (car) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/textbook/chap11/how-many-soln2.lisp::tlfix (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))