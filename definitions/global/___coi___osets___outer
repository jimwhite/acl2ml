((/coi/osets/outer.lisp::delete (nil nil nil nil (cond) nil nil) (nil nil ((empty X) (equal a (head X)) t) nil nil nil nil) ((nil) nil (tail) (insert) nil nil nil) ((X) nil (head) (recursive-call) nil nil nil) ((X a) nil (tail) nil nil nil nil) ((X) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/osets/outer.lisp::union (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (fast-union) (if) nil nil) ((X Y) nil (empty sfix) (insert) nil nil nil) ((X Y) nil (head) (recursive-call) nil nil nil) ((X Y) nil (tail) nil nil nil nil) ((X) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/osets/outer.lisp::intersect (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (fast-intersect) (cond) nil nil) ((X Y) nil ((empty X) (in (head X) Y) t) nil nil nil nil) (nil nil (sfix) (insert recursive-call) nil nil nil) ((X Y) nil (head tail) (recursive-call) nil nil nil) ((X Y X) nil (tail) nil nil nil nil) ((X) nil nil nil nil nil nil)) (/coi/osets/outer.lisp::difference (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil (fast-difference) (cond) nil nil) ((X Y) nil ((empty X) (in (head X) Y) t) nil nil nil nil) (nil nil (sfix) (recursive-call insert) nil nil nil) ((X Y) nil (tail head) (recursive-call) nil nil nil) ((X X Y) nil (tail) nil nil nil nil) ((X) nil nil nil nil nil nil)) (/coi/osets/outer.lisp::cardinality (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil (len) nil (if) nil nil) ((X) (0) (empty 1+) nil nil nil nil) ((X) nil (recursive-call) nil nil nil nil) (nil nil (tail) nil nil nil nil) ((X) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/osets/outer.lisp::double-delete-induction (nil nil nil nil (if) nil nil) (nil nil nil (or list recursive-call) nil nil nil) ((X Y) nil (empty empty) (delete delete) nil nil nil) ((X Y X Y) nil (head head) nil nil nil nil) ((X X) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))