((/coi/gacc/gacc3.lisp::z* (nil nil nil nil (if) nil nil) ((ram) nil (consp) (let) nil nil nil) ((zlist (ram (z*-rec (car zlist) ram))) nil nil (recursive-call) nil nil nil) ((ram) nil (cdr) nil nil nil nil) ((zlist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::z*-induction-fn (nil nil nil nil (if) nil nil) (nil nil (consp) nil nil nil (list)) ((zlist ptr size value ptr ram1 ram2 size value) nil (cdr) (z*-rec z*-rec) nil nil nil) ((ram1 ram2 zlist) nil (car car) nil nil nil nil) ((zlist zlist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::missing-key (nil nil nil nil nil nil nil) ((nil :name key :type :int :skel) nil nil (skel) nil nil nil) ((nil) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::get-slot (nil nil nil nil (if) nil nil) (nil nil (consp missing-key) (let) nil nil nil) ((spec (slot (car spec)) key) nil nil nil (if) nil nil) (nil nil (slot-p missing-key) nil (if) nil nil) ((slot slot key) nil nil (equal recursive-call) nil nil nil) ((key key) nil (slot-name cdr) nil nil nil nil) ((slot spec) nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::update-slot-value (nil nil nil (let) nil nil nil) (((size (slot-size slot))) nil nil nil (update-slot) nil nil) ((slot :val) nil nil (acl2::loghead) nil nil nil) ((value) nil (gacc::fix-size) nil nil nil nil) ((size) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::update-slot-skel (nil nil nil nil (update-slot) nil nil) ((slot :skel skel) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::set-slot-skel (nil nil nil nil (if) nil nil) (nil nil (consp) (let cons) nil nil nil) ((skel (slot (car skel)) skel) nil (missing-key) nil (if) nil nil) ((key) nil (slot-p) (cons) (if) nil nil) ((slot skel) nil (missing-key) (equal cons cons) nil nil nil) ((key slot key) nil (slot-name cdr) (update-slot-skel) (recursive-call) nil nil) ((slot value slot skel key value) nil (cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::set-slot-value (nil nil nil nil (if) nil nil) (nil nil (consp) (let cons) nil nil nil) ((skel (slot (car skel)) skel) nil (missing-key) nil (if) nil nil) ((key) nil (slot-p) (cons) (if) nil nil) ((slot skel) nil (missing-key) (equal cons cons) nil nil nil) ((key slot key) nil (slot-name cdr) (update-slot-value) (recursive-call) nil nil) ((slot value slot skel key value) nil (cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::syntax-offset (nil nil nil nil (if) nil nil) (nil nil (`) nil (if) nil (and)) ((nil) nil (consp consp consp ((, woff) , (cadr wptr)) `) (equal equal equal) nil nil nil) ((wptr rptr wptr rptr) nil (car quote cdr cddr caddr ((, woff) quote 0)) ((, wbase)) nil nil nil) ((wptr binary-+ wptr wptr wptr , rptr) nil nil ((, wbase)) nil nil nil) ((, rptr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::bind-fn-template-args (nil nil nil nil (if) nil nil) (nil nil (consp) (mv) (if) nil nil) ((temp t nil) nil (consp) (mv) (if) nil nil) ((args nil nil) nil (consp) (met) (if) nil nil) (nil nil (car (hit alist)) (and met mv) (if) nil nil) ((temp nil nil hit) nil (consp (hit alist)) (equal recursive-call mv mv) (if) nil nil) ((hit hit nil nil) nil (car caar caar cdr cdr) (recursive-call met mv cons) nil nil nil)) (/coi/gacc/gacc3.lisp::find-fn-template-args-rec (nil nil nil (and) nil nil nil) (nil nil (consp) (or) nil nil nil) ((term) nil nil nil (and recursive-call) nil nil) ((fn args) nil (consp cdr) (and) (recursive-call) nil nil) ((fn args term) nil (car cdar) (equal met) nil nil nil) ((term fn term) nil (caar (hit alist)) (and) nil nil nil) ((term hit alist) nil nil (bind-fn-template-args) nil nil nil)) (/coi/gacc/gacc3.lisp::find-fn-template-args (nil nil nil nil (and) nil nil) (nil nil (consp consp) (or) nil nil nil) ((term fncall) nil nil (and) (find-fn-template-args-rec) nil nil) (nil nil (car cdr cdr) (equal met) nil nil nil) ((fncall fncall term) nil (car car (hit alist)) (and) nil nil nil) ((term fncall hit alist) nil nil (bind-fn-template-args) nil nil nil) (nil nil (cdr cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::template-keys (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((template) nil (consp) (append cons) nil nil nil) (nil nil (car recursive-call recursive-call car recursive-call) nil nil nil nil) ((template template) nil (cdar cdr cdr) nil nil nil nil) ((template template template) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::ptr! (nil nil nil nil (if) nil nil) (nil nil nil (whichtype) (update-op update-op) nil nil) ((:ptr op :which :ptr op :which :nil) nil (op-which) nil nil nil nil) ((op) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::val! (nil nil nil nil (if) nil nil) (nil nil nil (whichtype) (update-op update-op) nil nil) ((:val op :which :val op :which :nil) nil (op-which) nil nil nil nil) ((op) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::f*-vp (nil nil nil (append) nil nil nil) (nil nil nil nil (f*-spec f*-spec) nil nil) ((fptr spec fptr spec) nil (val! ptr!) nil nil nil nil) ((fop fop) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::concrete-pv (nil nil nil nil (and) nil nil) (nil nil (consp consp) nil (if) nil nil) ((which) nil (cdr not) (equal let) nil nil nil) ((which (which (cadr which))) nil (car quote) (equal) (or) nil nil) ((which quote) nil (car quote) (equal equal equal) nil nil nil) ((which which which which op-which) nil (quote quote quote) nil nil nil nil) ((:nil :ptr :val) nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::split-list (nil nil nil nil (if) nil nil) ((list) nil (consp) (let) nil nil nil) ((list (entry (car list))) nil nil nil (if) nil nil) (nil nil (consp) (cons cons) nil nil nil) ((entry entry) nil (car recursive-call) (append) nil nil nil) ((entry) nil (recursive-call recursive-call cdr) nil nil nil nil) ((list) nil (cdr cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::join-list (nil nil nil nil (if) nil nil) (nil nil nil (and let) (mv) nil nil) ((list flat) nil (consp consp not) ((entry (car list))) (if) nil nil) ((list flat) nil (line flat consp consp) (met met) nil nil nil) ((entry list) nil (car cdr (cdrline flat hit1) (list flat hit)) (met) (mv) nil nil) ((flat flat flat hit) nil ((list flat hit2)) (recursive-call recursive-call cons) (mv) nil nil) ((flat flat flat line list) nil (cdr cdr) (recursive-call cons and) nil nil nil)) (/coi/gacc/gacc3.lisp::f*-rec (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p recursive-call) (let) nil nil nil) ((slot) nil ((size (slot-size slot)) cdr) (cons) nil nil nil) ((spec) nil (off recursive-call) (sblk) nil nil nil) ((size off) nil (slot-off cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::s*-rec (nil nil nil nil (if) nil nil) ((ram) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let recursive-call) nil nil nil) ((slot ram) nil (cdr) ((off (slot-off slot)) let) nil nil nil) (((ram (wx size off value ram)) spec) nil (size value) (recursive-call) nil nil nil) ((ram) nil (slot-size slot-val cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::g*-rec (nil nil nil nil (if) nil nil) ((spec) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let cons) nil nil nil) ((slot slot) nil ((off (slot-off slot))) (cons recursive-call) nil nil nil) ((ram) nil (size cdr) (recursive-call) (update-slot) nil nil) ((slot :val ram spec) nil (slot-size cdr) nil (rx) nil nil)) (/coi/gacc/gacc3.lisp::spec->rec (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let) (recursive-call) nil nil) ((slot op ptr) nil ((w (op-which op)) cdr) (let) nil nil nil) ((spec) nil (h) (let) nil ((off (slot-off slot))) nil) (((read value)) nil (op-how size type skel value) (let) nil nil nil)) (/coi/gacc/gacc3.lisp::rec->spec (nil nil nil nil (if) nil nil) (nil nil (consp) (let) (mv) nil nil) ((spec (slot (car spec)) spec rec t) nil nil nil (if) nil nil) (nil nil (slot-p) (let met) nil nil nil) ((slot) nil ((w (op-which op)) (spec rec hit)) (let) (mv) nil nil) ((rec hit) nil (h) (cons) ((size (slot-size slot)) if recursive-call) nil nil) ((op rec slot spec) nil (op-how type skel value cdr) (and let) (mv) nil nil)) (/coi/gacc/gacc3.lisp::rec->spec-of-spec->rec-hyp (nil nil nil (equal) nil nil nil) (nil nil nil (h*-spec h*-spec) nil nil nil) ((template spec) nil (not-which not-which) nil nil nil nil) ((op op) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::h*-rec (nil nil nil nil (if) nil nil) ((rec) nil (consp) (let) nil nil nil) ((rec (slot (car rec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let cons) nil nil nil) ((slot slot) nil ((size (slot-size slot)) recursive-call) (let) nil nil nil) (((slot (update-slot slot :val (acl2::loghead (gacc::fix-size size) value)))) nil (value cdr) (cons) nil nil nil) ((slot rec) nil (slot-val recursive-call) nil nil nil nil)) (/coi/gacc/gacc3.lisp::spec-type (nil nil nil (equal) nil nil nil) ((type) nil nil (h*-spec) nil nil nil) ((spec) nil nil (op) nil nil nil) ((:nil :z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::fn-instance-rec (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((term arglist) nil nil (or let) nil nil nil) (((fn (car term))) nil nil nil (recursive-call recursive-call if) nil nil) ((nil fname t fname) nil (car cdr cdr) (equal) (recursive-call) nil nil) ((term term fn fname term t fname) nil (cdr) nil nil nil nil) ((term) nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::bind-keys (nil nil nil nil (if) nil nil) ((nil) nil nil (and cons) nil nil nil) (nil nil (consp consp) (cons recursive-call) nil nil nil) ((args term) nil (car car cdr cdr) nil nil nil nil) ((args term args term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::fn-instance-fn (nil nil nil (let) nil nil nil) (((term (fn-instance-rec arglist fname term))) nil nil (bind-keys) nil nil nil) ((args term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::fn-instance-wrapper (nil nil nil (let) nil nil nil) (((hit (fn-instance-fn fname args nil term))) nil nil (or) nil nil nil) ((hit) nil nil (and) nil nil nil) ((hyps) nil nil (let) nil nil nil) (((hyps (acl2::mfc-clause mfc))) nil nil nil nil (fn-instance-fn) nil) ((fname args t hyps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::split-blk-fix-slot (nil nil nil nil (if) nil nil) ((slot) nil (slot-p) (let) nil nil nil) ((slot (slot (fix-slot slot))) nil nil (let) nil nil nil) (nil nil ((type (slot-type slot))) nil (if) nil nil) ((slot) nil (skel ptr?) (let) nil nil nil) ((type (base (skel-base skel))) nil (slot-skel) (let) nil nil nil) ((slot (slot (update-slot slot :skel (skel base nil))) slot) nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::rd-spec (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil nil (rd-list recursive-call) nil nil nil) ((ram ram) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::wr-spec (nil nil nil nil (if) nil nil) ((ram) nil nil (and let) nil nil nil) (((ram (wr-list (car list) (enlistw (len (car list)) (car value)) ram))) nil (consp consp) nil (recursive-call) nil nil) ((list value ram) nil (cdr cdr) nil nil nil nil) ((list value) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::g*-rd (nil nil nil nil (if) nil nil) ((spec) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let cons) nil nil nil) ((slot (value (wintlist (car list))) slot) nil nil (cons recursive-call) nil nil nil) ((list) nil (cdr) (recursive-call) (update-slot) nil nil) ((:val value spec) nil (car cdr cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::v*-rec (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p recursive-call) (let) nil nil nil) ((slot) nil ((size (slot-size slot)) cdr) (cons) nil nil nil) ((spec) nil (value recursive-call) (acl2::loghead) nil nil nil) ((value) nil (slot-val gacc::fix-size cdr) nil nil nil nil)) (/coi/gacc/gacc3.lisp::list->rec (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((list (line (car list))) nil nil nil (if) nil nil) (nil nil (line-p) (let recursive-call) nil nil nil) ((line op) nil ((key (line-key line)) cdr) (let) nil nil nil) (((base (op-base (op-how op) :ptr (skel-base skel) key)) list) nil (skel) (append) nil nil nil) (nil nil (line-skel) (recursive-call) (spec->rec) nil nil)) (/coi/gacc/gacc3.lisp::rec->list (nil nil nil nil (if) nil nil) (nil nil (consp) (let) (mv) nil nil) ((list (line (car list)) list rec t) nil nil nil (if) nil nil) (nil nil (line-p) (let met) nil nil nil) ((line) nil ((key (line-key line)) (list rec hit)) (let) (mv) nil nil) (((base (op-base (op-how op) :ptr (skel-base skel) key)) rec hit) nil (skel) (met cons) (recursive-call) nil nil) ((op rec line list) nil (line-skel (spec rec hit) cdr) nil (if) nil nil)) (/coi/gacc/gacc3.lisp::rec->list-of-list->rec-hyp (nil nil nil (equal) nil nil nil) (nil nil nil (h*-list h*-list) nil nil nil) ((template list) nil (not-which not-which) nil nil nil nil) ((op op) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::flattenlistw (nil nil nil nil (if) nil nil) ((nil) nil nil (and append) nil nil nil) (nil nil (consp consp) (enlistw recursive-call) nil nil nil) ((addr vals) nil (len car cdr cdr) nil nil nil nil) ((vals addr vals) nil (car) nil nil nil nil) ((addr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::slot-p-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil (slot-p recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::sblkp-list (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (and) nil nil) ((list) nil (sblkp consp recursive-call) nil nil nil nil) (nil nil (car car cdr) nil nil nil nil) ((list list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::h*-rd (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((flat (value (wintlist (car list)))) nil nil nil (met) nil nil) (nil nil ((size base) declare) (cons) nil nil nil) (nil nil (ignore) (sblk-parms acl2::loghead recursive-call) nil nil nil) ((base value) (0) (car gacc::fix-size cdr cdr) nil nil nil nil) ((flat size flat list) nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::fixlistw (nil nil nil nil (if) nil nil) ((nil) nil (consp) (append) nil nil nil) ((list) nil nil (enlistw recursive-call) nil nil nil) (nil nil (len wintlist cdr cdr) nil nil nil nil) ((f list) nil (car car) nil nil nil nil) ((f list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::fix-memory (nil nil nil nil (s*-list) nil nil) ((nil) nil nil (op) (g*-list) nil nil) ((:val :x skels ram) nil nil (op) nil nil nil) ((:val :x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::fix-memory-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (wr) nil nil) ((a-list) nil (car) (rd recursive-call) nil nil nil) ((a-list ram ram) nil (car cdr) nil nil nil nil) ((a-list a-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc3.lisp::syntax-unfixed-int (nil nil nil (or) nil nil nil) (nil nil (not) (and) nil nil nil) (nil nil (consp not not) nil nil nil nil) ((n) nil nil (equal equal) nil nil nil) (nil nil (car quote car quote) nil nil nil nil) ((n quote n ifix) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))