((/rtl/rel7/support/support/add3-proofs.lisp::add3-measure (nil nil (acl2-count) nil nil nil nil) (nil nil nil nil (+) nil nil) ((x y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/add3-proofs.lisp::add3-induct (nil nil nil nil (if) nil nil) ((nil) nil nil nil (if) nil nil) ((nil) nil (integerp integerp integerp) (>= >= >=) (and recursive-call) nil nil) ((x x y y z z) (0 0 0) (fl fl fl) (= = =) nil nil nil) ((x y z) (0 0 0) nil (/ / /) nil nil nil) ((x y z) (2 2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/add3-proofs.lisp::add3-measure-neg (nil nil (acl2-count) nil nil nil nil) (nil nil nil nil (+) nil nil) (nil nil (abs abs abs) nil nil nil nil) ((x y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel7/support/support/add3-proofs.lisp::ADD3-INDUCT-allow-negatives (nil nil (DECLARE) nil nil nil nil) (nil nil nil nil nil (XARGS) nil) ((:hints (Goal :use recursion-by-add3-measure-neg) :MEASURE) nil nil nil (ADD3-MEASURE-neg) nil nil) ((X Y Z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))