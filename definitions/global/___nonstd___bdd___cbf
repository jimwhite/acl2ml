((/nonstd/bdd/cbf.lisp::trunc-lst (nil nil nil nil (cond) nil nil) (nil nil ((null lst) (eq sym (car lst)) t) nil nil nil nil) ((nil nil) nil nil (cons) nil nil nil) (nil nil (car) (recursive-call) nil nil nil) ((lst sym) nil (cdr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/cbf.lisp::make-be-bindings (nil nil nil (cond) nil nil nil) (nil nil ((null lst) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (recursive-call) (list) nil nil nil) (nil nil (car convert-be-expr cdddr) nil nil nil nil) ((lst lst) nil (caddr) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/nonstd/bdd/cbf.lisp::get-be-out-vars (nil nil nil (cond) nil nil nil) (nil nil ((null lst) t) nil nil nil nil) ((nil) nil nil (cons) nil nil nil) (nil nil (car recursive-call) nil nil nil nil) ((lst) nil (cdddr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/cbf.lisp::delete-ignored-bindings (nil nil nil nil (cond) nil nil) (nil nil ((null bindings) (member-eq (caar bindings) ignored-vars) t) nil nil nil nil) ((nil) nil nil (recursive-call cons) nil nil nil) ((ignored-vars) nil (cdr car) (recursive-call) nil nil nil) ((bindings bindings ignored-vars) nil (cdr) nil nil nil nil) ((bindings) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/cbf.lisp::parse-be (nil nil nil (let*) nil nil nil) (nil nil (`) nil nil ((invars (cadr (member-eq (quote @invar) lst)))) nil) (nil nil (subexprs outexprs bindings outputs) (lambda) nil nil nil) (nil nil (get-be-out-vars ,) (trunc-lst trunc-lst append let*) nil nil nil) ((outexprs invars) nil (quote cdr quote cdr make-be-bindings make-be-bindings , list) nil nil nil nil) ((@out @end subexprs outexprs) nil (,@) (member-eq member-eq delete-ignored-bindings) nil nil nil) ((lst lst bindings outputs) nil (quote quote) (set-difference-eq) nil nil nil)) (/nonstd/bdd/cbf.lisp::set-equal-varsp (nil nil nil nil nil nil (and)) (nil nil (symbol-listp no-duplicatesp symbol-listp) (subsetp-eq subsetp-eq) nil nil nil) ((lst1 lst1 lst2 lst1 lst2 lst2 lst1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/bdd/cbf.lisp::parse-be-file (nil nil nil (er-let*) nil nil nil) (((lst (rf filename))) nil nil (let*) nil nil nil) (nil nil nil nil nil nil (cond)) (nil nil (be2 input-vars1 bindings1 output-vars1 input-vars2 bindings2 output-vars2 (not (set-equal-varsp input-vars1 input-vars2)) (not (no-duplicatesp (strip-cars bindings1))) (not (no-duplicatesp (strip-cars bindings2))) (not (set-equal-varsp output-vars1 output-vars2)) t) nil nil nil nil) (nil nil (parse-be cadr cadr cdr cadr cadr cdr value) nil nil (er er) (er er)) ((be1 be2 soft The input vars of BE1 are ~&0 and those of ~
                         BE2 are ~&1.  But these are supposed to be ~
                         set-equal lists of distinct variable names. input-vars1 input-vars2 soft The bindings of BE1 contain one or more ~
                         duplications, namely, of ~&0. soft The bindings of BE2 contain one or more ~
                         duplications, namely, of ~&0. soft The output vars of BE1 are ~&0 and those of ~
                         BE2 are ~&1.  But these are supposed to be ~
                         set-equal lists of distinct variable names. output-vars1 output-vars2) nil (caddr caddr caddr caddr quote quote duplicates quote duplicates quote) (member-eq) nil (list) nil) ((lst be1 be2 recursive-call recursive-call recursive-call recursive-call input-vars1 bindings1 output-vars1 bindings2) nil (quote caddr caddr strip-cars strip-cars) nil nil nil nil)) (/nonstd/bdd/cbf.lisp::cbf (nil nil nil (er-let*) nil nil nil) (((x (parse-be-file (concatenate (quote string) be-directory filename) state))) nil nil (let) nil nil nil) (nil nil (value) nil ((input-vars (nth 0 x))) nil nil) (nil nil (bindings1 output-vars1 bindings2 `) nil nil nil nil) (nil nil nil (nth nth nth) nil nil nil) ((x x x :hints (Goal :bdd (:vars ((,@ input-vars)))) :rule-classes nil) (1 2 3) (,) (implies) nil nil nil) (nil nil (boolean-listp) (intern equal) nil nil nil)))