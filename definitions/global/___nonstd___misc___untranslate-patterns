((/nonstd/misc/untranslate-patterns.lisp::untranslate-patterns-functions-btree (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-eq) nil nil nil) (nil nil (quote) (table-alist) nil nil nil) ((functions-database wrld) nil (quote) nil nil nil nil) ((untranslate-patterns-table) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/untranslate-patterns.lisp::untranslate-patterns-constants-alist (nil nil (cdr) nil nil nil nil) (nil nil nil (assoc-eq) nil nil nil) (nil nil (quote) (table-alist) nil nil nil) ((constants-database wrld) nil (quote) nil nil nil nil) ((untranslate-patterns-table) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/untranslate-patterns.lisp::jared-substitute (nil nil nil nil (if) nil nil) ((term) nil (endp) (let*) nil nil nil) ((sublist) nil nil ((old (car (car sublist))) recursive-call) nil nil nil) ((result) nil (new result cdr) nil nil nil nil) ((sublist) nil (cdr) nil (subst) nil nil) ((new old term) nil (car) nil nil nil nil) ((sublist) nil nil nil nil nil nil)) (/nonstd/misc/untranslate-patterns.lisp::jared-rewrite-aux (nil nil nil nil (if) nil nil) ((term) nil (endp) (let*) nil nil nil) ((subs) nil ((first-sub (car subs))) (recursive-call) nil nil nil) ((newterm) nil (newterm cdr) nil nil nil nil) ((subs) nil nil nil (jared-rewrite1) nil nil) ((term) nil (car cdr) nil nil nil nil) ((first-sub first-sub) nil nil nil nil nil nil)) (/nonstd/misc/untranslate-patterns.lisp::jared-rewrite (nil nil nil (let) nil nil nil) (((rw-pass (jared-rewrite-aux term subs))) nil nil nil (if) nil nil) ((term) nil nil (equal recursive-call) nil nil nil) ((rw-pass term rw-pass subs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/untranslate-patterns.lisp::untranslate-pattern-preprocessor (nil nil nil nil (cond) nil nil) (nil nil ((or (variablep term) (flambda-applicationp term)) (fquotep term) t) nil nil nil nil) ((term) nil nil (let* let*) nil nil nil) (nil nil ((patterns (untranslate-patterns-constants-alist world)) (patterns (untranslate-patterns-functions-btree world))) nil (if if) nil nil) ((replacement term subs term) nil (replacement cdr subs) (jared-rewrite) nil nil nil) ((replacement term subs) nil nil (assoc-equal symbol-btree-lookup) nil nil nil) ((patterns patterns) nil (cadr ffn-symb) nil nil nil nil)) (/nonstd/misc/untranslate-patterns.lisp::even/odd-p (nil nil nil nil (if) nil nil) (nil nil nil (eq) (if if) nil nil) ((flg t nil) nil (quote zp zp) (recursive-call recursive-call) nil nil nil) ((even x x) nil (quote 1- quote 1-) nil nil nil nil) ((odd x even x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/untranslate-patterns.lisp::foo$ (nil nil nil (cons) nil nil nil) ((n $path) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))