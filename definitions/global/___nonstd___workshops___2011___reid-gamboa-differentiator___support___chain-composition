((/nonstd/workshops/2011/reid-gamboa-differentiator/support/chain-composition.lisp::chain-composition-apply-fn (nil nil nil (let*) nil nil nil) (nil nil (`) nil ((fog-expr (subst g-expr (quote x) f-expr))) nil nil) (nil nil (fog-prime-expr fog-domain-p-expr instantiation-fns) ((encapsulate nil (local (in-theory (quote ((,@ (deriv-symbols f-symbol)) (,@ (deriv-symbols g-symbol)))))) (,@ (use-deriv fog-symbol (quote chain-fog) fog-expr fog-prime-expr fog-domain-p-expr instantiation-fns)))) nil nil nil) (nil nil (` ` ` , ,) nil nil nil nil) ((fog-prime-expr fog-domain-p-expr) nil nil (* and) nil nil nil) (nil nil (, , , , chain-f-domain-p chain-f-prime chain-g chain-g-domain-p chain-g-prime chain-fog chain-fog-domain-p chain-fog-prime) nil nil nil nil) ((g-derivative g-domain) nil nil (lambda lambda lambda lambda lambda lambda lambda lambda) (subst subst) nil nil)))