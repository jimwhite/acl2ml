((/coi/super-ihs/meta.lisp::strip-logheads-from-sum (nil nil nil nil (if) nil nil) ((term) nil (not) nil nil (case) nil) (nil nil (consp car binary-+ unary-- otherwise) nil nil nil nil) ((term term) nil (` `) (strip-loghead-from-term) nil nil nil) ((n term) nil (unary--) (binary-+) nil nil nil) (nil nil (, , ,) nil nil nil nil) (nil nil nil (recursive-call recursive-call strip-loghead-from-term) nil nil nil)) (/coi/super-ihs/meta.lisp::strip-logheads-from-sum-aux (nil nil nil nil (if) nil nil) ((term) nil (`) (and) nil nil nil) (nil nil (consp) (equal loghead$inline) nil nil nil) ((term) nil (car quote , ,) nil nil nil nil) ((term loghead$inline) nil (cadr) (strip-logheads-from-sum) nil nil nil) ((term) nil (cadr caddr) nil nil nil nil) ((term term) nil nil nil nil nil nil)) (/coi/super-ihs/meta.lisp::hyp-for-addend (nil nil nil nil (if) nil nil) (nil nil (` `) (call-to-loghead-with-n-or-greater-size) nil nil nil) ((n term) nil (integerp integerp) nil nil nil nil) (nil nil (, ,) nil nil nil nil) ((term) nil (caddr) nil nil nil nil) ((term) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/super-ihs/meta.lisp::hyp-for-addends (nil nil nil nil (if) nil nil) (nil nil (not `) nil nil (case) nil) (nil nil (consp integerp car binary-+ unary-- otherwise) nil nil nil nil) ((term term) nil (,) (make-conjunction hyp-for-addend hyp-for-addend) nil nil nil) ((term n n term) nil (cadr) (recursive-call recursive-call) nil nil nil) ((n n term) nil (cadr caddr) nil nil nil nil) ((term term) nil nil nil nil nil nil)) (/coi/super-ihs/meta.lisp::hyp-for-strip-logheads-from-sum-aux (nil nil nil nil (if) nil nil) ((nil) nil nil (and hyp-for-addends) nil nil nil) (nil nil (consp cadr caddr) (equal) nil nil nil) ((term term term) nil (car quote) nil nil nil nil) ((term loghead$inline) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))