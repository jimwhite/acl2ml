((/quadratic-reciprocity/euler.lisp::find-root (nil nil nil nil (if) nil nil) ((nil) nil (zp) nil (if) nil nil) ((n n) nil nil (=) (recursive-call) nil nil) ((m p) nil (1-) (mod mod) nil nil nil) ((p m p n) nil nil (*) nil nil nil) ((n n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/euler.lisp::root1 (nil nil nil nil (find-root) nil nil) ((m p) nil (1-) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/euler.lisp::root2 (nil nil nil (-) nil nil nil) ((p) nil nil (root1) nil nil nil) ((m p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/euler.lisp::associates (nil nil nil nil (if) nil nil) (nil nil (zp) nil (if if) nil nil) ((n nil) nil nil (residue cons member cons) (recursive-call) nil nil) ((m p n m p) nil (1-) (root2 cons cons) (recursive-call associate) nil nil) ((m p nil m p n n m p n) nil (1-) (root1) (recursive-call) nil nil) ((m p n m p) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil)) (/quadratic-reciprocity/euler.lisp::ldpu-induction (nil nil nil nil (if) nil nil) ((t) nil (zp) nil (if) nil nil) ((n) nil nil (member recursive-call recursive-call) nil nil nil) ((n l l) nil (1- 1-) (remove1) nil nil nil) ((n l n n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))