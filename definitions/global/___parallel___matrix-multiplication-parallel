((/parallel/matrix-multiplication-parallel.lisp::get-midpoints (nil nil nil (let*) nil nil nil) (nil nil nil (cons) ((difference (- right left))) nil nil) ((first-val second-val) nil (difference-div-2 first-val second-val) nil nil nil nil) (nil nil (1+) (/ floor) nil nil nil) ((difference first-val) (2 1) nil (+) nil nil nil) ((left difference-div-2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/matrix-multiplication-parallel.lisp::pmultiply-matrices-aux (nil nil nil nil (if) nil nil) (nil nil (list) (equal let*) nil nil nil) ((c-lhs-row c-rhs-row) nil nil (multiply-matrices-row (row-midpoints (get-midpoints c-lhs-row c-rhs-row))) (plet) nil nil) ((B) nil (row-left-midpoint row-right-midpoint declare (top-updates-list (pmultiply-matrices-aux a b n c-lhs-row row-left-midpoint c-lhs-col c-rhs-col))) (nth append) nil nil nil) ((c-lhs-row A top-updates-list bottom-updates-list) nil (the-fixnum the-fixnum granularity bottom-updates-list) nil nil nil nil) (nil nil (car cdr) (>) nil nil nil) ((row-midpoints row-midpoints a b n row-right-midpoint c-rhs-row c-lhs-col c-rhs-col) (16000) nil (*) nil nil nil)) (/parallel/matrix-multiplication-parallel.lisp::pmultiply-matrices (nil nil nil (let*) nil nil nil) ((updates) nil ((n a-cols)) nil nil nil nil) (nil nil (updates) nil nil nil nil) (nil nil nil nil nil nil nil) ((a b) (0 0) (1- 1- 1-) nil nil nil nil) ((n a-rows b-cols) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))