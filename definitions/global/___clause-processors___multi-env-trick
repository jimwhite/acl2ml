((/clause-processors/multi-env-trick.lisp::clause-apply-alists-multi-env-ev (nil nil nil (or) nil nil nil) (nil nil (atom) (and) nil nil nil) ((alists) nil nil (multi-env-ev recursive-call) nil nil nil) ((clause) nil (disjoin car cdr) nil nil nil nil) ((clause alists alists) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/multi-env-trick.lisp::clauses-apply-alists-multi-env-ev (nil nil nil (or) nil nil nil) (nil nil (atom) (and) nil nil nil) ((clauses) nil nil (clause-apply-alists-multi-env-ev recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((clauses alist-lists clauses alist-lists) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/multi-env-trick.lisp::multi-env-functional-instance-fn (nil nil nil (let*) nil nil nil) (nil nil (`) ((bad-guy (or bad-guy (incat ev (symbol-name ev) -BAD-GUY)))) nil nil nil) (nil nil (clause-apply clauses-apply :use) nil nil nil nil) (((:instance (:functional-instance (, thm) (multi-env-ev (, ev)) (multi-env-ev-lst (, evlst)) (multi-env-ev-bad-guy (, bad-guy)) (clause-apply-alists-multi-env-ev (, clause-apply)) (clauses-apply-alists-multi-env-ev (, clauses-apply))) (x (, x)) (alists (, alists)))) nil nil nil (incat incat) nil nil) ((ev CLAUSE-APPLY-ALISTS- ev CLAUSES-APPLY-ALISTS-) nil (symbol-name symbol-name) nil nil nil nil) ((ev ev) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/multi-env-trick.lisp::def-multi-env-fn (nil nil nil (let) nil nil nil) (nil nil (`) nil nil nil nil) (nil nil (bad-guy-rewrite theoremp clause-apply clauses-apply clause-apply-thm clauses-apply-thm constraint-0) nil nil nil nil) (nil nil nil (add-untranslate-pattern) (incat incat incat incat incat incat defmacro defun defun) (genvar defchoose defthm defthmd defthmd) nil) ((ev -BAD-GUY-REWRITE ev -THEOREMP ev CLAUSE-APPLY-ALISTS- ev CLAUSES-APPLY-ALISTS- ev -THEOREMP-IMPLIES-CLAUSE-APPLY-ALISTS ev -THEOREMP-IMPLIES-CLAUSES-APPLY-ALISTS ev nil a x :hints (goal :use (, bad-guy)) x :hints :hints (multi-env-functional-instance multi-env-ev-theoremp-implies-clauses-apply-alists clause alists :ev (, ev) :evlst (, evlst))) (0) (symbol-name symbol-name symbol-name symbol-name symbol-name symbol-name symbol-name , not , , ` (, theoremp) , clause , clauses , (multi-env-functional-instance multi-env-ev-theoremp-implies-clause-apply-alists clause alists :ev (, ev) :evlst (, evlst)) ,) (implies (, ev) or or implies implies) nil nil nil) ((ev ev ev ev ev ev bad-guy bad-guy-rewrite theoremp clause-apply alists clauses-apply alist-lists clause-apply-thm clauses-apply-thm) (120 120) ((, bad-guy) atom atom (, theoremp) (, theoremp)) (pack2 (, ev) (, ev) (, ev) (, (quote (, ev))) and and (, clause-apply) and (, clauses-apply)) nil nil nil) ((ev x a x x a alists clauses clause alists stable-under-simplificationp clause alists) (120) (quote (, bad-guy) , (, (quote (, bad-guy))) disjoin quote conjoin-clauses) ((, ev) (, clause-apply) (, clause-apply) (, clauses-apply)) nil nil nil)) (/clause-processors/multi-env-trick.lisp::prove-multi-env-clause-proc-fn (nil nil nil (let*) nil nil nil) (nil nil (`) nil nil nil nil) (nil nil (clauses-apply-thm cp-args clausename multivaluesp cp-call1 cp-call) (progn) nil nil nil) (nil nil (car `) (< def-multi-env-fns) (incat if) (fgetprop) nil) ((ev -THEOREMP-IMPLIES-CLAUSES-APPLY-ALISTS clauseproc nil world cp-args multivaluesp cp-call1 :hints :otf-flg t :rule-classes :clause-processor) (1) (symbol-name quote len ` , , ,) ((, clauseproc) implies (Goal :use ((:instance (, clauses-apply-thm) (clause (, cp-call)) (alists (, alists)))))) nil nil nil) ((ev formals , cp-args ev evlst name , hints) nil (clauses-result) ((, ev)) (and) (fgetprop) nil) ((clauseproc nil world) nil (quote , pseudo-term-listp alistp disjoin ,) ((, ev)) nil nil nil)) (/clause-processors/multi-env-trick.lisp::consp-cp-term (nil nil nil nil nil nil nil) ((term) nil (((quote if) & y z) (((quote lambda) & body) . &) ((quote cons) & &) ((quote quote) x) &) nil nil nil nil) ((nil) nil (recursive-call list) (append) (if) nil nil) ((body nil) nil (recursive-call recursive-call consp list list) nil nil nil nil) ((y z x nil) nil (`) nil nil nil nil) (nil nil (consp) nil nil nil nil) (nil nil (,) nil nil nil nil)) (/clause-processors/multi-env-trick.lisp::consp-cp-term-alists (nil nil nil nil nil nil nil) ((term) nil (((quote if) & y z) (((quote lambda) vars body) . args) ((quote cons) & &) ((quote quote) x) &) nil nil nil nil) ((nil) nil (list) (append recursive-call) (if) nil nil) ((body nil) nil (consp list list) (recursive-call recursive-call pairlis$) nil nil nil) ((y al z al vars x al) nil (list) (cons-ev-lst) nil nil nil) ((args al al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/multi-env-trick.lisp::consp-cp (nil nil nil (let) nil nil nil) (((term (car (last clause)))) nil nil nil (case-match) nil nil) ((term) nil (((quote consp) x) &) nil nil nil nil) (nil nil (consp-cp-term list) nil nil nil nil) ((x clause) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/multi-env-trick.lisp::consp-cp-alists (nil nil nil (let) nil nil nil) (((term (car (last clause)))) nil nil nil (case-match) nil nil) ((term) nil (((quote consp) x) &) nil nil nil nil) (nil nil (list) (consp-cp-term-alists) nil nil nil) ((x al) nil (list) nil nil nil nil) ((al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))