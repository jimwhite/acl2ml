((/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::rcdp (nil nil nil (or) nil nil nil) (nil nil (null) nil nil nil (and)) ((x) nil (consp consp recursive-call not) (or) nil nil nil) ((x) nil (car cdr null) (equal <<) nil nil nil) ((x x default-get-valu) nil (cdar cdr caar caadr) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::ifrp (nil nil nil (or) nil nil nil) (nil nil (not) nil nil nil (and)) (nil nil (rcdp consp null consp recursive-call) (equal) nil nil nil) ((x x ifrp-tag) nil (cdr car cdar caar) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::acl2->rcd (nil nil nil nil (if) nil nil) ((x) nil (ifrp list) nil nil nil nil) ((x) nil nil (cons) nil nil nil) ((x ifrp-tag) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::rcd->acl2 (nil nil nil nil (if) nil nil) ((r) nil (ifrp caar) nil nil nil nil) ((r r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::ag-aux (nil nil nil nil (cond) nil nil) (nil nil ((or (endp r) (<< a (caar r))) (equal a (caar r)) t) nil nil nil nil) ((default-get-valu) nil (cdar) (recursive-call) nil nil nil) ((r a) nil (cdr) nil nil nil nil) ((r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::ag (nil nil nil (ag-aux) nil nil nil) ((a) nil (acl2->rcd) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::acons-if (nil nil nil nil (if) nil nil) ((r) nil nil (equal) (acons) nil nil) ((v default-get-valu a v r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::as-aux (nil nil nil nil (cond) nil nil) (nil nil ((or (endp r) (<< a (caar r))) (equal a (caar r)) t) nil nil nil nil) (nil nil nil (cons) (acons-if acons-if) nil nil) ((a v r a v) nil (cdr car) nil (recursive-call) nil nil) ((r r a v) nil (cdr) nil nil nil nil) ((r) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::as (nil nil (rcd->acl2) nil nil nil nil) (nil nil nil nil (as-aux) nil nil) ((a v) nil (acl2->rcd) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::bv-arrp (nil nil nil (or) nil nil nil) (nil nil (null) nil nil nil nil) ((x) nil (consp consp not) (recursive-call bvecp or) nil nil nil) ((x k k) nil (car cdr cdar null) (equal <<) nil nil nil) ((x x default-get-valu x) nil (cdar cdr caar caadr) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::mk-bvarr (nil nil nil nil (if) nil nil) ((r nil) nil nil (bv-arrp) nil nil nil) ((r k) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/support/lib2.delta1/rtlarr-new.lisp::positive-integer-listp (nil nil nil (cond) nil nil nil) (nil nil ((atom l) t) nil nil nil nil) (nil nil nil (equal) (and) nil nil) ((l nil) nil (integerp recursive-call) (<) nil nil nil) (nil (0) (car car cdr) nil nil nil nil) ((l l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))