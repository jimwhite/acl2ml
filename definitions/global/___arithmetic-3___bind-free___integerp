(nil (/arithmetic-3/bind-free/integerp.lisp::reduce-integerp-+-fn-1 (nil nil nil nil nil (cond) nil) (nil nil ((and (not (equal (fargn x 1) (quote (quote 0)))) (proveably-integer (fargn x 1) mfc state)) (eq (fn-symb (fargn x 2)) (quote BINARY-+)) (and (not (equal (fargn x 2) (quote (quote 0)))) (proveably-integer (fargn x 2) mfc state)) t) nil nil nil nil) ((nil) nil (list list) nil (recursive-call) nil nil) ((mfc state) nil nil (cons fargn cons) nil nil nil) ((x) (2) (quote quote) (fargn fargn) nil nil nil) ((z x z x) (1 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/integerp.lisp::reduce-integerp-+-fn (nil nil nil nil (if) nil nil) ((nil) nil nil (eq) (reduce-integerp-+-fn-1) nil nil) ((x mfc state) nil (fn-symb quote) nil nil nil nil) ((x BINARY-+) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/arithmetic-3/bind-free/integerp.lisp::find-integerp-hyp-1 (nil nil nil nil (cond) nil nil) (nil nil ((endp type-alist) (let ((typed-term (caar type-alist)) (type (cadar type-alist))) (and (eq (fn-symb typed-term) (quote BINARY-*)) (quotep (fargn typed-term 1)) (equal (fargn typed-term 2) x) (ts-subsetp type *ts-integer*) (integerp (/ (unquote c) (unquote (fargn typed-term 1)))))) t) nil nil nil nil) ((nil) nil nil (list) (recursive-call) nil nil) ((c x) nil (cdr) (cons cons) nil nil nil) ((type-alist) nil (quote quote kwote) (fargn) nil nil nil) ((d a) (1) (caar) (/) nil nil nil) ((type-alist) nil (unquote unquote) nil nil nil nil)) (/arithmetic-3/bind-free/integerp.lisp::find-integerp-hyp (nil nil nil nil (find-integerp-hyp-1) nil nil) ((c x) nil (mfc-type-alist) nil nil nil nil) ((mfc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))