((/nonstd/misc/goodstein.lisp::pfix (nil nil nil nil (if) nil nil) ((x) (1) nil (and) nil nil nil) (nil nil (integerp) (>) nil nil nil) ((x x) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/goodstein.lisp::ilog-loop (nil nil nil (let) nil nil nil) (nil nil ((nbr (pfix nbr))) nil (if) nil nil) ((L) nil (L) (>=) (if) nil nil) ((L nbr L) nil (nfix) (>) nil (recursive-call) nil) ((L pow nbr nbr base) nil nil (* +) nil nil nil) ((base pow L) (1) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/goodstein.lisp::ilog (nil nil nil nil nil (ilog-loop) nil) ((nbr base base) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/goodstein.lisp::Scalep (nil nil nil nil (if) nil nil) (nil nil (consp) nil (and) (and) nil) ((x) nil (not integerp) (recursive-call recursive-call or >= <) nil nil nil) ((n n x x x n) (0) (car cdr atom not) (equal) nil nil nil) ((x x) (0) (car cdr) (e0-ord-<) nil nil nil) ((x x) nil (car cadr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/nonstd/misc/goodstein.lisp::nbr-to-scale (nil nil nil nil (if) nil nil) ((nbr) nil nil (< let) nil nil nil) ((nbr base (ilog (ilog nbr base))) nil nil (cons) nil nil nil) (nil nil nil (recursive-call recursive-call) nil nil nil) ((ilog base base) nil nil (-) nil nil nil) ((nbr) nil nil (expt) nil nil nil) ((base ilog) nil nil nil nil nil nil)) (/nonstd/misc/goodstein.lisp::e0-ordinalp-to-nbr (nil nil nil nil (if) nil nil) ((ord) nil (consp) (+) nil nil nil) ((ord) nil nil (expt recursive-call) nil nil nil) ((base base) nil (cdr) (recursive-call) nil nil nil) ((base ord) nil (car) nil nil nil nil) ((ord) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/goodstein.lisp::goodstein (nil nil nil (let*) nil nil nil) (nil nil ((gn (nbr-to-scale x b))) nil (if) nil nil) (nil nil (y zp list) (cons) nil nil nil) ((x) nil nil (e0-ordinalp-to-nbr list list recursive-call) nil nil nil) ((gn x b x b) nil nil (+ - +) nil nil nil) ((b y b) (1 1 1) nil nil nil nil nil) (nil nil nil nil nil nil nil)))