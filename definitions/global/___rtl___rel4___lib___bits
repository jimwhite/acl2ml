((/rtl/rel4/lib/bits.lisp::bitvec (nil nil nil nil (if) nil nil) ((x) (0) nil (bvecp) nil nil nil) ((x n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/lib/bits.lisp::sumbits (nil nil nil nil (if) nil nil) (nil (0) (zp) (+) nil nil nil) ((n) nil nil (* recursive-call) nil nil nil) ((x) nil (1-) (expt bitn) nil nil nil) ((x n) (2) (1- 1-) nil nil nil nil) ((n n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/lib/bits.lisp::formal-+ (nil nil nil nil (if) nil nil) (nil nil nil (and +) (list) nil nil) ((x y x y) nil (acl2-numberp acl2-numberp quote) nil nil nil nil) ((x y +) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/lib/bits.lisp::cat-size (nil nil nil nil (if) nil nil) (nil nil (endp cadr) (formal-+) nil nil nil) ((x) nil (cddr cadr recursive-call) nil nil nil nil) ((x x) nil (cddr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/lib/bits.lisp::setbits (nil nil nil nil nil (mbe) nil) ((:logic :exec) nil nil nil (cond) (cat) nil) (nil nil (1+ (int= j 0) (int= (1+ i) w) t) nil (bits +) (cat) nil) ((x w j i) (-1) (1- 1+ -) (cond) (bits + bits) (cat cat) nil) ((w i i y i x j) (0 1 0) (- 1- (int= (1+ i) w) t 1+) (+) (bits + bits bits +) (cat) nil) ((i j j y i x x w j i) (0 1 0 -1) (- - 1- 1- 1+ -) (+) (bits bits + bits) (cat) nil) ((j y i j j w i i y i x) (0 0 1 0) (1+ - - 1-) (+ +) (bits + bits) nil nil)) (/rtl/rel4/lib/bits.lisp::logop-2-induct (nil nil nil nil (if) nil nil) ((nil) nil nil (or recursive-call) nil nil nil) (nil nil (zp zp fl fl) nil nil nil nil) ((x y) nil nil (/ /) nil nil nil) ((x y) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/lib/bits.lisp::logop-2-n-induct (nil nil nil nil (if) nil nil) (nil nil (zp) (cons) (recursive-call) nil nil) ((n x y) nil (fl fl 1-) nil nil nil nil) ((n) nil nil (/ /) nil nil nil) ((x y) (2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel4/lib/bits.lisp::logop-3-induct (nil nil nil nil (if) nil nil) ((t) nil nil nil (and if) nil nil) ((t) nil (natp natp natp) nil (and recursive-call) nil nil) ((x y z) nil (zp zp zp fl fl fl) nil nil nil nil) ((x y z) nil nil (/ / /) nil nil nil) ((x y z) (2 2 2) nil nil nil nil nil) (nil nil nil nil nil nil nil)))