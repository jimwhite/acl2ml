((/ordinals/e0-ordinal.lisp::e0-ord-< (nil nil nil nil (if) nil nil) (nil nil (consp) nil (if if) nil nil) ((x nil t) nil (consp consp) (<) (if) nil nil) ((y t y) nil nil (recursive-call) (if if if) nil nil) ((nil x y) (0 0) (car car real/rationalp real/rationalp) (equal recursive-call) nil nil nil) ((x y x y) nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil)) (/ordinals/e0-ordinal.lisp::e0-ordinalp (nil nil nil nil (if) nil nil) (nil nil (consp) (and) nil (and) nil) ((x) nil (recursive-call not recursive-call integerp) (or >=) nil nil nil) ((x x) (0) (car cdr atom not) (equal) nil nil nil) ((x x) (0) (car cdr) (e0-ord-<) nil nil nil) ((x x) nil (car cadr) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (/ordinals/e0-ordinal.lisp::copyn (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n a) nil nil (recursive-call) nil nil nil) ((a) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/ordinals/e0-ordinal.lisp::ctoa (nil nil nil nil (if) nil nil) ((x) nil (o-finp) (append) nil nil nil) ((x) nil (recursive-call) (copyn) nil nil nil) (nil nil (recursive-call o-first-coeff o-rst) nil nil nil nil) ((x x) nil (o-first-expt) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/ordinals/e0-ordinal.lisp::atoc (nil nil nil nil (if) nil nil) ((a) nil (atom) (o+) nil nil nil) ((a) nil (recursive-call) (omega-term) nil nil nil) (nil (1) (recursive-call cdr) nil nil nil nil) ((a) nil (car) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))