((/quadratic-reciprocity/fermat.lisp::perm (nil nil nil nil (if) nil nil) (nil nil (consp not) nil (if) nil nil) ((a nil) nil (consp) (member recursive-call) nil nil nil) ((b b) nil (car cdr) (remove1) nil nil nil) ((a a b) nil (car) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/fermat.lisp::positives (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n n) nil (recursive-call) nil nil nil nil) (nil nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/fermat.lisp::mod-prods (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((n) nil nil (mod) (recursive-call) nil nil) ((p m p) nil (1-) (*) nil nil nil) ((m n n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/fermat.lisp::distinct-positives (nil nil nil nil (if) nil nil) ((t) nil (consp) nil nil nil (and)) ((l) nil (not not not) (<= recursive-call) nil nil nil) ((n n) nil (zp zp car cdr) (member) nil nil nil) ((n l l) nil (car car cdr) nil nil nil nil) ((l l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/fermat.lisp::pigeonhole-induction (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((l) nil (recursive-call recursive-call) (member) nil nil nil) ((l) nil (len cdr) (remove1) nil nil nil) ((l l l) nil (len) nil nil nil nil) ((l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/quadratic-reciprocity/fermat.lisp::times-list (nil nil nil nil (if) nil nil) (nil (1) (consp) (*) nil nil nil) ((l) nil (ifix recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))