((/nonstd/nsa/trig.lisp::nat-even-p (nil nil nil nil (if) nil nil) ((t) nil (zp not) nil nil nil nil) ((n) nil (recursive-call) nil nil nil nil) (nil nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig.lisp::taylorish-sin-list (nil nil nil nil (if) nil nil) ((nil) nil nil nil (or if) nil nil) (nil nil (zp not nat-even-p) (< cons cons) nil nil nil) ((nterms counter counter) (0 0) (integerp) nil (*) (recursive-call recursive-call) nil) ((counter sign x sign x) nil (1- 1+ / 1- 1+ -) (expt) nil nil nil) ((nterms counter x counter nterms counter sign) nil (factorial) nil nil nil nil) ((counter) nil nil nil nil nil nil)) (/nonstd/nsa/trig.lisp::taylorish-cos-list (nil nil nil nil (if) nil nil) ((nil) nil nil nil (or if) nil nil) (nil nil (zp not nat-even-p) (< cons cons) nil nil nil) ((nterms counter counter) (0 0) (integerp) nil (*) (recursive-call recursive-call) nil) ((counter sign sign x x) nil (/ 1- 1+ 1- 1+ -) (expt) nil nil nil) ((x counter nterms counter nterms counter sign) nil (factorial) nil nil nil nil) ((counter) nil nil nil nil nil nil)) (/nonstd/nsa/trig.lisp::sign-of (nil nil nil nil (if) nil nil) (nil (1) (zp) nil (if) nil nil) ((counter) nil (nat-even-p - recursive-call) nil nil nil nil) ((counter) nil (recursive-call 1-) nil nil nil nil) ((counter) nil (1-) nil nil nil nil) ((counter) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/nsa/trig.lisp::taylor-sincos-list (nil nil nil nil (if) nil nil) ((nil) nil nil (cons) (or) nil nil) (nil nil (zp not) (<) (*) (recursive-call) nil) ((nterms counter sign x) (0) (integerp / nfix -) (expt +) nil nil nil) ((counter x counter counter sign) (2) (factorial) (-) nil nil nil) ((counter nterms) (2) nil nil nil nil nil) (nil nil nil nil nil nil nil)))