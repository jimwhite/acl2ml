((/clause-processors/replace-impl.lisp::replace-impl ((nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/replace-impl.lisp::replace-impl-fn (nil nil nil nil (if) nil nil) (nil nil (atom) (mv let) nil nil nil) ((clause t clause (lit (car clause))) nil nil nil (if) nil nil) ((sense) nil nil nil (if if) nil nil) (nil nil nil (equal mv mv) (mv-let mv-let) (and) nil) ((lit hyp nil nil) nil (samep consp consp samep) (cons eq equal cons) (if if) (recursive-call recursive-call) nil) ((rest hyp sense repl samep lit hyp rest hyp sense repl samep) nil (cdr cdr car quote cdr cadr cdr cdr) (list mv mv list mv mv) nil nil nil)) (/clause-processors/replace-impl.lisp::replace-impl-cp (nil nil nil nil (if) nil nil) (nil nil (list) (eql let) nil nil nil) ((clause) (2) (len (hyp (car term))) nil (mv-let) nil nil) ((term) nil (repl samep) nil (if if) nil nil) ((cl samep) nil (cadr list) (list) (and) (replace-impl-fn replace-impl-fn) nil) ((term t repl clause hyp nil repl clause clause cl) nil (consp consp cadr) (eq list) nil nil nil) ((hyp hyp repl) nil (car quote cdr `) nil nil nil nil)) (/clause-processors/replace-impl.lisp::find-instance-fn (nil nil nil nil (if) nil nil) (nil nil (atom) nil (mv if) nil nil) ((cl nil nil nil sense) nil nil nil (mv-let if) nil nil) (nil nil (okp) (one-way-unify and) (if mv-let recursive-call) nil nil) ((al x okp x sense) nil (car consp okp cdr) (eq one-way-unify) (mv recursive-call if) nil nil) ((cl okp al x sense al x okp cl) nil (cdr car car quote cadr) (list) (mv recursive-call) nil nil) ((cl cl not okp al x sense) nil (quote car car car cadr cdr) nil nil nil nil)) (/clause-processors/replace-impl.lisp::find-instance (nil nil nil nil (mv-let) nil nil) (nil nil nil (ok) (if mv) nil nil) ((hyp alst ok hyp) nil nil (and and) (find-instance-fn find-instance-fn) nil nil) ((t cl hyp-pat nil cl ok) nil (consp cadr) (eq term-sublis) nil nil nil) ((hyp-pat hyp-pat alst concl-pat) nil (car quote) nil nil nil nil) ((hyp-pat not) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/replace-impl.lisp::replace-impl (nil nil nil (er-let*) nil nil nil) (nil nil ((hyp-pat (translate hyp-pat t t t (quote replace-impl) (w state) state))) nil (mv-let) nil nil) (nil nil (concl-pat value) (ok) (find-instance) nil nil) ((hyp concl hyp-pat concl-pat cl) nil nil (and) nil nil nil) ((concl-pat t t t state ok) nil (quote w `) nil nil nil nil) ((recursive-call state) nil (:clause-processor) nil nil nil nil) (nil nil nil (replace-impl-cp) nil nil nil)))