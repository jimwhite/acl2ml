((/coi/util/rule-sets-support.lisp::wf-rule-list (nil nil (true-listp) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::wf-set-ref (nil nil nil (or) nil nil nil) (nil nil (eqlablep) nil (and) nil nil) ((ref) nil (consp eqlablep eqlablep) nil nil nil nil) ((ref) nil (car cdr) nil nil nil nil) ((ref ref) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::wf-set-ref-list (nil nil nil nil (if) nil nil) (nil nil (consp null) (and) nil nil nil) ((list list) nil (wf-set-ref recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::weak-version-entry (nil nil nil (and) nil nil nil) (nil nil (true-listp) (equal) nil nil nil) ((entry) (5) (len) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::versi0n (nil nil (car) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::include-rules (nil nil (cadr) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::omit-rules (nil nil (caddr) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::include-sets (nil nil (cadddr) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::omit-sets (nil nil (car) nil nil nil nil) (nil nil (cddddr) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::wf-version-entry (nil nil nil nil nil nil nil) (nil nil (weak-version-entry eqlablep wf-rule-list wf-rule-list wf-set-ref-list wf-set-ref-list) nil nil nil nil) ((entry) nil (versi0n include-rules omit-rules include-sets omit-sets) nil nil nil nil) ((entry entry entry entry entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::version-entry (nil nil nil nil nil nil (list)) ((versi0n include-rules omit-rules include-sets omit-sets) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::wf-version-list (nil nil nil nil (if) nil nil) (nil nil (consp null) (and) nil nil nil) ((list list) nil (wf-version-entry recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::contains-version-entry (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((list) nil nil (equal recursive-call) nil nil nil) ((set set) nil (versi0n cdr) nil nil nil nil) ((list) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::get-version-entry (nil nil nil nil (if) nil nil) (nil nil (consp) (new-version-entry) (if) nil nil) ((list :version set) nil (car) (equal recursive-call) nil nil nil) ((set list set) nil (versi0n cdr) nil nil nil nil) ((list) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::set-version-entry (nil nil nil nil (if) nil nil) (nil nil (consp list) nil (if) nil nil) ((list entry) nil nil (equal cons cons) nil nil nil) ((set entry) nil (versi0n cdr car) nil (recursive-call) nil nil) ((list list set entry) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::weak-rule-set-entry (nil nil nil (and) nil nil nil) (nil nil (true-listp) (equal) nil nil nil) ((entry) (3) (len) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::set-name (nil nil (car) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::default-set-version (nil nil (cadr) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::version-list (nil nil (caddr) nil nil nil nil) ((entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::wf-rule-set-entry (nil nil nil nil nil (and) nil) (nil nil (weak-rule-set-entry eqlablep eqlablep wf-version-list) nil nil nil nil) ((entry) nil (set-name default-set-version version-list) nil nil nil nil) ((entry entry entry) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::rule-set-entry (nil nil nil nil (list) nil nil) ((set-name default-set-version version-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::wf-rule-set-list (nil nil nil nil (if) nil nil) (nil nil (consp null) (and) nil nil nil) ((list list) nil (wf-rule-set-entry recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::contains-rule-set-entry (nil nil nil nil (if) nil nil) ((nil) nil (consp) (or) nil nil nil) ((list) nil nil (equal recursive-call) nil nil nil) ((set set) nil (set-name cdr) nil nil nil nil) ((list) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::get-rule-set-entry (nil nil nil nil (if) nil nil) (nil nil (consp) (new-rule-set-entry) (if) nil nil) ((list :set-name set) nil (car) (equal recursive-call) nil nil nil) ((set list set) nil (set-name cdr) nil nil nil nil) ((list) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::set-rule-set-entry (nil nil nil nil (if) nil nil) (nil nil (consp list) nil (if) nil nil) ((list entry) nil nil (equal cons cons) nil nil nil) ((set entry) nil (set-name cdr car) nil (recursive-call) nil nil) ((list list set entry) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::weak-rule-set (nil nil nil (and) nil nil nil) (nil nil (true-listp) (equal) nil nil nil) ((set) (3) (len) nil nil nil nil) ((set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::default-library (nil nil (car) nil nil nil nil) ((rule-set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::default-version (nil nil (cadr) nil nil nil nil) ((rule-set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::rule-set-list (nil nil (caddr) nil nil nil nil) ((rule-set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::wf-rule-set (nil nil nil nil nil (and) nil) (nil nil (weak-rule-set eqlablep eqlablep wf-rule-set-list) nil nil nil nil) ((set) nil (default-library default-version rule-set-list) nil nil nil nil) ((set set set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::rule-set (nil nil nil nil (list) nil nil) ((default-library default-version rule-set-list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::ref-exists (nil nil nil (let*) nil nil nil) (nil nil nil (and) nil nil nil) ((rule-set-exits version-exists) nil (key rule-set-exits rule-set-entry version-list version version-exists) nil nil nil nil) (nil nil (version-list) (contains-rule-set-entry get-rule-set-entry contains-version-entry) (if if) nil nil) ((ref key rule-set-list key rule-set-list rule-set-entry nil version version-list) nil (consp car consp cdr) nil nil nil nil) ((ref ref ref ref) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::ref-set-exists (nil nil nil nil (if) nil nil) ((t) nil (consp) (let) nil nil nil) ((list (ref (car list))) nil nil (and) nil nil nil) (nil nil nil (ref-exists recursive-call) nil nil nil) ((ref rule-set rule-set) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::add-rules-to-ref-in-rule-set (nil nil nil (let*) nil nil nil) (nil nil nil nil (update-rule-set) nil nil) ((rule-set :rule-set-list rule-set-list) nil (ref rule-set-list key rule-set-entry version-list version version-entry version-entry version-list rule-set-entry rule-set-list) nil nil nil nil) (nil nil (rule-set-list version-list) (get-rule-set-entry get-version-entry) (if if set-version-entry update-rule-set-entry set-rule-set-entry) (assert) (update-version-entry)) ((ref Undefined rule-set reference rule-set ref key rule-set-list rule-set-entry version version-list version-entry :include-rules :omit-rules version version-entry version-list rule-set-entry :version-list version-list key rule-set-entry rule-set-list) nil (quote consp car consp cdr default-set-version) (ref-exists append append) nil nil nil) ((ref rule-set recursive-call ref ref ref ref rule-set-entry include-rules omit-rules) nil (include-rules omit-rules) nil nil nil nil) ((version-entry version-entry) nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::add-rules-to-include-set (nil nil nil nil (if) nil nil) ((rule-set) nil (consp) (let) nil nil nil) ((include (ref (car include))) nil nil (let) nil nil nil) (((rule-set (add-rules-to-ref-in-rule-set ref rules nil rule-set))) nil nil nil (recursive-call) nil nil) ((rules rule-set) nil (cdr) nil nil nil nil) ((include) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::add-rules-to-omit-set (nil nil nil nil (if) nil nil) ((rule-set) nil (consp) (let) nil nil nil) ((omit (ref (car omit))) nil nil (let) nil nil nil) (((rule-set (add-rules-to-ref-in-rule-set ref nil rules rule-set))) nil nil nil (recursive-call) nil nil) ((rules rule-set) nil (cdr) nil nil nil nil) ((omit) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::add-sets-to-ref-in-rule-set (nil nil nil (let*) nil nil nil) (nil nil nil nil (update-rule-set) nil nil) ((rule-set :rule-set-list rule-set-list) nil (key rule-set-entry version-list version version-entry version-entry version-list rule-set-entry rule-set-list) nil nil nil nil) (nil nil (version-list) (get-rule-set-entry get-version-entry) (if if set-version-entry update-rule-set-entry set-rule-set-entry) nil (update-version-entry)) ((ref key rule-set-list rule-set-entry version version-list version-entry :include-sets :omit-sets version version-entry version-list rule-set-entry :version-list version-list key rule-set-entry rule-set-list) nil (consp car consp cdr default-set-version) (append append) nil nil nil) ((ref ref ref ref rule-set-entry include-sets omit-sets) nil (include-sets omit-sets) nil nil nil nil) ((version-entry version-entry) nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::set-ref-default-version-in-rule-set (nil nil nil (let*) nil nil nil) (nil nil nil nil (update-rule-set) ((rule-set-list (rule-set-list rule-set))) nil) ((rule-set :rule-set-list rule-set-list) nil (key rule-set-entry rule-set-entry rule-set-list) nil nil nil nil) (nil nil nil (get-rule-set-entry) (if update-rule-set-entry set-rule-set-entry) nil nil) ((ref key rule-set-list rule-set-entry :default-set-version version key rule-set-entry rule-set-list) nil (consp car) nil nil nil nil) ((ref ref) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::get-ref-default-version-in-rule-set (nil nil nil (let*) nil nil nil) (nil nil (default-set-version) ((rule-set-list (rule-set-list rule-set))) nil nil nil) ((rule-set-entry) nil (key rule-set-entry) nil nil nil nil) (nil nil nil (get-rule-set-entry) (if) nil nil) ((ref key rule-set-list) nil (consp car) nil nil nil nil) ((ref ref) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::set-default-library (nil nil nil (let*) nil nil nil) (nil nil ((key (if (consp ref) (car ref) ref))) (let) nil nil nil) (((rule-set (assert rule-set (ref-exists (cons key version) rule-set) (quote set-default-library) Undefined rule-set reference))) nil (version) nil nil nil (update-rule-set)) ((rule-set :default-library key :default-version version) nil nil nil (if) nil nil) ((nil) nil (consp cdr) nil nil nil nil) ((ref ref) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::default-ref (nil nil nil nil (if) nil nil) (nil nil (default-version default-library) (cons) nil nil nil) ((rule-set rule-set) nil (default-library default-version) nil nil nil nil) ((rule-set rule-set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::define-new-set (nil nil nil (let*) nil nil nil) (nil nil nil nil (update-rule-set) nil nil) ((rule-set :rule-set-list rule-set-list) nil (rule-set rule-set-list key version rule-set-entry default-set-version rule-set-entry version-list version-entry include-sets omit-sets version-entry version-entry version-list rule-set-entry rule-set-list) nil nil nil nil) (nil nil (rule-set-list version-list include-sets omit-sets) (get-rule-set-entry get-version-entry) (if if if update-rule-set-entry set-version-entry update-rule-set-entry set-rule-set-entry) (assert assert) (update-version-entry)) ((rule-set All extended/omitted rule sets must already exist rule-set ref nil key rule-set-list version rule-set-entry :default-set-version default-set-version rule-set-entry version version-list version-entry version-entry version-entry Fundamental redefinition of rule-classes is prohibited version-entry :include-sets extends :omit-sets omits version version-entry version-list rule-set-entry :version-list version-list key rule-set-entry rule-set-list) nil (quote consp car consp cdr default-set-version quote) (and contains-rule-set-entry or) nil nil nil) ((recursive-call ref ref ref ref key rule-set-list rule-set-entry recursive-call) nil (not) (ref-set-exists ref-set-exists and) nil nil nil) ((extends rule-set omits rule-set) nil nil (contains-version-entry equal equal) nil nil nil)) (/coi/util/rule-sets-support.lisp::classify-rules (nil nil nil (let) nil nil nil) (nil nil ((default-library (default-library rule-set))) (let) nil nil nil) (((include (if (or default-library default-version) (cons (cons default-library default-version) include) include))) nil (default-version) (let) nil nil nil) (((rule-set (add-rules-to-include-set rules include rule-set))) nil (default-version) nil (add-rules-to-omit-set) nil nil) ((rule-set rules exclude rule-set) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::query-ref (nil nil nil (let*) nil nil nil) (nil nil nil ((rule-set-list (rule-set-list rule-set))) (if) nil nil) ((rule-set-entry) nil (key rule-set-entry consp) (let*) nil nil nil) ((ref) nil ((version (cdr ref))) (get-rule-set-entry get-version-entry) (if) nil nil) ((ref key rule-set-list version version-list) nil (consp car version-list) nil nil nil nil) ((ref ref) nil (version-list) nil nil nil nil) ((rule-set-entry) nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::alt-e/d-to-ed-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) (append) nil nil nil) ((list) nil nil nil (if recursive-call) nil nil) ((e rule-set) nil (list not cdr) nil (ref-list-to-de) nil nil) ((rule-set nil e list) nil (car list) nil nil nil nil) ((list) nil nil nil (ref-list-to-disable) nil nil) ((rule-set nil) nil (car) nil nil nil nil)) (/coi/util/rule-sets-support.lisp::d/e-list (nil nil nil nil (if) nil nil) (nil nil (consp) (let) (if) nil nil) ((list) nil ((disable (caar list)) current-theory) (equal acl2::RUNIC-THEORY) nil (acl2::union-theories-fn) nil) ((enable t world theory :here :here theory WORLD) nil (enable) nil nil (acl2::set-difference-theories-fn) nil) ((disable t world) nil (cdar) nil (recursive-call) nil nil) ((list theory world) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/coi/util/rule-sets-support.lisp::update-library-version (nil nil nil (let) nil nil nil) (((hit (assoc new list))) nil nil nil (if) nil nil) (nil nil (consp) (cons) (if) nil nil) ((hit list list) nil (error) (equal cons) nil nil nil) ((old Cannot Redefine new old) nil (cdr) nil nil nil nil) ((hit) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))