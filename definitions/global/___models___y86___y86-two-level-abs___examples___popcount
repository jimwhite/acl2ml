((/models/y86/y86-two-level-abs/examples/popcount.lisp::gl-int (nil nil nil nil (if) nil nil) ((nil) nil (zp) (cons) nil nil nil) ((count start) nil nil nil (recursive-call) nil nil) ((by) nil (1-) (+) nil nil nil) ((by start count) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::fast-logcount-64 (nil nil nil (let) nil nil nil) (nil nil ((word0 (logand x *2^32-1*))) (+) nil nil nil) (nil nil (word1 fast-logcount-32 fast-logcount-32) nil nil nil nil) ((word0 word1) nil nil (ash) nil nil nil) ((x) (-32) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::fast-logcount-128 (nil nil nil (let) nil nil nil) (nil nil ((word0 (logand x *2^64-1*))) (+) nil nil nil) (nil nil (word1 fast-logcount-64 fast-logcount-64) nil nil nil nil) ((word0 word1) nil (logand) nil nil nil nil) (nil nil nil (ash) nil nil nil) ((x) (-64) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::fast-logcount-256 (nil nil nil (let) nil nil nil) (nil nil ((word0 (logand x *2^128-1*))) (+) nil nil nil) (nil nil (word1 fast-logcount-128 fast-logcount-128) nil nil nil nil) ((word0 word1) nil (logand) nil nil nil nil) (nil nil nil (ash) nil nil nil) ((x) (-128) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::logcount-by-256-bits (nil nil nil nil (if) nil nil) (nil (0) (zp) (+) nil nil nil) ((x) nil (fast-logcount-256 recursive-call) nil nil nil nil) (nil nil nil (logand ash) nil nil nil) ((x *2^256-1* x) (-256) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::fast-logcount (nil nil nil nil (cond) nil nil) (nil nil ((zip x) (< x 0) t) nil nil nil nil) (nil (0) (logcount-by-256-bits logcount-by-256-bits) nil nil nil nil) ((x) nil (lognot) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::poised-at-popcount-n (nil nil nil (let) nil nil nil) (((esp (rgfi *mr-esp* x86-32))) nil nil nil (and) nil nil) (nil nil (n32p) (equal <=) nil nil nil) ((n) nil (cdr) (+ rm32 -) nil nil nil) ((esp esp x86-32 esp) (3 20) nil (assoc-eq) nil nil nil) ((*popcount-symbol-table*) nil (quote) nil nil nil nil) ((end-of-code) nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::mem-segment-p (nil nil nil (cond) nil nil nil) (nil nil ((atom alist) t) nil nil nil nil) ((t) nil nil nil nil (and) nil) (nil nil (consp n32p) (equal recursive-call) nil nil nil) ((x86-32) nil (car caar cdar cdr) (rm08) nil nil nil) ((alist alist x86-32 alist alist) nil (caar) nil nil nil nil) ((alist) nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::poised-at-popcount-base (nil nil nil (and) nil nil nil) (nil nil nil (mem-segment-p equal) nil nil nil) ((*popcount-binary* x86-32 eip) nil (eip) nil nil nil nil) ((x86-32) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::poised-at-popcount (nil nil nil (and) nil nil nil) (nil nil nil (poised-at-popcount-base poised-at-popcount-n) nil nil nil) ((eip x86-32 n x86-32) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/models/y86/y86-two-level-abs/examples/popcount.lisp::reduce-popcount (nil nil nil (let) nil nil nil) (((esp (rgfi *mr-esp* x86-32))) nil nil nil (popcount-init-x86-32) nil nil) ((esp) nil (cdr) (rm32) nil nil nil) ((esp x86-32) nil nil (assoc-eq) nil nil nil) ((*popcount-symbol-table*) nil (quote) nil nil nil nil) ((call-popcount) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))