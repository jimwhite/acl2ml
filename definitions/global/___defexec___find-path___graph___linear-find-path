((/defexec/find-path/graph/linear-find-path.lisp::markedp (nil nil nil (member) nil nil nil) ((node mt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/linear-find-path.lisp::mark (nil nil nil (cons) nil nil nil) ((node mt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/linear-find-path.lisp::linear-find-next-step (nil nil nil nil nil (cond) nil) (nil nil ((endp c) (markedp (car c) mt) (equal (car c) b) t) nil nil nil nil) (nil nil nil (mv mv) (mv-let) nil (recursive-call)) ((mt stack b g mt mt) nil (quote cdr rev temp) (cond) nil nil (recursive-call)) ((failure c new-mt b g) nil ((e0-ord-< (measure (cdr c) new-mt g) (measure c mt g)) t) (cons neighbors cons mark) nil nil nil) ((b stack g stack mt) nil (car car car) (mv) (if) nil nil) ((c c c) nil (quote quote) (eq mv) nil nil (recursive-call))) (/defexec/find-path/graph/linear-find-path.lisp::linear-find-path (nil nil nil (cond) nil nil nil) (nil nil ((equal a b) t) nil nil nil nil) (nil nil (list) nil nil (mv-let) nil) ((a temp) nil (temp declare) nil nil nil (linear-find-next-step)) ((mt b g) nil (list ignore) (neighbors mark) nil nil nil) ((a g a a nil mt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/linear-find-path.lisp::find-next-step-avoiding (nil nil nil nil nil nil (cond)) (nil nil ((endp c) (member (car c) stack) (member (car c) mt) (equal (car c) b) t) nil nil nil nil) (nil nil (quote rev) (let) nil nil (recursive-call recursive-call)) ((failure stack b g mt stack b g mt (temp (find-next-step-avoiding (neighbors (car c) g) (cons (car c) stack) b g mt))) nil (cdr cdr) (cons) (if) nil nil) ((c c b stack temp) nil nil (eq) nil nil (recursive-call)) ((temp stack b g mt) nil (quote cdr) nil nil nil nil) ((failure c) nil nil nil nil nil nil)) (/defexec/find-path/graph/linear-find-path.lisp::find-path-avoiding (nil nil nil (cond) nil nil nil) (nil nil ((equal a b) t) nil nil nil nil) (nil nil nil nil (if) nil (find-next-step-avoiding)) ((b g mt) nil (quote list list) (member neighbors) nil nil nil) ((a mt failure a a g a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/defexec/find-path/graph/linear-find-path.lisp::pathlessp (nil nil nil nil (cond) nil nil) (nil nil ((endp new-mt) (or (member (car new-mt) stack) (member (car new-mt) mt) (and (not (equal (car new-mt) b)) (equal (find-next-step-avoiding (neighbors (car new-mt) g) (cons (car new-mt) stack) b g mt) (quote failure)))) t) nil nil nil nil) ((t nil) nil nil nil nil nil (recursive-call)) ((stack b g mt) nil (cdr) nil nil nil nil) ((new-mt) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))