((/centaur/gl/gify.lisp::clique-bodies (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((clique) nil nil (norm-function-body recursive-call) nil nil nil) ((world world) nil (car cdr) nil nil nil nil) ((clique clique) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::collect-fn-deps-with-exclusions (nil nil nil nil (mv-let) nil nil) (nil nil (done) (prog2$) nil (collect-fns-list) nil) ((acc fns done-fal nil world) nil (flush-hons-get-hash-table-link reverse) nil nil nil nil) ((done acc) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::collect-fn-deps (nil nil nil nil (mv-let) nil nil) (nil nil (done) (prog2$) nil (collect-fns-list) nil) ((acc fns nil world) nil (flush-hons-get-hash-table-link reverse) (make-fal) nil nil nil) ((nil done acc) nil nil (append) nil nil nil) (nil nil (quote) (table-alist) nil nil nil) (((acl2::return-last) world) nil (quote) nil nil nil nil) ((gl-function-info) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gify-body (nil nil nil (let) nil nil nil) (((body (cond ((acl2::throw-nonexec-error-p x nil nil) (car (last x))) (t x)))) nil nil (gify-term) nil nil nil) ((body fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-guards (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (gobjectp cdr) nil nil nil nil) ((formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-hyps (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (gobjectp cdr) nil nil nil nil) ((formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::eval-thm-bindings (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((vars) nil (not) (cons recursive-call) nil nil nil) ((ev) nil (cdr) (or list recursive-call) nil nil nil) ((ev vars) nil (car ` cdr) (eq eq) nil nil nil) ((vars vars) nil (car quote car quote) ((, ev)) nil nil nil) ((vars hyp vars clk env) nil (,) nil nil nil nil)) (/centaur/gl/gify.lisp::formals-general-concretep (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (general-concretep cdr) nil nil nil nil) ((formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::formals-general-concrete-obj (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((formals) nil (` recursive-call) nil nil nil nil) (nil nil (general-concrete-obj cdr) nil nil nil nil) ((formals) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((formals) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gify-factored-fns (nil nil nil nil (if) nil nil) (nil nil (endp) (b*) nil (er) nil) ((fns hard Empty list of functions; top: ~x0~% top-fn) nil (quote) nil (if) nil nil) ((recursive-call endp) nil (endp body gbody formals recursivep guards name defun) (cons) nil nil (recursive-call)) ((defun defuns top-fn world) nil (endp ` gl-fnsym ` cdr 1+) (gify-body wgetprop wgetprop cons) (body) nil nil) ((nil world body fn top-fn fns idx defun defuns) nil (cdr car car quote quote) nil (and if) (defun) nil) ((fns fns fns formals recursivep endp top-fn fn) nil (,@ bfr-p natp , ,) (declare) (let) nil nil)) (/centaur/gl/gify.lisp::gify-fn-clique (nil nil nil nil (if) nil nil) ((defuns) nil (atom) nil (recursive-call) nil nil) ((clique world) nil (cdr) nil nil nil (gify-factored-fns)) ((clique world defuns) (1) (car) (or) nil nil nil) ((clique) nil (factored-fns list) nil nil nil nil) (nil nil (car car) nil nil nil nil) ((clique clique) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gify-fn (nil nil nil (let*) nil nil nil) (nil nil nil ((recp (wgetprop fn (quote recursivep)))) (if) nil nil) (nil nil (clique defuns ` `) (and) nil nil nil) ((recp) nil nil (or <= mutual-recursion progn) (gify-fn-clique) nil nil) ((recp clique world nil , defuns ,) (2) (list length reverse) nil nil nil nil) ((fn defuns defuns) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gify-stub (nil nil nil (let*) nil nil nil) (nil nil (`) ((formals (wgetprop fn (quote formals)))) nil nil nil) (nil nil (name nonexec) nil nil (defun) nil) (nil nil (gl-fnsym , declare) ((,@ formals) let) (or) nil nil) ((fn name hyp clk) nil (,) (wgetprop wgetprop assoc-eq (hyp (bfrfix hyp))) nil (xargs) nil) ((fn fn fn :guard :verify-guards nil ,) nil (quote quote mbe-gobj-fix-formals-list) (table-alist) (and if) nil nil) ((constrainedp non-executablep world formals nonexec) nil (quote ,@ bfr-p natp ` `) nil nil nil nil)) (/centaur/gl/gify.lisp::gify-fns-and-deps1 (nil nil nil nil (if) nil nil) ((nil) nil (endp) nil (if) nil nil) ((deps) nil (`) (and prog2$) nil nil nil) (nil nil (not) (norm-function-body cw cons) ((,@ (and (not (member (car deps) *no-factor-fns*)) (` ((factor-fn (, (car deps)))))))) nil nil) ((world , Warning: GIFYing undefined function ~x0~%) nil (car make-event car `) (member recursive-call recursive-call) nil nil nil) ((deps world deps world) nil (car quote cdr make-event cdr) (gify-fn) nil nil nil) ((deps acl2::return-last deps deps) nil (quote w) (gify-stub) nil nil nil)) (/centaur/gl/gify.lisp::gify-fns-and-deps (nil nil nil (let) nil nil nil) (((deps (collect-fn-deps fns world))) nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) ((,) nil nil (gify-fns-and-deps1) nil nil nil) ((deps world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-thmname (nil nil nil nil (incat) nil nil) ((GOBJECTP-) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-factored-thm-bodies-rec (nil nil nil nil (if) nil nil) (nil nil (endp) (prog2$ b*) nil nil nil) ((fns acl2::break$) nil nil nil (if) (er (fn (car fns))) nil) ((hard Empty list of functions; top: ~x0~% top-fn endp) nil (quote formals endp name gobjectp-thm) (cons) nil (recursive-call) nil) ((recursive-call gobjectp-thm entries top-fn world) nil (endp gl-fnsym ` cdr) (wgetprop cons) nil nil nil) ((fn fns gobjectp-thm entries) nil (quote cdr) nil (if (, name)) nil nil) ((formals fns endp top-fn fn :name) nil (gobjectp ,) nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-clique-thm-bodies (nil nil nil nil (if) nil nil) ((entries) nil (endp) (b*) nil nil nil) ((clique) nil nil ((fn (car clique))) (recursive-call) nil nil) ((world entries) nil (fns entries cdr) nil nil nil nil) ((clique) nil (factored-fns) nil nil (gobjectp-factored-thm-bodies-rec) nil) ((fn fn fns world entries) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-redundant-top-thms (nil nil nil nil (if) nil nil) ((nil) nil (endp) (b*) nil nil nil) ((clique) nil nil (cons) ((fn (car clique))) nil nil) (nil nil (name thmname formals `) (recursive-call) nil nil nil) ((world) nil (gl-fnsym gobjectp-thmname cdr) (wgetprop defthm) nil nil nil) ((fn name fn clique) nil (quote , gobjectp) nil nil nil nil) ((formals thmname) nil nil nil ((, name)) nil nil)) (/centaur/gl/gify.lisp::gobjectp-factored-thms (nil nil nil nil (if) nil nil) (nil nil (endp) (b*) nil (er) nil) ((fns hard Empty list of functions; top: ~x0~% top-fn) nil (quote) nil (if) nil nil) ((recursive-call endp) nil (formals endp name gobjectp-name defname gobjectp-thm gobjectp-thm) (cons) nil (recursive-call) nil) ((gobjectp-thm thms top-fn world) nil (endp gl-fnsym gobjectp-thmname defname ` cdr) (wgetprop cons) (if) nil nil) ((fn name name endp gobjectp-thm fns gobjectp-thm thms) nil (quote cdr `) nil (if) (defthm) nil) ((formals fns endp top-fn fn :hints (goal :expand ((:with (:definition (, defname)) ((, name) (,@ formals) hyp clk))) :do-not (quote (preprocess)))) nil (, gobjectp local) nil nil nil nil)) (/centaur/gl/gify.lisp::g-factored-fn-names (nil nil nil nil (if) nil nil) (nil nil (endp) nil (if) (er) nil) ((fns hard Empty list of functions; top: ~x0~% top-fn) nil (quote endp) (cons) (recursive-call) nil nil) ((recursive-call acc top-fn) nil (cdr gl-fnsym cdr) (cons) nil nil nil) ((fns top-fn fns acc) nil (gl-fnsym) nil nil nil nil) (nil nil (car) nil nil nil nil) ((fns) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::g-clique-fn-names (nil nil nil (wgetprop) nil nil nil) (nil nil (car quote) nil nil nil nil) ((clique recursivep) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::clique-fn-names (nil nil nil nil (if) nil nil) ((nil) nil (endp) (append) nil nil nil) ((clique) nil (factored-fns) (recursive-call) nil nil nil) ((world) nil (car cdr) nil nil nil nil) ((clique clique) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-flag-lemma (nil nil nil nil nil (incat) nil) ((GOBJECTP- -LEMMA) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-thmnames (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((fns) nil (gobjectp-thmname recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((fns fns) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::make-expand-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((terms (defname (defname (caar terms)))) nil nil (cons) nil nil nil) (nil nil (`) (recursive-call) nil nil nil) ((world) nil (cdr) (:with) nil nil nil) ((terms) nil (:definition ,) nil nil nil nil) (nil nil (, car) nil nil nil nil)) (/centaur/gl/gify.lisp::expand-calls-computed-hint (nil nil nil (let) nil nil nil) (((expand-list (flag::find-calls-of-fns-term (car (last clause)) fns nil))) nil (`) nil nil nil nil) (nil nil (:expand) nil nil nil nil) (nil nil (,) nil nil nil nil) (nil nil nil (make-expand-list) nil nil nil) ((expand-list world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gl-fnsym-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((lst) nil (gl-fnsym recursive-call) nil nil nil nil) (nil nil (car Cdr) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::make-redundant-list (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((names) nil (` recursive-call) nil nil nil nil) (nil nil (acl2::make-redundant cdr) nil nil nil nil) ((names) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((names) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-thms (nil nil nil (b*) nil nil nil) (((recp (wgetprop top-fn (quote recursivep)))) nil nil nil (if) nil nil) ((recp) nil nil (b* b*) nil nil nil) (nil nil (` (fns (or (factored-fns top-fn) (list top-fn))) `) nil nil nil nil) (nil nil (gfn1 gfns gfn flag-fn flag-formals thmnames thms) nil nil (progn) (progn)) (nil nil (gl-fnsym car gobjectp-thmnames local local ,@ local local ,@ local) (wgetprop flag-fn-name wgetprop add-to-ruleset add-to-ruleset) nil (gobjectp-factored-thms) nil) ((gfn1 gfns gfn world flag-fn gfns g-gobjectp-lemmas top-fn fns world nil g-gobjectp-lemmas) nil (car quote quote in-theory quote in-theory reverse quote) (gobjectp-redundant-top-thms add-to-ruleset add-to-ruleset) nil ((, (flag-defthm-macro gfn world))) nil)) (/centaur/gl/gify.lisp::flag-fn (nil nil nil nil (incat) nil nil) ((-IND) nil (quote symbol-name) nil nil nil nil) ((gl-flag::foo top-fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::flagify-g-fns-and-deps1 (nil nil nil nil (if) nil nil) ((nil) nil (endp) (let*) nil nil nil) ((deps rest) nil nil nil ((gfn (gl-fnsym (car deps)))) nil nil) (nil nil (gfn-recp rest rest) nil nil nil nil) (nil nil nil (wgetprop recursive-call) (if) nil nil) ((gfn world rest) nil (quote cdr) (and let) nil nil nil) ((recursivep deps (gfn (car gfn-recp))) nil (not) (<= cons) nil nil nil)) (/centaur/gl/gify.lisp::flagify-g-fns-and-deps (nil nil nil (let) nil nil nil) (((deps (collect-fn-deps fns world))) nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) ((,) nil nil (flagify-g-fns-and-deps1) nil nil nil) ((deps world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::flagify-fns-and-deps1 (nil nil nil nil (if) nil nil) ((nil) nil (endp) (let*) nil nil nil) ((deps rest) nil nil ((fn-recp (wgetprop (car deps) (quote recursivep)))) nil nil nil) (nil nil (rest rest) nil nil nil nil) (nil nil nil (recursive-call) (if) nil nil) ((world rest) nil (cdr) (and let) nil nil nil) ((deps (fn (car fn-recp))) nil (not) (<= cons) nil nil nil)) (/centaur/gl/gify.lisp::flagify-fns-and-deps (nil nil nil (let) nil nil nil) (((deps (collect-fn-deps fns world))) nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) ((,) nil nil (flagify-fns-and-deps1) nil nil nil) ((deps world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-fns-and-deps1 (nil nil nil nil (if) nil nil) ((nil) nil (endp `) nil nil nil nil) ((deps) nil nil ((make-event (gobjectp-thms (quote (, (car deps))) (w state)))) nil nil nil) ((,) nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil) ((deps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::gobjectp-fns-and-deps (nil nil nil (let) nil nil nil) (((deps (collect-fn-deps fns world))) nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) ((,) nil (gobjectp-fns-and-deps1) nil nil nil nil) ((deps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::g-factored-fns-verify-guards (nil nil nil nil (if) nil nil) (nil nil (endp) nil (if) (er) nil) ((fns hard Empty list of functions; top: ~x0~% top-fn) nil (quote endp `) (let) nil nil nil) ((recursive-call (stobjs-out (wgetprop top-fn (quote stobjs-out)))) nil (cdr `) ((verify-guards (, (gl-fnsym (car fns))))) nil nil nil) ((fns (verify-guards (, (gl-fnsym top-fn)) (,@ (and stobjs-out (<= 2 (length stobjs-out)) (acl2::runep (` (:type-prescription (, top-fn))) world) (` (:hints ((Goal :in-theory (enable (:type-prescription (, top-fn)))))))))) ,) nil nil nil (recursive-call) nil nil) ((top-fn world) nil (cdr) nil nil nil nil) ((fns) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::type-prescriptions-of-mv-fns (nil nil nil nil (if) nil nil) ((nil) nil (atom) (let) nil nil nil) ((clique (stobjs-out (wgetprop (car clique) (quote stobjs-out)))) nil nil nil (if) nil nil) (nil nil nil (cons recursive-call) (and) nil nil) ((stobjs-out world) nil (` cdr) (<= acl2::runep recursive-call) nil nil nil) ((world world clique) (2) (length ` :type-prescription cdr) nil nil nil nil) ((stobjs-out clique) nil (:type-prescription ,) nil nil nil nil)) (/centaur/gl/gify.lisp::g-guards-fns-and-deps1 (nil nil nil nil (if) nil nil) ((nil) nil (endp) (let*) nil nil nil) ((deps) nil ((gfn (gl-fnsym (car deps)))) nil (if) nil nil) ((recp) nil (recp) (let append) nil nil nil) (((mvtyps (type-prescriptions-of-mv-fns (or (wgetprop (car deps) (quote recursivep)) (list (car deps))) world))) nil nil (wgetprop cons recursive-call) (g-factored-fns-verify-guards) nil nil) ((gfn world world) nil (quote ` car cdr) (recursive-call or) nil nil nil) ((recursivep world deps deps) nil (cdr factored-fns list) (verify-guards) nil nil nil)) (/centaur/gl/gify.lisp::g-guards-fns-and-deps (nil nil nil (let) nil nil nil) (((deps (collect-fn-deps fns world))) nil (`) nil nil nil nil) (nil nil nil nil nil (progn) nil) ((logic ,) nil (local) (g-guards-fns-and-deps1) nil nil nil) ((deps world) nil (in-theory) nil nil nil nil) (nil nil nil (e/d**) nil nil nil) (nil nil ((immediate-force-modep)) nil nil (minimal-theory) nil)) (/centaur/gl/gify.lisp::ruleset-for-eval (nil nil nil nil (incat) nil nil) ((ev -RULESET) nil (symbol-name) nil nil nil nil) ((ev) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::eval-list-env (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((lst) nil (`) (recursive-call) nil nil nil) ((ev) nil (cdr) ((, ev)) nil nil nil) ((env lst) nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil) ((lst) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::g-correct-factored-thm-bodies-rec (nil nil nil nil (if) nil nil) (nil nil (endp) (b*) nil (er) nil) ((fns hard Empty list of functions; top: ~x0~% top-fn) nil (quote) nil (if) ((endp (endp (cdr fns)))) nil) ((recursive-call endp) nil (fn formals name g-correct-thm) (cons) nil nil (recursive-call)) ((g-correct-thm entries top-fn ev world) nil (gl-fnsym ` cdr) (wgetprop cons) (if) nil nil) ((endp top-fn fn fn fns g-correct-thm entries) nil (car quote) nil ((, name)) nil nil) ((fns formals ,) nil nil (implies) (if) nil nil)) (/centaur/gl/gify.lisp::g-correct-clique-thm-bodies (nil nil nil nil (if) nil nil) ((entries) nil (endp) (b*) nil nil nil) ((clique) nil nil ((fn (car clique))) nil (recursive-call) nil) ((ev world entries) nil (fns entries cdr) nil nil nil nil) ((clique) nil (factored-fns) nil nil nil (g-correct-factored-thm-bodies-rec)) ((fn fn fns ev world entries) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::factored-fn-correct-thms (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((clique) nil (factored-fns) (cons recursive-call) nil nil nil) ((world) nil (car correct-thmname cdr) (recursive-call) nil nil nil) ((clique world clique) nil (factored-fnname cdr) nil nil nil nil) ((clique) nil (car) nil nil nil nil) ((clique) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::g-correct-factored-thms (nil nil nil nil (if) nil nil) (nil nil (endp) (b*) nil (er) nil) ((fns hard Empty list of functions; top: ~x0~% top-fn) nil (quote) nil (if) nil nil) ((recursive-call endp) nil (fn definedp formals name g-correct-name g-correct-thm g-correct-thm) (cons) nil nil (recursive-call)) ((g-correct-thm thms top-fn ev world) nil (gl-fnsym correct-thmname ` cdr) (norm-function-body wgetprop cons) (if if) nil nil) ((endp top-fn fn world fn fn name endp g-correct-thm fns g-correct-thm thms) nil (car quote `) nil nil (defthm) nil) ((fns formals :hints) nil (, local) (implies) ((goal :expand (((, name) (,@ formals) hyp clk)) (,@ (and endp definedp (` (:in-theory (e/d nil (, (factored-fn-correct-thms (list top-fn) world))))))))) nil nil)) (/centaur/gl/gify.lisp::g-correct-flag-lemma (nil nil nil nil (incat) nil nil) ((-CORRECT-LEMMA) nil (quote symbol-name) nil nil nil nil) ((gl-thm::foo fn) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::g-correct-thmnames (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((fns) nil (correct-thmname recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((fns fns) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::clique-gl-function-info-table-events (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((clique) nil (`) (recursive-call) nil nil nil) ((ev) nil (cdr) nil (table) nil nil) ((gl-function-info clique) nil (quote quote) nil nil nil nil) (nil nil (, (, (gl-fnsym (car clique)))) nil nil nil nil) (nil nil (car) ((, (correct-thmname (gl-fnsym (car clique))))) nil nil nil)) (/centaur/gl/gify.lisp::g-correct-thms (nil nil nil (b*) nil nil nil) (nil nil ((recp (wgetprop top-fn (quote recursivep)))) nil (if) nil nil) ((recp) nil (definedp) (b* b*) nil nil nil) (nil nil (` (fns (or (factored-fns top-fn) (list top-fn))) `) (norm-function-body) nil nil nil) ((top-fn world) nil (gfn1 gfns gfn flag-fn flag-formals thmnames thms) nil nil (progn) (progn)) ((,) nil (gl-fnsym car g-correct-thmnames local local ,@) (wgetprop flag-fn-name wgetprop add-to-ruleset clique-gl-function-info-table-events add-to-ruleset) (table) ((, (flag-defthm-macro gfn world))) (g-correct-factored-thms)) ((gfn1 gfns gfn world flag-fn :hints recp ev top-fn fns ev world nil gl-function-info) nil (car quote quote gl-fnsym-list in-theory , ,@ (goal :induct ((, flag-fn) , flag-formals) :in-theory (e/d nil (,@ (and definedp (` ((, (factored-fn-correct-thms recp world)))))))) , quote in-theory reverse , quote quote quote) nil nil nil nil)) (/centaur/gl/gify.lisp::g-correct-fns-and-deps1 (nil nil nil nil (if) nil nil) ((nil) nil (endp `) nil nil nil nil) ((deps) nil nil ((make-event (g-correct-thms (quote (, (car deps))) (quote (, ev)) (w state)))) nil nil nil) ((,) nil nil (recursive-call) nil nil nil) ((ev) nil (cdr) nil nil nil nil) ((deps) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::g-correct-fns-and-deps (nil nil nil (let) nil nil nil) (((deps (collect-fn-deps fns world))) nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) ((,) nil nil (g-correct-fns-and-deps1) nil nil nil) ((deps ev) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::hons-get-any (nil nil nil nil (if) nil nil) ((nil) nil (atom) (or) nil nil nil) ((lst) nil nil (hons-get recursive-call) nil nil nil) ((al al) nil (car cdr) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::remove-cliques-in-al (nil nil nil nil (if) nil nil) ((nil) nil (atom) (b*) nil nil nil) ((fns) nil ((fn (car fns))) nil (if) nil nil) (nil nil (clique) (hons-get-any cons) (recursive-call) nil nil) ((clique al al world fn) nil (cdr) (or) (recursive-call) nil nil) ((fns al world) nil (list cdr) (wgetprop) nil nil nil) ((fn fn fns) nil (quote) nil nil nil nil)) (/centaur/gl/gify.lisp::lambda-for-apply-stub-fi (nil nil (`) nil nil nil nil) (nil nil nil (lambda) nil nil nil) (nil nil (f) (cond) nil nil nil) ((args) nil (,@ t) nil nil nil nil) (nil nil nil (apply-stub) (make-apply-entries) nil nil) ((world nil f args) nil nil nil (remove-cliques-in-al) nil nil) ((newfns world) nil nil nil (acl2::hons-put-list) nil nil)) (/centaur/gl/gify.lisp::equal-f-fns (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((lst) nil (` recursive-call) nil nil nil nil) (nil nil (cdr) (equal) nil nil nil) ((f lst) nil (quote) nil nil nil nil) (nil nil (,) nil nil nil nil) (nil nil (car) nil nil nil nil)) (/centaur/gl/gify.lisp::eval-g-fi (nil nil nil (let*) nil nil nil) (nil nil (`) nil ((apply (cdr (assoc eval (table-alist (quote eval-g-table) world))))) nil nil) (nil nil (oldapply applyfns oldapplyfns) nil (:functional-instance) nil nil) (nil nil (cdr cdr cdr , ,@ (, oldeval)) nil nil nil nil) ((thmname) nil (,) (assoc assoc assoc) (if) nil nil) ((oldeval apply oldapply eval) nil (` `) (table-alist table-alist table-alist eq) nil nil nil) ((world world world oldapply (apply-stub (, apply))) nil (quote quote quote quote (apply-stub (, (lambda-for-apply-stub-fi oldapplyfns applyfns world)))) nil nil nil nil)) (/centaur/gl/gify.lisp::eval-g-prove-f-i-fn (nil nil nil (let*) nil nil nil) (((apply (cdr (assoc eval (table-alist (quote eval-g-table) world))))) nil (`) nil nil nil nil) (nil nil nil nil nil nil nil) ((t :hints (quote (:computed-hint-replacement ((case-match clause ((((quote equal) (fn . &) . &)) (cond ((eq fn (quote (, apply))) (quote (:computed-hint-replacement ((use-by-computed-hint clause) (quote (:clause-processor (apply-cond-cp clause) :do-not nil))) :clause-processor (rw-cp clause (rws-from-ruleset-fn (quote ((:definition (, apply)))) (w state)))))) ((eq fn (quote (, eval))) (quote (:expand (((, eval) x env)) :do-not nil))))))) :use ((, (eval-g-fi eval oldeval (` (:theorem (equal ((, oldeval) x env) ((, oldeval) x env)))) world))) :do-not (quote (preprocess simplify)) :in-theory nil)) :rule-classes nil) nil (,) nil nil nil nil) ((thmname) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::f-i-thmname (nil nil nil nil nil (incat) nil) ((-FOR-) nil (quote symbol-name symbol-name) nil nil nil nil) ((gl-thm::foo thm eval) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::eval-g-functional-instance-fn (nil nil nil (let*) nil nil nil) (nil nil (`) nil nil ((apply (cdr (assoc eval (table-alist (quote eval-g-table) world))))) nil) (nil nil (oldapply thmbody subst-body newthmname) nil nil (defthm) nil) ((:hints (goal :in-theory (theory (quote minimal-theory)) :use ((, (eval-g-fi eval oldeval thmname world))))) nil (cdr , ,) (wgetprop subst-fns-term f-i-thmname) nil nil nil) ((thmname thmbody thmname eval newthmname subst-body) nil (quote) (assoc list) nil nil nil) ((oldeval theorem) nil nil (table-alist cons cons) nil nil nil) ((world oldeval eval oldapply apply) nil (quote) nil nil nil nil)) (/centaur/gl/gify.lisp::correctness-lemmas-for-new-apply11 (nil nil nil nil (if) nil nil) (nil nil (atom) (b*) (mv) nil nil) ((alist done-finsts thms theory) nil ((thmbase (caar alist))) nil (if) nil nil) (nil nil (thmeval cdar) (b*) nil nil nil) ((alist eval world done-finsts thms) nil (cdar cdr) (cons) ((newthmname (f-i-thmname thmbase eval))) nil nil) ((alist eval world done-finsts thms theory alist thmbase theory) nil ((mv thms done-finsts) thms theory cdr) nil nil nil nil) ((alist) nil nil (cons cons) (if) nil nil)) (/centaur/gl/gify.lisp::correctness-lemmas-for-new-apply1 (nil nil nil nil (if) nil nil) (nil nil (atom) (mv) (mv-let) nil nil) ((alist theory) nil (reverse) (done-finsts) nil nil nil) ((thms thms theory eval world done-finsts thms theory eval world done-finsts thms theory) nil (cddar cdr) nil nil nil nil) ((alist alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::pair-onto (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((lst) nil nil (cons recursive-call) nil nil nil) ((name name) nil (car cdr) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::correctness-lemmas-for-new-apply (nil nil nil (let) nil nil nil) (((ruleset (acl2::get-ruleset (quote generic-geval-g-correct-lemmas) world))) nil nil nil (mv-let) nil nil) (nil nil nil (done) nil nil nil) ((thms theory eval world nil nil nil eval world done thms theory) nil nil (pair-onto table-alist) nil nil nil) ((ruleset world) nil (quote quote) nil nil nil nil) ((generic-geval gl-function-info) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::geval-thm-names (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((names) nil nil (intern-in-package-of-symbol recursive-call) nil nil nil) ((eval eval) nil (cdr) nil nil (concatenate) nil) ((- names) nil (quote symbol-name symbol-name) nil nil nil nil) ((string eval) nil (car) nil nil nil nil) ((names) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::find-definition-nume (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((pairs) nil (caar recursive-call) (eq) nil nil nil) ((:definition pairs) nil (cadar cdr) nil nil nil nil) ((pairs pairs) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::find-lemma-entry (nil nil nil nil (if) nil nil) ((nil) nil (atom) nil (if) nil nil) ((props) nil (car) (and recursive-call) nil nil nil) ((props nume) nil (cdr) (eq eql) nil nil nil) ((nume props) nil (cadar quote) nil (acl2::access) nil nil) ((props acl2::lemmas acl2::rewrite-rule :nume) nil (caddar) nil nil nil nil) ((props) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::clique-and-controller-alist (nil nil nil (let*) nil nil nil) (nil nil nil ((props (acl2::actual-props (acl2::world-to-next-event (cdr (acl2::decode-logical-name fn world))) nil nil))) (acl2::access) nil nil) ((acl2::rewrite-rule :heuristic-info) nil (nume lemma caddr) nil nil nil nil) ((lemma) nil (find-definition-nume) (find-lemma-entry) nil nil nil) ((props nume) nil nil nil nil nil (getprop)) ((fn nil world) nil (quote quote) nil nil nil nil) ((acl2::runic-mapping-pairs current-acl2-world) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::make-unnorm-preferred-defs1 (nil nil nil nil (if) nil nil) ((nil) nil (atom) (b*) nil nil nil) ((fns) nil nil nil nil (list*) nil) (nil nil (entry formals body (when (or entry (not body) (eq formals (quote none)))) (when (member fn acl2::*definition-minimal-theory*)) thmname ` ` `) (recursive-call) nil nil nil) ((world) nil (in-theory cdr) (assoc wgetprop recursive-call recursive-call) (wgetprop table) nil (incat)) ((fn fn fn world world :: -UNNORM-DEF :hints (goal :by (, fn)) :rule-classes (:definition :install-body t , (and (wgetprop fn (quote recursivep)) (let ((pair (clique-and-controller-alist fn world))) (` (:clique (, (car pair)) :controller-alist (, (cdr pair))))))) preferred-defs fns) nil (quote quote quote cdr cdr quote symbol-package-name symbol-name , disable quote quote) (table-alist equal) nil nil nil) ((world formals none unnormalized-body fns fns gl-thm::foo fn fn thmname) nil (quote , , , ,) ((, fn)) nil nil nil)) (/centaur/gl/gify.lisp::make-unnorm-preferred-defs (nil nil (`) nil nil nil nil) (nil nil nil (progn) nil nil nil) ((,) nil nil (make-unnorm-preferred-defs1) nil nil nil) ((fns world) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::apply-rw-names-clique (nil nil nil nil (if) nil nil) ((nil) nil (atom) (cons) nil nil nil) ((clique) nil nil (apply-rw-name recursive-call) nil nil nil) ((ap ap) nil (car cdr) nil nil nil nil) ((clique clique) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::apply-rw-names (nil nil nil nil (if) nil nil) ((nil) nil (atom) (append) nil nil nil) ((fns) nil nil (apply-rw-names-clique) (recursive-call) nil nil) ((ap ap world) nil (cdr) (or) nil nil nil) ((fns) nil (list) (wgetprop) nil nil nil) (nil nil (car quote car) nil nil nil nil) ((fns recursivep fns) nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::union-eq-values (nil nil nil nil (if) nil nil) ((nil) nil (atom) (union-eq) nil nil nil) ((a) nil (cdar recursive-call) nil nil nil nil) ((a) nil (cdr) nil nil nil nil) ((a) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::prev-apply-fns (nil nil (union-eq-values) nil nil nil nil) (nil nil nil (table-alist) nil nil nil) ((world) nil (quote) nil nil nil nil) ((g-apply-table) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/gify.lisp::make-g-world-fn (nil nil nil (b*) nil nil nil) (nil nil (`) nil ((world (w state))) nil nil) (nil nil (ap new-fns apply-fns) nil nil nil nil) ((nil logic) nil (local local local set-bogus-mutual-recursion-ok set-bogus-defun-hints-ok set-ignore-ok set-irrelevant-formals-ok local make-event make-event make-event make-event local correctness-lemmas make-event) (set-difference-eq union-eq defapply def-eval-g) (incat) nil nil) ((ev -AP new-fns t t t t) nil (symbol-name quote prev-apply-fns in-theory set-default-hints make-event , , , , ,) (collect-fn-deps gify-fns-and-deps flagify-g-fns-and-deps gobjectp-fns-and-deps g-guards-fns-and-deps def-ruleset!) (g-correct-fns-and-deps) (table) nil) ((ev fns world acl2::return-last world acl2::theory-invariant-table nil nil :clear nil nil ap apply-fns ev ap apply-rewrites ev) nil (quote w quote w quote w quote w quote quote quote w) (make-unnorm-preferred-defs) nil nil nil) ((state state state state state) nil (quote w , , , , , , ,) nil nil nil nil)) (/centaur/gl/gify.lisp::make-geval-fn (nil nil nil (b*) nil nil nil) (nil nil (`) nil ((world (w state))) nil nil) (nil nil (new-fns fns ap) nil nil nil nil) ((nil logic) nil (local local local set-bogus-mutual-recursion-ok set-bogus-defun-hints-ok set-ignore-ok set-irrelevant-formals-ok local correctness-lemmas) (collect-fn-deps union-eq defapply def-eval-g) (incat) nil nil) ((new-fns world new-fns geval -AP t t t t) nil (prev-apply-fns symbol-name in-theory set-default-hints , , , , ,) (def-ruleset!) nil (table) nil) ((world geval acl2::theory-invariant-table nil nil :clear nil nil ap fns geval ap apply-rewrites geval) nil (quote) nil nil nil nil) (nil nil (,) nil nil nil nil)))