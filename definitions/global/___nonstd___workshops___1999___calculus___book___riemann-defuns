((/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::partitionp (nil nil nil nil (and) nil nil) (nil nil (consp realp) (or) nil nil nil) ((p) nil (car null) nil (and) nil nil) ((p) nil (cdr realp recursive-call) (<) nil nil nil) ((p) nil (cadr car cadr cdr) nil nil nil nil) ((p p p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::partitionp2 (nil nil nil nil nil (and) nil) (nil nil (partitionp partitionp) (equal equal) nil nil nil) ((p1 p2) nil (car car car car) nil nil nil nil) ((p1 p2) nil (last last) nil nil nil nil) ((p1 p2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::refinement-p (nil nil nil nil (if) nil nil) ((t) nil (consp) (let) nil nil nil) ((p2 (p1-tail (member (car p2) p1))) nil nil (and) nil nil nil) ((p1-tail) nil nil (recursive-call) nil nil nil) (nil nil (cdr cdr) nil nil nil nil) ((p1-tail p2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::strong-refinement-p (nil nil nil (and) nil nil nil) (nil nil nil (partitionp2 refinement-p) nil nil nil) ((p1 p2 p1 p2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::common-refinement (nil nil nil nil (if) nil nil) ((p2) nil (consp) nil (if) nil nil) ((p1 p1) nil (consp) nil (cond) nil nil) ((p2) nil ((< (car p1) (car p2)) (< (car p2) (car p1)) t) nil nil nil nil) (nil nil nil (cons cons cons) nil nil nil) (nil nil (car car car) (recursive-call recursive-call recursive-call) nil nil nil) ((p1 p2 p2 p1 p1) nil (cdr cdr cdr cdr) nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::sumlist (nil nil nil nil (if) nil nil) (nil (0) (consp) (+) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::deltas (nil nil nil nil (if) nil nil) ((nil) nil nil (and cons) nil nil nil) (nil nil (consp consp recursive-call) (-) nil nil nil) ((p) nil (cdr cadr car cdr) nil nil nil nil) ((p p p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::map-times (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil nil (* recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::dotprod (nil nil (sumlist) nil nil nil nil) (nil nil nil (map-times) nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::map-rcfn (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((p) nil (rcfn recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((p p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::riemann-rcfn (nil nil nil (dotprod) nil nil nil) (nil nil (deltas map-rcfn) nil nil nil nil) ((p) nil (cdr) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::next-gte (nil nil nil nil (if) nil nil) (nil nil (car) (<=) (if) nil nil) ((x p nil) nil (car consp) (recursive-call) nil nil nil) ((p p x) nil (cdr) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::map-rcfn-refinement (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((p1) nil (rcfn) (recursive-call) nil nil nil) ((p2) nil (cdr) (next-gte) nil nil nil) ((p2 p1) nil (car) nil nil nil nil) ((p1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::riemann-rcfn-refinement (nil nil nil (dotprod) nil nil nil) (nil nil (deltas) (map-rcfn-refinement) nil nil nil) ((p1 p2) nil (cdr) nil nil nil nil) ((p1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::maxlist (nil nil nil nil (if) nil nil) (nil (0) (consp) (max) nil nil nil) ((x) nil (car recursive-call) nil nil nil nil) ((x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::mesh (nil nil (maxlist) nil nil nil nil) (nil nil (deltas) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::abslist (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil (abs recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::bounded-by (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((lst) nil nil (<= recursive-call) nil nil nil) ((a a) nil (abs cdr) nil nil nil nil) ((lst) nil (car) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::non-negative-listp (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil (recursive-call) (<=) nil nil nil) (nil (0) (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::span (nil nil nil (-) nil nil nil) (nil nil (car car) nil nil nil nil) ((p) nil (last) nil nil nil nil) ((p) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/workshops/1999/calculus/book/riemann-defuns.lisp::difflist (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((x) nil nil (- recursive-call) nil nil nil) (nil nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))