((/taspi/tree-generation/tree-gen-helper/basics.lisp::build-unrooted-binary-tree-helper (nil nil nil nil (if) nil nil) ((also shouldn't happen) nil (consp) nil (if) nil nil) ((list shouldn't happen) nil (consp) nil (if) nil nil) ((list) nil (cdr consp) (hons) nil nil nil) ((list) nil (cddr car hist) nil nil nil nil) ((list list) nil (recursive-call) nil nil nil nil) (nil nil (cdr) nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::build-unrooted-binary-tree (nil nil nil nil (if) nil nil) ((taxa) nil nil (>=) (hist) nil nil) (nil (3) (len car cadr build-unrooted-binary-tree-helper) nil nil nil nil) ((taxa taxa taxa) nil (cddr) nil nil nil nil) ((taxa) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::build-arbitraryTree-helper (nil nil nil nil (if) nil nil) ((ans) nil (consp) nil (if) nil nil) ((taxa) nil (consp) (recursive-call hons) nil nil nil) (nil nil (cdr cddr car list) (hons) nil nil nil) ((taxa taxa taxa ans) nil (hist) (hist) nil nil nil) ((ans) nil (car cadr) nil nil nil nil) ((taxa taxa) nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::build-arbitraryTree (nil nil nil (let) nil nil nil) (((taxa (rev list))) nil nil (build-arbitraryTree-helper) nil nil nil) (nil nil (cdr car) nil nil nil nil) ((taxa taxa) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::build-arbitraryTree1 (nil nil nil nil (if) nil nil) ((list) nil (consp) (build-arbitraryTree-helper) nil nil nil) ((list) nil (cdr car) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::splice (nil nil nil nil (if) nil nil) ((ans) nil (consp) nil (recursive-call) nil nil) ((list tree1) nil (cdr) (hons) nil nil nil) ((list ans) nil nil (hist) nil nil nil) ((tree1) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::orderly-splice (nil nil nil nil (if) nil nil) ((ans) nil (consp) nil (if) nil nil) ((pieces Error: Need third branch pieces to match tia) nil nil (and) (if) nil nil) (nil nil (consp) (subset member-gen) (if if) nil nil) ((piece1 Error: Need pieces to match tia in orderly-splice Error: Need second branch pieces to match tia 
                      in orderly-splice) nil (mytips get-taxa-from-taxon-index first-taxon get-taxa-from-taxon-index) (taspip taspip) nil (recursive-call recursive-call) nil) ((piece1 tia tia nil piece1 piece1 tia nil piece1 tia) nil (car cdr list cdr) (hons hons) nil nil nil) ((pieces pieces ans piece1 pieces ans) nil nil nil (orderly-cons orderly-cons) nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::splice2 (nil nil nil nil (if) nil nil) ((ans) nil (consp) nil (recursive-call) nil nil) ((list x) nil (cdr) (hons) nil nil nil) ((list ans) nil nil (hppend) nil nil nil) ((x) nil (hist) nil nil nil nil) (nil nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::orderly-splice2 (nil nil nil nil (if) nil nil) ((ans) nil (consp) nil (if) nil nil) ((pieces Error: Need third branch pieces to match tia) nil nil nil (if) (and) nil) (nil nil (consp) (subset member-gen taspip subset) (if if) nil nil) ((nil piece1 Error: Need pieces to match tia in orderly-splice Error: Need second branch pieces to match tia 
                      in orderly-splice) nil (mytips get-taxa-from-taxon-index first-taxon get-taxa-from-taxon-index list mytips get-taxa-from-taxon-index) (taspip taspip) nil (recursive-call recursive-call) nil) ((piece1 tia tia tia nil piece1 piece1 tia nil piece1 tia) nil (car car car cdr list cdr) (hons hons) nil nil nil) ((pieces pieces pieces pieces ans piece1 pieces ans) nil nil nil (orderly-append orderly-append) nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::addTaxa-rooted (nil nil nil nil (if) nil nil) (nil nil (hist) (and) (hppend) nil nil) (nil nil (consp consp hist) (hist) (splice splice) nil nil) ((tree nil nil x tree) nil (cdr car cadr) (hist recursive-call recursive-call) nil nil nil) ((tree x tree tree x tree x) nil (cadr car) nil nil nil nil) ((tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::orderly-addTaxa-rooted (nil nil nil nil (if) nil nil) (nil nil nil (and) (if if) nil nil) ((Error: Need well-formed taxa and tree in orderly-addTaxa-rooted Error: Need well-formed taxa and tree in second 
              branch of orderly-addTaxa-rooted) nil (consp consp hist) nil (and hppend and) nil nil) ((tree) nil (cdr hist) (member-gen subset taspip member-gen subset taspip) (orderly-cons) (orderly-splice orderly-splice) nil) ((tree nil nil tia nil tia nil x tia) nil (first-taxon get-taxa-from-taxon-index mytips get-taxa-from-taxon-index list car cadr first-taxon get-taxa-from-taxon-index mytips get-taxa-from-taxon-index list hist) nil (orderly-cons recursive-call recursive-call) nil nil) ((x tia tia tree x tia tree x tia tree x tia x tia tia tree tree) nil (list hist cadr car list) nil nil nil nil) ((tree tree tree tree tree) nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::addTaxa-unrooted (nil nil nil nil (hppend) nil nil) (nil nil nil nil (splice2 splice2 splice2) nil nil) ((nil nil nil) nil (cdr) (addTaxa-rooted hist addTaxa-rooted hist addTaxa-rooted) nil nil nil) ((tree x x x) nil (car car caddr cadr car cadr caddr) nil nil nil nil) ((tree tree tree tree tree tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::orderly-addTaxa-unrooted (nil nil nil nil (hppend) nil nil) (nil nil nil nil nil (orderly-splice2 orderly-splice2 orderly-splice2) nil) ((nil tia nil tia nil tia) nil (cdr) (hist hist) (orderly-addTaxa-rooted orderly-addTaxa-rooted orderly-addTaxa-rooted) nil nil) ((tree x tia x tia x tia) nil (car car caddr cadr car cadr caddr) nil nil nil nil) ((tree tree tree tree tree tree tree) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/tree-generation/tree-gen-helper/basics.lisp::get-best-trees (nil nil nil nil (if) nil nil) (nil nil (consp) (mv) (if) nil nil) ((list curScore curTrees) nil nil (let mv) (tree-matches-sequences) nil nil) ((t seq (newScore (pscore-tree (car list) seq cssl-map matrix)) Error: Need trees to match sequences in get-best-trees) nil (car quote) nil (if) nil nil) ((list Error) nil (rationalp) (mv) (if) nil nil) ((newScore Error: Need rational score in get-best-trees) nil (quote) (<) (if) nil nil) ((newScore curScore newScore seq cssl-map matrix Error) nil (cdr hist) (=) nil nil nil)))