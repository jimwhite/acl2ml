((/coi/util/fixequiv.lisp::fixequiv (nil nil nil (equal) nil nil nil) (nil nil (fix fix) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/fixequiv.lisp::fixlist (nil nil nil nil (if) nil nil) ((nil) nil (consp) (cons) nil nil nil) ((list) nil (fix recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/fixequiv.lisp::acl2-number-listp (nil nil nil (cond) nil nil nil) (nil nil ((atom l) t) nil nil nil nil) (nil nil nil (eq and) nil nil nil) ((l nil) nil (acl2-numberp recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((l l) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/fixequiv.lisp::fixlist-equiv (nil nil nil nil (if) nil nil) (nil nil (consp not) nil (and) nil nil) ((x) nil (consp consp) (fixequiv recursive-call) nil nil nil) ((y y) nil (car car cdr cdr) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/util/fixequiv.lisp::fixlist-equiv-alt (nil nil nil (equal) nil nil nil) (nil nil (fixlist fixlist) nil nil nil nil) ((x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))