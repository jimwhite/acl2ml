((/centaur/gl/eval-f-i-cp.lisp::collect-conds-and-default (nil nil nil nil (case-match) nil nil) ((x) nil (((quote if) test then else) &) nil nil nil nil) (nil nil nil (mv) (mv-let) nil nil) ((x nil) nil (default recursive-call) (mv) nil nil nil) ((conds else default) nil nil nil (hons-acons) nil nil) ((test then conds) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::eval-conds (nil nil nil nil (if) nil nil) (nil nil (atom) (mv) (if) nil nil) ((conds nil nil) nil nil (apply-cond-ev mv recursive-call) nil nil nil) ((al t al) nil (caar cdr) (apply-cond-ev) nil nil nil) ((conds al conds) nil (cdar) nil nil nil nil) ((conds) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::no-conds-with-same-fn (nil nil nil (or) nil nil nil) (nil nil (atom) (let*) nil nil nil) ((conds) nil ((pair (car conds))) nil (case-match) nil nil) ((test) nil (test ((quote if) ((quote eq) (quote f) ((quote quote) fn2)) & (quote (quote nil))) &) nil nil nil nil) ((nil) nil (car) (and) nil nil nil) ((pair) nil (not) (recursive-call) nil nil nil) ((fn) nil (cdr) (equal) nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::no-duplicate-condsp (nil nil nil (or) nil nil nil) (nil nil (atom) (let*) nil nil nil) ((conds) nil ((pair (car conds))) nil (case-match) nil nil) ((test) nil (test ((quote if) ((quote eq) (quote f) ((quote quote) fn)) & (quote (quote nil))) &) nil nil nil nil) ((nil) nil (car) (and) nil nil nil) ((pair) nil (recursive-call) (no-conds-with-same-fn) nil nil nil) ((fn) nil (cdr cdr) nil nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::alist-no-cond-fns (nil nil nil (or) nil nil nil) (nil nil (atom) (let*) nil nil nil) ((conds) nil ((pair (car conds))) nil (case-match) nil nil) ((test) nil (test ((quote if) ((quote eq) (quote f) ((quote quote) fn)) & (quote (quote nil))) &) nil nil nil nil) ((nil) nil (car) (and) nil nil nil) ((pair) nil (not) (recursive-call) nil nil nil) ((al) nil (cdr) (hons-get) nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::exclusive-condsp (nil nil nil nil (if) nil nil) (nil nil (atom) (prog2$ let*) nil nil nil) ((conds t) nil (flush-hons-get-hash-table-link (pair (car conds))) nil (case-match) nil nil) ((acc test) nil (test ((quote if) ((quote eq) (quote f) ((quote quote) fn)) & (quote (quote nil))) &) nil nil nil nil) (nil nil (car) (cw) (if) nil nil) ((pair Exclusive-condsp: bad test: ~x0~% test) nil nil (hons-get cw recursive-call) nil nil nil) ((fn acc Exclusive-condsp: repeat function: ~x0~% fn) nil (cdr) nil (hons-acons) nil nil)) (/centaur/gl/eval-f-i-cp.lisp::remove-assoc (nil nil nil nil (if) nil nil) ((al) nil (atom) nil (if) nil nil) ((al) nil nil (and recursive-call cons) nil nil nil) ((x) nil (consp cdr car) (equal recursive-call) nil nil nil) ((x al al x) nil (car caar cdr) nil nil nil nil) ((al al al) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::hons-alist-keys-subset (nil nil nil (or) nil nil nil) (nil nil (atom) nil (if) nil nil) ((lst1) nil (consp) (and recursive-call) nil nil nil) ((lst2) nil (car cdr) (hons-get recursive-call) nil nil nil) ((lst1 lst2 lst2 lst1) nil (caar cdr) nil nil nil nil) ((lst1 lst1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::conds-match (nil nil nil nil (if) nil nil) (nil nil (atom) (mv) (if) nil nil) ((lst1 t nil) nil (consp) (let recursive-call) nil nil nil) (((lk (hons-get (caar lst1) lst2)) lst2) nil (car cdr) nil (if) nil nil) ((lst1 lk lst1) nil nil (mv) (mv-let) nil nil) ((nil nil) nil (ok) (recursive-call) (if) nil nil) ((rest lst2) nil (cdr) (equal mv mv) nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::apply-cond-terms-equal (nil nil nil (b*) nil nil nil) (nil nil nil nil (if) nil nil) ((okp) nil ((mv def2 conds2) (mv match equivs) okp-list okp - -) (prog2$) (if) nil nil) ((equivs) nil (collect-conds-and-default acl2::and-list flush-hons-get-hash-table-link flush-hons-get-hash-table-link list) (conds-match equal cons) (cw) (list) nil) ((term2 conds1 conds2 match okp-list conds1 conds2 def1 def2 equivs cond cp fail: ~x0~%details: ~x1~% okp-list) nil (` `) (exclusive-condsp exclusive-condsp hons-alist-keys-subset acl2::hons-set-diff) nil nil nil) ((conds1 nil conds2 nil conds2 conds1 (equal (, def1) (, def2)) (equal (, term1) (, term2))) nil (strip-cars strip-cars) nil nil nil nil) ((conds2 conds1) nil nil nil nil nil nil)) (/centaur/gl/eval-f-i-cp.lisp::apply-cond-cp (nil nil nil nil (if) nil nil) (nil nil (consp list) (let) nil nil nil) ((clause (term (car (last clause))) clause) nil nil nil (case-match) nil nil) ((term) nil (((quote equal) term1 term2) &) nil nil nil nil) (nil nil (list) (apply-cond-terms-equal) nil nil nil) ((term1 term2 clause) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))