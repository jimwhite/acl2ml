((/taspi/proofs/sets.lisp::subset (nil nil nil nil (if) nil nil) (nil nil (consp) (equal) (if) nil nil) ((x nil x nil) nil nil (member-equal recursive-call) nil nil nil) ((y y) nil (car cdr) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::get-subsets (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((list) nil nil (subset cons recursive-call) nil nil nil) ((x x) nil (car car cdr) (recursive-call) nil nil nil) ((list list x list) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::get-non-subsets (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((list) nil nil (subset recursive-call cons) nil nil nil) ((x x) nil (car cdr car) (recursive-call) nil nil nil) ((list list list x) nil (cdr) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::difference (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((x) nil nil (member-equal recursive-call cons) nil nil nil) ((y y) nil (car cdr car) (recursive-call) nil nil nil) ((x x x y) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::subset-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil nil (subset recursive-call) nil nil nil) ((x x) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::intersect (nil nil nil nil (if) nil nil) ((nil) nil (consp) nil (if) nil nil) ((x) nil nil (member-equal cons recursive-call) nil nil nil) ((y y) nil (car car cdr) (recursive-call) nil nil nil) ((x x y x) nil (cdr) nil nil nil nil) ((x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::no-conflicts (nil nil nil nil (if) nil nil) ((t) nil (consp) nil (if) nil nil) ((list) nil nil (intersect and recursive-call) nil nil nil) ((x x) nil (car cdr) (subset recursive-call) nil nil nil) ((list x x list) nil (car cdr) nil nil nil nil) ((list list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::no-conflicts-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((x) nil (recursive-call) (no-conflicts) nil nil nil) (nil nil (car cdr cdr) nil nil nil nil) ((x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::disjoint-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((list) nil (not) (recursive-call) nil nil nil) ((x) nil (cdr) (intersect) nil nil nil) ((x list) nil (car) nil nil nil nil) ((list) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/taspi/proofs/sets.lisp::disjoint-lists (nil nil nil nil (if) nil nil) ((t) nil (consp) (and) nil nil nil) ((l1) nil nil (disjoint-list recursive-call) nil nil nil) ((l2 l2) nil (car cdr) nil nil nil nil) ((l1 l1) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))