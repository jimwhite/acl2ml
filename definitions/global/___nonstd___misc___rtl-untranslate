((/nonstd/misc/rtl-untranslate.lisp::rtl-untrans-lop (nil nil nil (cond) nil nil nil) (nil nil ((and (consp y) (eq (car y) lop) (equal (car (last y)) width)) t) nil nil nil nil) (nil nil nil nil (list*) (list) nil) ((lop x lop x y width) nil (cdr) nil nil nil nil) ((y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::sum-cat-sizes (nil nil nil nil (if) nil nil) ((acc) nil (endp) nil (if) nil nil) ((lst nil) nil (acl2-numberp) (recursive-call) nil nil nil) (nil nil (cadr cddr) (+) nil nil nil) ((lst lst acc) nil (cadr) nil nil nil nil) ((lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::rtl-untrans-cat (nil nil nil (cond) nil nil nil) (nil nil ((and (consp y) (eq (car y) (quote cat)) (integerp ysize) (eql ysize (sum-cat-sizes (cdr y) 0))) t) nil nil nil nil) (nil nil nil nil nil (list*) (list)) ((x xsize x xsize y ysize) nil (quote cdr quote) nil nil nil nil) ((cat y cat) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::cond1-length (nil nil nil nil (case-match) nil nil) ((term) nil (((quote if1) & & z) &) nil nil nil nil) (nil (1) (1+) nil nil nil nil) (nil nil (recursive-call) nil nil nil nil) ((z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::str=-up-to (nil nil nil nil (if) nil nil) ((t) nil nil (>= and) nil nil nil) ((i bound) nil nil (eql) nil (recursive-call) nil) ((str1 str2 bound) nil (1+) (char char) nil nil nil) ((str1 i str2 i i) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::cons-all-to-strip-$ (nil nil nil nil (if) nil nil) ((acc) nil (endp) (recursive-call) nil nil nil) ((lst) nil (cdr) (cons) nil nil nil) ((lst acc) nil nil (cons) nil nil nil) (nil nil (car) (intern-in-package-of-symbol) nil nil nil) ((lst) nil (car) (coerce) nil nil nil) ((lst) nil (quote) (butlast) nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::dollarfy (nil nil nil (let*) nil nil nil) (nil nil ((old-name (symbol-name sym))) nil (if) nil nil) (nil nil (name) (eq intern intern-in-package-of-symbol) nil nil nil) ((sym name ACL2 name sym) nil nil (intern) (concatenate) nil nil) ((old-name $ old-name ACL2) nil (quote) nil nil nil nil) ((string) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::dollar-alist (nil nil nil nil (if) nil nil) ((acc) nil (endp) (recursive-call) nil nil nil) ((syms) nil (cdr) nil (acons) nil nil) ((syms acc) nil (dollarfy car) nil nil nil nil) ((syms) nil (car) nil nil nil nil) ((syms) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::rtl-untranslate (nil nil nil (let) nil nil nil) (((rtl-tbl (table-alist (quote rtl-tbl) wrld))) nil nil nil nil nil nil) ((term iff-flg wrld) nil (untrans-table cdr cdr untranslate-preprocess-fn) nil nil nil nil) ((wrld wrld) nil nil (assoc assoc) nil nil nil) ((rtl-tbl rtl-tbl) nil (quote quote) nil nil nil nil) ((sigs-btree lops-alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::rtl-untranslate-lst (nil nil nil (let) nil nil nil) (((rtl-tbl (table-alist (quote rtl-tbl) wrld))) nil nil nil nil nil nil) ((lst iff-flg wrld) nil (untrans-table cdr cdr untranslate-preprocess-fn) nil nil nil nil) ((wrld wrld) nil nil (assoc-eq assoc-eq) nil nil nil) ((rtl-tbl rtl-tbl) nil (quote quote) nil nil nil nil) ((sigs-btree lops-alist) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::expand-address-cat (nil nil nil nil nil (cond) nil) (nil nil ((member car-addr (quote (1 2))) (evenp car-addr) (eql car-addr (- (length raw-term) 2)) t) nil nil nil nil) (nil nil (list) (append) (msg make-list) nil nil) ((car-addr It is illegal to dive to arguments in even-numbered positions of a ~
          CAT expression, after the first.  Hence, address ~x0 is illegal for ~
          (untranslated) term~|~x1. car-addr raw-term :initial-element) (3) (list) (floor) (make-list) nil nil) ((:initial-element) (2 3 1) (1-) (floor) nil nil nil) ((car-addr) (2) (1-) nil nil nil nil) ((car-addr) nil nil nil nil nil nil)) (/nonstd/misc/rtl-untranslate.lisp::expand-address-lxor (nil nil nil (let*) nil nil nil) (((diff (- car-addr (- (length raw-term) 2)))) nil nil nil nil (cond) nil) (nil nil ((eql diff 0) (< diff 0) (eql diff 1) t) nil nil nil nil) (nil nil (list) (append) (make-list msg) nil nil) ((:initial-element Argument position ~x0 is too big for diving into ~
                   (untranslated) term~|~x1. car-addr raw-term) (2 3) (1- quote) nil (make-list) nil nil) ((car-addr :initial-element) (2 1) (1-) nil nil nil nil) ((car-addr) nil nil nil nil nil nil)))