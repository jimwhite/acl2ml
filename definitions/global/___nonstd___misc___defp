((/nonstd/misc/defp.lisp::defpun-add-test (nil nil nil nil (if) nil nil) ((nil) nil (endp) (let) nil nil nil) ((tests-and-stuff-lst) nil ((tests (caar tests-and-stuff-lst))) (cons) nil nil nil) (nil nil (call) (cons recursive-call) nil nil nil) ((call test) nil (cdar cdr) (cons) nil nil nil) ((tests-and-stuff-lst test tests tests-and-stuff-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defp.lisp::defpun-calls-tests-and-args-lst (nil nil nil nil nil (case-match) nil) ((term) nil ((!fn . args) ((quote if) test tbr fbr) &) nil nil nil nil) ((nil) nil (list) (let) nil nil nil) (nil nil ((tbr-tests-and-args-lst (defpun-calls-tests-and-args-lst fn tbr))) (cons append) nil nil nil) ((nil args) nil (fbr-tests-and-args-lst) (defpun-add-test defpun-add-test) nil nil nil) ((test tbr-tests-and-args-lst fbr-tests-and-args-lst) nil (dumb-negate-lit) (recursive-call) nil nil nil) ((fn fbr test) nil nil nil nil nil nil)) (/nonstd/misc/defp.lisp::defpun-tests-and-base-lst (nil nil nil nil nil (case-match) nil) ((term) nil ((!fn . &) ((quote if) test tbr fbr) &) nil nil nil nil) ((nil) nil (list) (let) nil nil nil) (nil nil ((tbr-base (defpun-tests-and-base-lst fn tbr))) (append cons) nil nil nil) ((nil term) nil (fbr-base) (defpun-add-test defpun-add-test) nil nil nil) ((test tbr-base fbr-base) nil (dumb-negate-lit) (recursive-call) nil nil nil) ((fn fbr test) nil nil nil nil nil nil)) (/nonstd/misc/defp.lisp::map-conjoin (nil nil nil nil (if) nil nil) ((nil) nil (endp) (cons) nil nil nil) ((lst) nil (conjoin recursive-call) nil nil nil nil) (nil nil (car cdr) nil nil nil nil) ((lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defp.lisp::defpun-disjoin-tests (nil nil nil (let) nil nil nil) (((tests-lst (strip-cars tests-and-args-lst))) nil (disjoin) nil nil nil nil) (nil nil (map-conjoin) nil nil nil nil) ((tests-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defp.lisp::defpun-make-nth-arg (nil nil nil nil (if) nil nil) (nil nil (endp) (nth) nil (fcons-term*) nil) ((n) nil (cdr cdar quote conjoin) (nth recursive-call) nil nil nil) ((tests-and-args-lst tests-and-args-lst if n n) nil (caar cdar cdr) nil nil nil nil) ((tests-and-args-lst tests-and-args-lst tests-and-args-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defp.lisp::defpun-make-call (nil nil nil nil (if) nil nil) (nil nil (zp) (cons-term let) nil nil nil) ((n fn acc (n (1- n))) nil nil nil nil (recursive-call) nil) ((fn tests-and-args-lst n) nil nil (cons) nil nil nil) ((acc) nil nil (defpun-make-nth-arg) nil nil nil) ((tests-and-args-lst n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/nonstd/misc/defp.lisp::defpun-make-base (nil nil nil nil (if) nil nil) (nil nil (endp cdar) nil nil (fcons-term*) nil) ((tests-and-base-lst) nil (cdr quote conjoin cdar recursive-call) nil nil nil nil) ((tests-and-base-lst if tests-and-base-lst) nil (caar cdr) nil nil nil nil) ((tests-and-base-lst tests-and-base-lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))