((/coi/gacc/gacc2.lisp::syntax-consp-or-quote (nil nil nil (or) nil nil nil) (nil nil (quotep) (and) nil nil nil) ((skel) nil (consp) (equal) nil nil nil) ((skel) nil (car quote) nil nil nil nil) ((skel cons) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::syntax-consp-or-symbol (nil nil nil (or) nil nil nil) (nil nil (symbolp) (and) nil nil nil) ((skel) nil (consp) (or) nil nil nil) ((skel) nil nil (equal) (and) nil nil) (nil nil (car quote consp not) (equal) nil nil nil) ((skel cons) nil (car quote cdr null) nil nil nil nil) ((skel quote skel) nil (cadr) nil nil nil nil)) (/coi/gacc/gacc2.lisp::syntax-atom (nil nil nil (or) nil nil nil) (nil nil (symbolp quotep) nil nil nil nil) ((m m) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::which-p (nil nil nil (memberp) nil nil nil) ((which) nil (quote) nil nil nil nil) (nil nil nil nil (:all) nil nil) ((:ptr :val :nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::how-p (nil nil nil (memberp) nil nil nil) ((how) nil (quote) nil nil nil nil) (nil nil nil (:g) nil nil nil) ((:x :z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::ptr? (nil nil nil (equal) nil nil nil) ((type :ptr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::x? (nil nil nil (let) nil nil nil) (((how (op-how op))) nil nil (equal) nil nil nil) ((how :x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::whichnum (nil nil nil nil nil nil (case)) ((n) nil (3 2 1 0) nil nil nil nil) ((:all :ptr :val :nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::numwhich (nil nil nil nil nil nil (case)) ((which) nil (:all :ptr :nil t) nil nil nil nil) (nil (3 2 0 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::numtype (nil nil nil nil (case) nil nil) ((type) nil (:ptr t) nil nil nil nil) (nil (2 1) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::whichtype (nil nil nil (let) nil nil nil) (nil nil ((which (numwhich which))) (equal) nil nil nil) ((type) nil (type) (logand) nil nil nil) ((which type) nil (numtype) nil nil nil nil) ((type) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::fix-skel (nil nil nil nil (if) nil nil) ((skel) nil (skel-p) (skel) nil nil nil) ((skel nil) (0) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::wfixn-skel (nil nil nil (let) nil nil nil) (((skel (fix-skel skel))) nil nil (skel) nil nil nil) (nil nil (skel-spec) (acl2::loghead) nil nil nil) ((skel) nil (gacc::fix-size skel-base) nil nil nil nil) ((size skel) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::spectype (nil nil nil nil (if) nil nil) ((:ptr :val) nil nil (equal) nil nil nil) ((type :ptr) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::op-base (nil nil nil nil (if) nil nil) ((base) nil nil (equal) (if) nil nil) ((type :ptr base) nil nil (equal) (if) nil nil) ((h :x valu) (0) nil (equal) nil nil nil) ((h :z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/coi/gacc/gacc2.lisp::wf-spec (nil nil nil nil (if) nil nil) ((t) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p recursive-call) (let) nil nil nil) ((slot) nil ((skel (slot-skel slot)) cdr) nil (and) nil nil) ((spec) nil (type skel-p recursive-call) (implies) nil nil nil) ((skel) nil (slot-type ptr? recursive-call cdr) nil nil nil nil)) (/coi/gacc/gacc2.lisp::wf-skels (nil nil nil nil (if) nil nil) ((t) nil (consp) (let) nil nil nil) ((skels (line (car skels))) nil nil nil (if) nil nil) (nil nil (line-p recursive-call) (let) nil nil nil) ((line (skel (line-skel line))) nil (cdr) nil (and) nil nil) ((skels) nil (skel-p wf-spec recursive-call) nil nil nil nil) ((skel) nil (skel-spec cdr) nil nil nil nil)) (/coi/gacc/gacc2.lisp::g*-spec (nil nil nil nil (if) nil nil) ((spec) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let cons) nil nil nil) ((slot slot) nil ((w (op-which op))) (let) nil (recursive-call) nil) ((op ptr ram) nil (h cdr) (let) nil ((off (slot-off slot))) nil) (((read (rx size (+<> off ptr) ram)) spec) nil (op-how size type skel value) (let) nil nil nil)) (/coi/gacc/gacc2.lisp::G*-SPEC-car (nil nil nil nil (IF) nil nil) ((SLOT) nil (SLOT-P) (LET) nil nil nil) ((SLOT) nil ((W (OP-WHICH OP))) (LET) nil nil nil) (nil nil (H) (LET) nil ((OFF (SLOT-OFF SLOT))) nil) (((READ (RX SIZE (|+<>| OFF PTR) RAM))) nil (OP-HOW SIZE TYPE SKEL VALUE) (LET) nil nil nil) ((OP (BASE (SKEL-BASE SKEL))) nil (SLOT-SIZE SLOT-TYPE SLOT-SKEL SLOT-VAL) (LET) nil nil nil) ((SLOT SLOT SLOT SLOT (BASE (ACL2::LOGHEAD (FIX-SIZE SIZE) (IFIX (OP-BASE H TYPE BASE READ))))) nil nil (LET) nil nil nil)) (/coi/gacc/gacc2.lisp::g*-list-car (nil nil nil nil (IF) nil nil) ((LINE) nil (LINE-P) (LET) nil nil nil) ((LINE) nil ((KEY (LINE-KEY LINE))) (LET) nil nil nil) (((BASE (OP-BASE (OP-HOW OP) :PTR (SKEL-BASE SKEL) KEY))) nil (SKEL) (LINE) nil nil nil) ((KEY) nil (LINE-SKEL) (SKEL) nil nil nil) ((LINE BASE) nil nil nil nil (G*-SPEC) nil) ((OP BASE RAM) nil (SKEL-SPEC) nil nil nil nil)) (/coi/gacc/gacc2.lisp::s*-spec (nil nil nil nil (if) nil nil) ((ram) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let) nil (recursive-call) nil) ((slot op ptr ram) nil ((w (op-which op)) cdr) (let) nil nil nil) ((spec) nil (h) (let) nil ((size (slot-size slot))) nil) (((read value)) nil (op-how off value type skel) (let) nil nil nil)) (/coi/gacc/gacc2.lisp::s*-list (nil nil nil nil (if) nil nil) ((ram) nil (consp) (let) nil nil nil) ((skels (line (car skels))) nil nil nil (if) nil nil) (nil nil (line-p) (let) (recursive-call) nil nil) ((line op ram) nil ((skel (line-skel line)) cdr) (let) nil nil nil) (((base (op-base (op-how op) :ptr (skel-base skel) key)) skels) nil (key) (let) nil nil nil) (((ram (s*-list op (cdr skels) ram))) nil (line-key) nil nil (s*-spec) nil)) (/coi/gacc/gacc2.lisp::f*-spec (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let) (recursive-call) nil nil) ((slot op ptr) nil ((w (op-which op)) cdr) (let) nil nil nil) ((spec) nil (h) (let) nil ((off (slot-off slot))) nil) (((read value)) nil (op-how size type skel value) (let) nil nil nil)) (/coi/gacc/gacc2.lisp::f*-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((skels (line (car skels))) nil nil nil (if) nil nil) (nil nil (line-p) (let recursive-call) nil nil nil) ((line op) nil ((key (line-key line)) cdr) (let) nil nil nil) (((base (op-base (op-how op) :ptr (skel-base skel) key)) skels) nil (skel) (append) nil nil nil) (nil nil (line-skel) (recursive-call) (f*-spec) nil nil)) (/coi/gacc/gacc2.lisp::h*-spec (nil nil nil nil (if) nil nil) ((spec) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let cons) nil nil nil) ((slot slot) nil ((w (op-which op))) (let recursive-call) nil nil nil) ((op) nil (h cdr) (let) ((size (slot-size slot))) nil nil) (((read value) spec) nil (op-how type skel value) (let) nil nil nil)) (/coi/gacc/gacc2.lisp::car-h*-spec (nil nil nil nil (IF) nil nil) ((SLOT) nil (SLOT-P) (LET) nil nil nil) ((SLOT) nil ((W (OP-WHICH OP))) (LET) nil nil nil) (nil nil (H) (LET) ((SIZE (SLOT-SIZE SLOT))) nil nil) (((READ VALUE)) nil (OP-HOW TYPE SKEL VALUE) (LET) nil nil nil) ((OP (BASE (SKEL-BASE SKEL))) nil (SLOT-TYPE SLOT-SKEL SLOT-VAL) (LET) nil nil nil) ((SLOT SLOT SLOT (BASE (ACL2::LOGHEAD (FIX-SIZE SIZE) (IFIX (OP-BASE H TYPE BASE READ))))) nil nil (LET) nil nil nil)) (/coi/gacc/gacc2.lisp::h*-list (nil nil nil nil (if) nil nil) ((skels) nil (consp) (let) nil nil nil) ((skels (line (car skels))) nil nil nil (if) nil nil) (nil nil (line-p) (let cons) nil nil nil) ((line line) nil ((key (line-key line))) (let recursive-call) nil nil nil) (((base (op-base (op-how op) :ptr (skel-base skel) key)) op) nil (skel cdr) (let) nil nil nil) (((key key) skels) nil (line-skel) (cons) nil nil nil)) (/coi/gacc/gacc2.lisp::v*-spec (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p) (let recursive-call) nil nil nil) ((slot (w (op-which op)) op) nil (cdr) (let) nil nil nil) ((spec) nil nil (let) ((size (slot-size slot))) nil nil) (((read value)) nil (type skel value) (let) nil nil nil)) (/coi/gacc/gacc2.lisp::v*-list (nil nil nil nil (if) nil nil) ((nil) nil (consp) (let) nil nil nil) ((skels (line (car skels))) nil nil nil (if) nil nil) (nil nil (line-p) (let recursive-call) nil nil nil) ((line (skel (line-skel line)) op) nil (cdr) (append) nil nil nil) ((skels) nil nil (v*-spec recursive-call) nil nil nil) ((op op) nil (skel-spec cdr) nil nil nil nil)) (/coi/gacc/gacc2.lisp::fixed-spec-p (nil nil nil nil (if) nil nil) ((t) nil (consp) (let) nil nil nil) ((spec (slot (car spec))) nil nil nil (if) nil nil) (nil nil (slot-p recursive-call) (let) nil nil nil) ((slot) nil (cdr) (let) ((size (slot-size slot))) nil nil) ((spec) nil (type skel value (base (skel-base skel))) nil (and) nil nil) (nil nil (slot-type slot-skel slot-val sspec recursive-call) (acl2::unsigned-byte-p implies*) nil nil nil)) (/coi/gacc/gacc2.lisp::fixed-skel-list (nil nil nil nil (if) nil nil) ((t) nil (consp) (let) nil nil nil) ((list (line (car list))) nil nil nil (if) nil nil) (nil nil (line-p recursive-call) (let) nil nil nil) ((line (skel (line-skel line))) nil (cdr) (and) nil nil nil) ((list) nil (fixed-spec-p recursive-call) nil nil nil nil) (nil nil (skel-spec cdr) nil nil nil nil)))