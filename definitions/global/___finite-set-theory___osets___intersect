((/finite-set-theory/osets/intersect.lisp::fast-intersectp (nil nil nil nil nil nil (cond)) (nil nil ((endp X) (endp Y) (equal (car X) (car Y)) (mbe :logic (<< (car X) (car y)) :exec (fast-lexorder (car X) (car Y))) t) nil nil nil nil) ((nil nil t) nil nil (recursive-call recursive-call) nil nil nil) ((Y X) nil (cdr cdr) nil nil nil nil) ((X Y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/finite-set-theory/osets/intersect.lisp::fast-intersect (nil nil nil nil nil nil (cond)) (nil nil ((endp X) (endp Y) (equal (car X) (car Y)) (mbe :logic (<< (car X) (car Y)) :exec (fast-lexorder (car X) (car Y))) t) nil nil nil nil) (nil nil nil (revappend revappend) (recursive-call recursive-call recursive-call) nil nil) ((acc nil acc nil Y acc X acc) nil (cdr cdr cdr cdr) (cons) nil nil nil) ((X Y acc X Y) nil (car) nil nil nil nil) ((X) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))