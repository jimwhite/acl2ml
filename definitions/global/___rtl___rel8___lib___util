((/rtl/rel8/lib/util.lisp::sub1-induction (nil nil nil nil (if) nil nil) ((n) nil (zp recursive-call) nil nil nil nil) ((n) nil (1-) nil nil nil nil) ((n) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/lib/util.lisp::split-list (nil nil nil nil (cond) nil nil) (nil nil ((endp lst) (endp (cdr lst)) t) nil nil nil nil) (nil nil nil (mv mv) (recursive-call) nil nil) ((lo hi hi) nil (cddr) (cons cons cons) nil nil nil) ((lo lst lo hi) nil (car car cadr) nil nil nil nil) ((lst lst lst) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/rtl/rel8/lib/util.lisp::fast-and-fn (nil nil nil nil (cond) nil nil) (nil nil ((endp conjuncts) (endp (cdr conjuncts)) t) nil nil nil nil) (nil nil (quote car) nil (mv-let) nil nil) ((conjuncts) nil (quote hi) nil (split-list) (list) nil) ((t lo conjuncts nil nil) nil (quote recursive-call recursive-call quote) nil nil nil nil) ((if hi lo nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))