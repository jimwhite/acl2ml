((/parallel/stress-tests.lisp::plet-test (nil nil nil nil (if) nil nil) ((t) nil (zp) (and) nil nil nil) ((n) nil (recursive-call) (assert$) nil nil nil) ((t) nil (1-) (equal) nil nil nil) ((n) (10) nil (plet) nil nil nil) (nil nil ((x 3)) (+) nil nil nil) ((x y) nil (y) nil nil nil nil)) (/parallel/stress-tests.lisp::pargs-test (nil nil nil nil (if) nil nil) ((t) nil (zp) (and) nil nil nil) ((n) nil (recursive-call) (assert$) nil nil nil) ((t) nil (1-) (equal) nil nil nil) ((n) (10) (pargs) nil nil nil nil) (nil nil nil (binary-+) nil nil nil) (nil (3 7) nil nil nil nil nil)) (/parallel/stress-tests.lisp::pand-true (nil nil nil nil (if) nil nil) ((t) nil (zp) (and) nil nil nil) ((n) nil (recursive-call) (assert$) nil nil nil) ((t) nil (1-) (equal) nil nil nil) ((t n) nil nil nil nil nil nil) (nil (1 2 3 4 5 6 7 8 9 0) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/stress-tests.lisp::pand-false-one (nil nil nil nil (if) nil nil) ((t) nil (zp) (and) nil nil nil) ((n) nil (recursive-call) (assert$) nil nil nil) ((t) nil (not 1-) nil nil nil nil) ((n) nil nil nil nil nil nil) ((nil) (1 2 3 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/stress-tests.lisp::pand-false-many (nil nil nil nil (if) nil nil) ((t) nil (zp) (and) nil nil nil) ((n) nil (recursive-call) (assert$) nil nil nil) ((t) nil (not 1-) nil nil nil nil) ((n) nil nil nil nil nil nil) ((nil nil nil nil) (1 2 3 5 9 0 1 2 3 4 5 6 7 8 9) nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/parallel/stress-tests.lisp::por-true-many (nil nil nil nil (if) nil nil) ((t) nil (zp) (and) nil nil nil) ((n) nil (recursive-call) (assert$) nil nil nil) ((t) nil (1-) nil nil nil nil) ((nil nil nil nil nil nil nil nil nil nil nil n) (5 6 9) nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))