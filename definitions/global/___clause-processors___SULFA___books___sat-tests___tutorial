((/clause-processors/SULFA/books/sat-tests/tutorial.lisp::xor (nil nil nil nil (if) nil nil) ((p) nil nil nil (if if) nil nil) ((q nil t q t nil) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/tutorial.lisp::xor3 (nil nil nil (xor) nil nil nil) ((a) nil nil (xor) nil nil nil) ((b c) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/tutorial.lisp::foo (nil nil nil nil (if) nil nil) ((b) nil (zp cdr) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/tutorial.lisp::maj3 (nil nil nil nil (if) nil nil) ((x) nil nil (or and) nil nil nil) ((y z y z) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/tutorial.lisp::v-adder (nil nil nil nil (if) nil nil) (nil nil (zp list) (cons) nil nil nil) ((n c) nil nil nil (xor3) (recursive-call) nil) ((c) nil (car car 1- cdr cdr) nil (maj3) nil nil) ((a b n c a b) nil (car car) nil nil nil nil) ((a b) nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/tutorial.lisp::n-bvp (nil nil nil nil (cond) nil nil) (nil nil ((zp n) (booleanp (car x)) t) nil nil nil nil) ((t nil) nil nil (recursive-call) nil nil nil) (nil nil (1- cdr) nil nil nil nil) ((n x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/tutorial.lisp::bar (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((ans) nil nil (or) nil nil nil) (nil nil nil nil (recursive-call recursive-call) nil nil) (nil nil (1- cdr 1- cdr) (or or) nil nil nil) ((n x ans n x ans) nil nil (equal equal) nil nil nil) (nil (0 1) (car car) nil nil nil nil)) (/clause-processors/SULFA/books/sat-tests/tutorial.lisp::bar-better (nil nil nil (cond) nil nil nil) (nil nil ((zp n) t) nil nil nil nil) ((ans) nil nil nil (recursive-call) nil nil) (nil nil (1- cdr) nil (or) nil nil) ((n x ans) nil nil (equal equal) nil nil nil) (nil (0 1) (car car) nil nil nil nil) ((x x) nil nil nil nil nil nil)))