((/nonstd/workshops/2011/reid-gamboa-differentiator/support/product-composition.lisp::product-composition-apply-fn (nil nil nil (let) nil nil nil) (((instantiation-fns (` ((product-fn1 (lambda (x arg) (, fn1))) (product-fn1-domain-p (lambda (x arg) (, fn1-domain))) (product-fn1-prime (lambda (x arg) (, fn1-derivative))) (product-fn2 (lambda (x arg) (, fn2))) (product-fn2-domain-p (lambda (x arg) (, fn2-domain))) (product-fn2-prime (lambda (x arg) (, fn2-derivative))) (product-fn1*2 (lambda (x arg) (* (, fn1) (, fn2)))) (product-fn1*2-domain-p (lambda (x arg) (and (, fn1-domain) (, fn2-domain)))) (product-fn1*2-prime (lambda (x arg) (+ (* (, fn1) (, fn2-derivative)) (* (, fn2) (, fn1-derivative))))))))) nil (`) nil nil nil nil) (nil nil nil ((encapsulate nil (local (in-theory (quote ((,@ (deriv-symbols fn1-symbol)) (,@ (deriv-symbols fn2-symbol)))))) (,@ (use-deriv fn1*2-symbol (quote product-fn1*2) (` (* (, fn1) (, fn2))) (` (+ (* (, fn1) (, fn2-derivative)) (* (, fn2) (, fn1-derivative)))) (` (and (, fn1-domain) (, fn2-domain))) instantiation-fns)))) nil nil nil) (nil nil nil (+ and) nil nil nil) (nil nil (, ,) (* *) nil nil nil) ((fn1-domain fn2-domain) nil (, , , ,) nil nil nil nil) ((fn1 fn2-derivative fn2 fn1-derivative) nil nil nil nil nil nil)))