((algebra::p-zip (nil nil nil nil (if) nil nil) (nil nil nil (and p-tie p-tie) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::p-unzip-l (nil nil nil nil (if) nil nil) ((x) nil (powerlist-p) nil (if) nil nil) ((x) nil (powerlist-p p-untie-l) nil (if) nil nil) ((x) nil (p-untie-l powerlist-p p-untie-l) (p-tie) nil nil nil) ((x x) nil (p-untie-r recursive-call recursive-call) nil nil nil nil) ((x) nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (algebra::p-unzip-r (nil nil nil nil (if) nil nil) ((nil) nil (powerlist-p) nil (if) nil nil) ((x) nil (powerlist-p p-untie-r) nil (if) nil nil) ((x) nil (p-untie-l powerlist-p p-untie-r) (p-tie) nil nil nil) ((x x) nil (p-untie-r recursive-call recursive-call) nil nil nil nil) ((x) nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil)) (algebra::p-similar-p (nil nil nil nil (if) nil nil) (nil nil (powerlist-p not) nil (and) nil nil) ((x) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((y y) nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::p-regular-p (nil nil nil nil (if) nil nil) ((t) nil (powerlist-p) nil (and) nil nil) ((x) nil (recursive-call recursive-call) (p-similar-p) nil nil nil) (nil nil (p-untie-l p-untie-r p-untie-l p-untie-r) nil nil nil nil) ((x x x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1) (p-zip) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1) (p-tie) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2 (nil nil nil nil (if) nil nil) (nil nil nil (and p-zip fn2) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2 (nil nil nil nil (if) nil nil) (nil nil nil (and p-tie fn2) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-comm (nil nil nil nil (if) nil nil) (nil nil nil (and p-zip fn2-comm) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-comm (nil nil nil nil (if) nil nil) (nil nil nil (and p-tie fn2-comm) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-assoc (nil nil nil nil (if) nil nil) (nil nil nil (and p-zip fn2-assoc) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-assoc (nil nil nil nil (if) nil nil) (nil nil nil (and p-tie fn2-assoc) nil nil nil) ((x y) nil (powerlist-p powerlist-p) (recursive-call recursive-call) nil nil nil) ((x y) nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-fn2-accum-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1) (fn2-accum) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-fn2-accum-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1) (fn2-accum) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::untie-on-x-and-y (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (list list) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-untie-l p-untie-l p-untie-r p-untie-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-plus-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1-num) (+) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-plus-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1-num) (+) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-and-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1) (and) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-and-fn1 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p fn1) (and) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::a-zip-list-of-type-fn (nil nil nil nil (if) nil nil) (nil nil (powerlist-p type-fn) (and) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-unzip-l p-unzip-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::b-tie-list-of-type-fn (nil nil nil nil (if) nil nil) (nil nil (powerlist-p type-fn) (and) nil nil nil) ((x x) nil (recursive-call recursive-call) nil nil nil nil) (nil nil (p-untie-l p-untie-r) nil nil nil nil) ((x x) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-on-x-and-y (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (list list) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-swap-on-x-and-y (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (list list) nil nil nil) ((x x y) nil nil (recursive-call recursive-call) nil nil nil) (nil nil (p-unzip-l p-unzip-r p-unzip-r p-unzip-l) nil nil nil nil) ((x y x y) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-on-x1-x2-y1-and-y2 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (list) nil (list) nil) ((x1 x1 x2 y1 y2) nil nil nil nil (recursive-call recursive-call) nil) (nil nil (p-unzip-l p-unzip-l p-unzip-l p-unzip-l p-unzip-r p-unzip-r p-unzip-r p-unzip-r) nil nil nil nil) ((x1 x2 y1 y2 x1 x2 y1 y2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)) (algebra::unzip-swap-on-x1-x2-y1-and-y2 (nil nil nil nil (if) nil nil) (nil nil (powerlist-p) (list) nil (list) nil) ((x1 x1 x2 y1 y2) nil nil nil nil (recursive-call recursive-call) nil) (nil nil (p-unzip-l p-unzip-l p-unzip-r p-unzip-r p-unzip-r p-unzip-r p-unzip-l p-unzip-l) nil nil nil nil) ((x1 x2 y1 y2 x1 x2 y1 y2) nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))